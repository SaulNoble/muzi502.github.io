<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子</title>
  
  <subtitle>时光痕迹</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.502.li/"/>
  <updated>2019-12-06T07:40:26.613Z</updated>
  <id>https://blog.502.li/</id>
  
  <author>
    <name>木子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kubernetes 社群分享 QA 汇总</title>
    <link href="https://blog.502.li/archives/kubernetes-QA.html"/>
    <id>https://blog.502.li/archives/kubernetes-QA.html</id>
    <published>2019-12-04T05:00:00.000Z</published>
    <updated>2019-12-06T07:40:26.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="README"><a href="#README" class="headerlink" title="README"></a>README</h2><p>内容主要来自在社群里有关企业 Kubernetes 实践过程的直播分享，下面截取聊天记录的自 QA 部分 。由于这些问题无法被搜索引擎检索到，所以就把这些提问的问题汇总到一起，方便大家自查。</p><h2 id="Kubernetes-在信也科技的落地实战"><a href="#Kubernetes-在信也科技的落地实战" class="headerlink" title="Kubernetes 在信也科技的落地实战"></a>Kubernetes 在信也科技的落地实战</h2><p><a href="https://shimo.im/docs/3RkcgcPq3JjVtxwr" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：dns记录是如何维护的，还有maclvlan的记录的维护？谢谢老师回答</p></blockquote><p>A：dns系统我们实现了2个服务，一个是监听在53端口提供dns查询的服务，一个是前台管理站点，前台站点负责dns记录的增删改查。支持单独设置和批量导入功能。这2个服务共享同一个数据库。内容的话是由信也科技各个研发团队共同维护的。macvlan是在每台宿主机上创建的。我们一般会在每台宿主机上创建多个macvlan网段。</p><blockquote><p>Q：Macvlan是没有service，选择MacVLan是基于哪些考虑呢？MacVLan使用过程中，对于不同的内核版本，不同的高可用组网，是存在兼容性问题的，这一块实践能分享下么？</p></blockquote><p>A：选择macvlan一是因为它的简单，使用docker命令就可以创建出来，不需要其他配套的服务或数据库来管理。二是因为它有独立的IP和MAC地址，这样可以让信也科技之前跑在虚拟机上的服务能够快速的迁移到容器。我们对于宿主机的内核版本是严格控制的，不存在内核版本不同的情况。但是macvlan的缺点也比较明显，它依赖于硬件，宿主机需要连到交换机trunk口。并且它的灵活性也不够高，不适合大规模的组网。由于目前信也科技内部的网络结构还是比较简单的，并没有遇到兼容性的问题。</p><blockquote><p>Q：为什么不试着对k8s自动更新呢，每一次手动更新都需要一定的时间成本吧？</p></blockquote><p>A：目前我们认为手动更新比较稳妥，并且更新不是一个频繁的操作，时间成本还好。</p><blockquote><p>Q：请问下，这个是自建机房环境上的集群？是否适用公有云环境？外部访问流量是如何接入的呢？ingress controller基于什么考虑来选择的，谢谢。</p></blockquote><p>A：这个是自建机房环境上的集群。外部的流量会先经过F5，然后经过nginx集群，所有的容器实例和虚拟机都是通过nginx负载均衡的。在nginx上面我们使用了新浪微博的nginx-upsync-module模块，可以从consul同步upstream中的实例。我们并没有使用ingress controller，而是通过用户在我们的容器发布平台上去手动的拉入和拉出流量。用户拉入流量的操作会在consul里面添加实例的IP和端口，nginx自动从consul同步实例后该实例就接入流量了。</p><blockquote><p>Q：直接使用Pod的话，副本控制是如何做的</p></blockquote><p>A：副本控制目前是比较静态的。用户在容器发布平台部署可以选择副本数。此后如果用户不添加和删除实例那么副本数是不会变的。</p><blockquote><p>Q: 如何更新证书</p></blockquote><p>A：先重新生成证书，然后先在master节点上更新，需要依次重启etcd、apiserver、controller-manager和scheduler服务。master更新完毕后，再把所有的node节点上证书更新一下，需要重启kubelet。证书的更新过程中除了造成集群的短暂不可用之外不会影响已经运行的容器的，所以是安全的。</p><blockquote><p>Q：蓝绿发布和灰度发布是如何实现的？</p></blockquote><p>A：这2个都是通过我们的容器发布平台实现。蓝绿发布是通过创建2个发布组，每个发布组含有相同的实例数。通常一个发布组含有当前版本的实例并且是接入流量的，另外一个发布组包含上一版本的实例或者是即将上线版本的实例。通过在2个发布组切换流量来上线新版本或回滚到旧版本。灰度发布可以先上线一个实例的流量，没问题之后可以把剩下的实例都接入流量。这些操作目前都是平台上用户手动操作实现的。</p><blockquote><p>Q：集群平台的高可用是怎么做了？有没有做多集群多活或者灾备？</p></blockquote><p>A：我们生产环境有部署多个k8s集群，也有2个不同的机房部署。我们的容器发布平台会把实例均衡分发到不同的k8s集群。</p><blockquote><p>Q：开发测试环境的镜像仓库如何同步到生产镜像仓库？</p></blockquote><p>A：镜像仓库我们测试和生产用的是同一套。 公司使用的是阿里云的托管版k8s与,发现托管版的k8s并没有多个主节点,问一下阿里的托管版k8s与标准版k8s</p><blockquote><p>Q：问一个细节问题，请问k8s集群扩容是通过什么手段实现的？</p></blockquote><p>A:我们实现了一套ansible脚本去实现自动添加node节点。</p><blockquote><p>Q：我们也是用的macvlan，这个模式下，你们为什么没用cni配置网络，而是用的docker来配置，这样维护成本高一些。另外，macvlan模式，主机无法访问本机内的容器，这个怎么解决的？</p></blockquote><p>A：我们是用docker命令去创建macvlan，实际还是使用k8s的cni。使用vlan之后可以解决主机无法访问本机内的容器。</p><blockquote><p>Q：ingress用的什么，为什么选择它？</p></blockquote><p>A：见Q5问题的回答</p><blockquote><p>Q：刚才提到节点证书过期导致集群异常，k8s本身会在节点异常以后，调度迁移非正常节点的实例的。我的问题是，如果证书更新需要一个过程，那么，节点恢复也是一个过程，这个时候，仍在异常的节点实例，会迁移到正常节点，而且，因为coredns和ingress对接的是apiserver，那么，节点异常基本上等同于这个节点上的实例，都会被apisercer摘掉，虽然容器也还在，但是流量入口和dns侧实例不在了，这样一来，证书过期，不就等同于所有实例全部不可用嘛？</p></blockquote><p>A：因为我们只用了k8s中的pod，并且关闭了k8s中的异常节点自动迁移实例的功能。这些高可用功能我们自己实现了一个类似的，这样可以按我们的需要去定制。coredns我们只是简单的用来作为dns服务器，并没有和apiserver对接，也没有使用ingress，见Q5的回答。</p><blockquote><p>Q：想问下老师你们目前是前后端完全分离的么？目前的前端应用部署方式是怎样的？如何控制一些前端的发布工作流？以及与前端相关的后端微服务部分，是如何保证发布顺序以及关联性的。</p></blockquote><p>A:目前我们上容器的还是以java为主的后端服务偏多。目前能了解到的是前端应用都是放到nginx中来对外提供服务的。对于前端发布的工作流以及如何保证发布顺序以及关联性的目前都是通过人肉去控制和完成的，没有做到自动化。</p><h2 id="基于云原生日志分类处理方案与落地实践"><a href="#基于云原生日志分类处理方案与落地实践" class="headerlink" title="基于云原生日志分类处理方案与落地实践"></a>基于云原生日志分类处理方案与落地实践</h2><p><a href="https://shimo.im/docs/RKYXGj6hvYJWTPQD" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：filebeat 与flunted的区别大不？该如何选择</p></blockquote><p>A：Fluentd 针对结构化的数据，灵活性是一个考量。</p><blockquote><p>Q：filebeat单纯采集docker日志发现不能获取docker.container.name，docker.container.image信息不知为何？</p></blockquote><p>A：filebeat支持多种采集方式，可以将filebeat以进程运行在docker容器中，收集容器日志，也可以单独部署filebeat采集docker生成的日志文件，可以参考filebeat官方yaml配置文件。</p><blockquote><p>Q：能否对采集到的日志信息做到告警处理？</p></blockquote><p>A：告警需要分场景，入库ES可以通过sentinl插件接入告警。 规范处理方式应将各类落地日志对接中心告警平台。</p><blockquote><p>Q: es的机器学习功能是否有实际价值？</p></blockquote><p>A：在机器学习方面没有太多接触。</p><blockquote><p>Q：采集agent是sidecar还是daemon模式？</p></blockquote><p>A：守护进程与二进制部署。分场景部署，大部分采集场景使用daemonset，部分集群外中间件等组件以systemd部署。</p><blockquote><p>Q：有没有EFKoperator相关项目推荐？</p></blockquote><p>A：暂时没有相关推荐。</p><blockquote><p>Q：对于日志采集系统占用资源过多，怎么解决？</p></blockquote><p>A：需要从各方面优化，技术层面也是优化项，如提取偏移量方式对流量有很大影响，如文件扫描频率，对cpu有很大影响。 优化点首先从原生参数根据业务场景进行适配调整，特殊场景考虑原生扩展。</p><blockquote><p>Q：能用filebeat采集journald日志吗？怎么将系统日志和pod日志用同一个filebeat采集？</p></blockquote><p>有journalbeat 开源插件可以采集journald日志。系统日志和pod日志都落地文件，以多源目录采集，一般采用对接logstash做区分处理，若转发不采用logstash，需要扩展filebeat组件支持多目录指定不同的输出采集。<br>A：有没有调研过阿里开源的log-pilot来采集pod日志？<br>没有做过相关调研。</p><blockquote><p>Q：beats组件之间是否会有互相影响？比如filebeat MySQL的采集器 redis的采集器 docker的各种，部署很多是否会相互之间有影响</p></blockquote><p>A：你指的是filebeat内置module模块和对外部采集方式如何统一一套部署采集而不相互有影响么？ 如果是这样，通过filebeat配置文件指定module采集以及docker产生的文件配置进行采集。</p><blockquote><p>Q：日志告警是用的开源项目还是自研的呢？</p></blockquote><p>A：根据自身的平台确定方案，本案例的场景可以通过开源方案做一些简单告警，如ES通过sentinl做告警，Loki通过grafana告警，若自有大数据平台或者单独的告警平台，按照平台规则对接告警。</p><blockquote><p>Q：日志系统接入消息队列的意义是什么？</p></blockquote><p>A：消息队列是缓冲，重要日志接入消息队列可以提供缓冲存储，多次消费。</p><blockquote><p>Q：都是默认json日志么，有没比较其他log driver 使用场景</p></blockquote><p>A：</p><blockquote><p>Q：用loki主要目的是什么？是某些场景下es的替代品吗？二次开发考虑开源吗？promtail的性能瓶颈具体表现在哪里？和filebeat相比有什么优缺点？</p></blockquote><p>A：</p><p>Q: 我看loki现在还是在beta阶段，为什么考虑用？</p><h2 id="1121-社群直播：给-K8s-API-“做减法”：阿里云原生应用管理的挑战和实践"><a href="#1121-社群直播：给-K8s-API-“做减法”：阿里云原生应用管理的挑战和实践" class="headerlink" title="1121 社群直播：给 K8s API “做减法”：阿里云原生应用管理的挑战和实践"></a>1121 社群直播：给 K8s API “做减法”：阿里云原生应用管理的挑战和实践</h2><p><a href="https://shimo.im/docs/TX63YhJ8VjVvYXkW" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q： rudr是有某公司实际线上使用后开源的，还是纯开源项目？</p></blockquote><p>A1：rudr是一个reference项目，意思是用来做OAM实现的一个参考，目前是纯开源项目，不排除以后会演进为生产可用的项目。</p><blockquote><p>Q：oam spec中目前还没有看到属于infra operator的管理对象（补充：Component是面向app developer， Traits和AppConfiguration面向app operator，哪个对象是面向infra operator的？)</p></blockquote><p>A2：OAM本身就是基础设施运维手里的武器，包括Kubernetes、Terraform等一系列平台层的开源项目，基础设施运维可以通过这些开源项目构建OAM的实现（如rudr基于Kubernetes)。所以OAM的实现层就是基础设施运维提供的，他们不需要额外的对象来使用OAM。</p><blockquote><p>Q：oam controller和admission controller的分工标准是什么</p></blockquote><p>A3：OAM项目中的 admission controller用于转换和检验spec，定位完全等价于K8s中admission controller。目前实现的功能包括转换 [fromVariable(VAR)] 这种spec中的函数，检验AppConfig、Component、Trait、Scope等CR是否符合规范，是否合法等。<br>OAM Controller，即目前的开源项目rudr，就是整个OAM的实现层，它负责解释OAM的spec并转换为真实运行的资源，这里的资源可以是K8s原有的一些，也可以是像阿里云上的RDS这类云资源。目前rudr项目是Rust语言写的，考虑到K8s生态大多数都是用Go语言写的，我们后续也会开源一个go语言编写的OAM-Framework，用于快速实现像rudr这样的OAM实现层。</p><blockquote><p>Q：计划啥时候开源go的oam-framework呀？</p></blockquote><p>A4： 已经在走内部流程了。同时我们也需要进一步打磨oam-framework，让它适配大家的场景。</p><blockquote><p>Q：想问个问题，阿里是如何降低k8s的复杂度来满足运维和研发一些共性诉求的？在k8s中的用户user角色可能是开发也可能是运维。</p></blockquote><p>A5：目前我们遇到的大多数场景都能区分哪些是运维要关心的，哪些是研发要关心的。OAM降低K8s复杂度的主要方法就是关注点分离，给K8s的API 做减法，尽量让某一方可以少关注一些内容。如果你有这样一个无法分割的场景，其实我们也很感兴趣，欢迎把case提出来一起探讨。另一方面，我们并不是屏蔽掉K8s，OAM spec预留了充足的扩展性，完全可以把K8s原有的能力提供给用户。</p><blockquote><p>Q：我认为OAM是基于k8s针对于不同应用上的抽象层，现在我们有很多应用都是用Helm包包装好的，如果切换成OAM的话，我们需要注意哪些地方呢？</p></blockquote><p>A6：其实我们上半年一直在推广helm在国内的使用，包括提供了阿里的helm<a href="https://developer.aliyun.com/hub" target="_blank" rel="noopener">镜像站</a>等，所以OAM跟helm也是相辅相成的。简单的说，OAM其实就是helm包里面template文件夹里面的内容。Helm是OAM做参数渲染（template)和打包（chart)的工具。如果切换到OAM，helm的使用方式不需要变，里面的spec换成OAM的spec即可。</p><blockquote><p>Q：请问，rudr 用起来了吗，效果如何。rudr 的架构有没更丰富的资料</p></blockquote><p>A7: rudr一直是可以用的，大家要是用不起来可以提issue，想要什么方面的资料或者疑问也可以提issue，我们也在完善文档。目前相关的材料都在这里：<a href="https://github.com/oam-dev/rudr/tree/master/docs" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：rudr的hello world没跑起来，是不是k8s版本需要&gt;1.14 ?</p></blockquote><p>A8：具体这个问题就在github上提issue吧，我们每天都会关注issue，可以贴一些错误日志之类的。</p><blockquote><p>Q：我们一直在用helm打包我们的应用，去做gitops ，一个通用的chart 对应不同的values.yaml 做到了复用。听了分享，很期待OAM，当然还有openkruise。</p></blockquote><p>A9：openkruise 是开源的哈，大家可以关注 <a href="https://github.com/openkruise/kruise" target="_blank" rel="noopener">openkruise kruise</a> 我们也一直在迭代。</p><blockquote><p>Q：oam有哪些公司在用？实际体验反馈如何？</p></blockquote><p>A10：OAM刚刚发布一个月左右，具体有哪些公司已经在使用我们还没有来得及统计。阿里和微软内部都已经在使用，并且都有对外的产品使用OAM。就我们接触到的用户来说，无论是社区的用户还是阿里内部，都对OAM的关注点分离等理念非常认同，也都在积极落地。</p><blockquote><p>Q： rust 内部有哪些场景和业务使用了？贵司后续会继续运用在哪些场景？</p></blockquote><p>目前有一些小的场景在使用，具体还没有统计过，后续会继续用在一些需要较高性能的场景。</p><h2 id="10-10-社群文字直播：超大规模商用-K8s-场景下，阿里巴巴如何动态解决容器资源的按需分配问题？"><a href="#10-10-社群文字直播：超大规模商用-K8s-场景下，阿里巴巴如何动态解决容器资源的按需分配问题？" class="headerlink" title="10.10 社群文字直播：超大规模商用 K8s 场景下，阿里巴巴如何动态解决容器资源的按需分配问题？"></a>10.10 社群文字直播：超大规模商用 K8s 场景下，阿里巴巴如何动态解决容器资源的按需分配问题？</h2><p><a href="https://shimo.im/docs/Jc6yppJhcDYdPXRH" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：请问heapster中采集到的MetricMemoryWorkingSet指标与ps命令获取到的RSS有何区别？heapster的源码中对该指标的描述是“Total working set usage. Working set is the memory being used and not easily dropped by the kernel”，同时heapster也采集了MetricMemoryRSS，kubectl top为何采用MetricMemoryWorkingSet而不采用MetricMemoryRSS？在Kubernets 1.10版本下，部分运行Java应用的pod出现kubectl top值超过ps RSS值的情况。</p></blockquote><p>A1：阿里巴巴内部并不使用heapster，我们是通过直接去读取容器cgroup值，获取容器实时资源使用情况。据我所知，社区对于heapster完全废弃。建议通过主流工具采集，汇聚，聚合数据。试试 <a href="https://github.com/kubernetes-incubator/custom-metrics-apiserver" target="_blank" rel="noopener">custom-metrics-apiserver</a> 和 <a href="https://github.com/kubernetes/kube-state-metrics/tree/master/docs" target="_blank" rel="noopener">kube-state-metrics</a> 。在大规模场景下社区的很多开源工具都存在性能问题，一般这类工具我们倾向于自研。</p><blockquote><p>Q：如何看待suse 放弃openstack?</p></blockquote><p>A2：Openstack是款伟大的软件，它给IaaS的研发和周边生态带了很多意想不到的成果，例如ceph等。SUSE放弃OpenStack可能出于多种原因。或许是技术选型，或许是财政收益等等。顺便说说，SUSE目前在Kubernetes相关领域的投入还是挺多的。最近的Kubecon上，SUSE均展示了相关技术成果。</p><blockquote><p>Q：直接修改 cgroup 容器一定会获得资源吗？</p></blockquote><p>A3：容器技术隔离的技术基础就是cgroup层面。在宿主机腾出足够资源的情况下，给cgroup设置更大的值可以获取更多的资源。同理，对于一般优先级不高的应用，设置较低的cgroup资源值就会达到抑制容器运行的效果。</p><blockquote><p>Q：底层是如何区分在线和离线优先级的？</p></blockquote><p>A4：底层是无法自动获取谁是在线，谁是离线，或者谁的优先级高，谁的优先级低的。这个我们可以通过各种Kubernetes提供的扩展实现。最简单的是通过label，Annotation标识。当然通过扩展QoS class也是一种思路。社区版本的QoS class设置太过于保守，给予用户发挥的空间不大。我们通过这些方面也进行了增强。在合适的时候或许会推向社区。自来来来动感知是个方向，感知谁是干扰源，感知谁是某种资源型应用，这块我们还在研发中。做到真正的动态，肯定是具备自动感知的智能系统。</p><blockquote><p>Q： “与社区版  Vertical-Pod-Autoscaler 不同，Policy engine 不主动驱逐腾挪容器，而是直接修改容器的 cgroup 文件；“，想问一下，不主动驱逐的话，如果Node的资源达到上线了会怎么处理？</p></blockquote><p>A5：这是一个好问题。首先这里要先区分是哪种资源，如果是CPU型的，我们可以调整低优先级容器的cgroup下cpu quota的值，首先抑制低优先级的容器对于CPU的争抢。然后再适当上调高优先级容器的相关资源值。如果是内存型资源，这个不能直接去缩小低优先级容器的cgroup值，否则会造成OOM，对于学习学习内存型资源的调整，我们会在其他分享中继续讨论。这个技术比较特殊。</p><blockquote><p>Q： 只修改cgroup，怎么保证k8s 对单个物理机能够分配更多的容器</p></blockquote><p>A6：文字直播有了一定说明，容器的资源消耗并非是一成不变的，很多时候它们的资源消耗呈现潮汐现象，相同的资源条件下部署更多应用，完成更多作业就是达到资源利用的最大化的效果。资源出现超卖才是我们这个主题讨论的最大价值。</p><blockquote><p>Q：也就是说 低优先级的容器，request 设置的比limit 小很多，然后你们再动态的调整cgroup？</p></blockquote><p>A7：在现有QoS场景下，你可以理解被调整的Pod都是burstable的。但是我们并不是直接调整Pod元数据的limit的值，而是调整limit在cgroup反映的值，这个值在资源竞争缓和的时候还会被调整回去的。我们并不建议单机的cgroup数据和etcd的中心数据割裂太久。如果长期偏离，我们会像VPA发出警报，联动VPA做调整。当然在容器运行的高峰期，任何重建容器的操作都是不明智的。</p><blockquote><p>Q：你们现在cpu 超卖的比例是多少？</p></blockquote><p>A8：这个不方便回答，哈哈。等我确认可以回答的时候再修改这里。</p><blockquote><p>Q：谢谢了，整体的理解就是你们开始就让物理机超配了一定比例的pod，然后通过策略动态调整容器的cgroup值</p></blockquote><p>A9：如果资源完全是富足冗余的，这个动态调整也有一定意义。就是并非资源用满场景下，高优先级应用会被干扰，实际上，当主机的CPU达到一定比例，打个比方例如50%，应用的时延就变大。为了完全确保高优先级应用的SLO，牺牲低优先级的CPU正常运行也是有价值的。</p><blockquote><p>Q：如何确保一定是低优先级的容器和高优先级的服务部署在一起的，而不都是高优先级或者不都是低优先级，只用packing 算法就可以？</p></blockquote><p>A10：这个方法比较多，可以配置亲和性和非亲和性。可以通过预编排等手段。预编排就是在应用部署前，首先规划好各个应用部署在哪些node上。</p><blockquote><p>Q：Policy engine 有没有考虑开源？</p></blockquote><p>A12：有计划进行开源，Policy engine更多的是和自身的应用属性相关，电商应用或者大数据处理应用的策略都是不相同的，我们开源会首先开源框架和附带一些简单的策略，更多的策略可以用户自定义。</p><blockquote><p>Q：只是调整 Cgroup 的配置，对于应用中的配置如何改变？比如 JVM 根据中的一些参数？如果不重启 jvm 如何让 Cgroup 的限制生效？</p></blockquote><p>A8: Java进程还是比较特殊的。很多时候容器重启才能适配的参数才能生效。我们这里针对的是一种通用的方式。对于你提到的这类应用，压制低优先级的容器有效，但是给高优先级应用再分配资源应该无效。</p><blockquote><p>Q：我之前遇到的大部分应用都无法正确感知 cgroup 的配置，因此很多情况都需要在启动参数里面根据 cpu 或者 mem 设置参数，那么也就是说即使改变了 cgroup 对于他们来说都无效，那么使用场景也就有限了</p></blockquote><p>A14：限制容器的资源使用这个还是有价值的。限制低优先级应用本身也可以提升高优先级应用的SLO，虽然效果没有那么明显。稳定性的考量同样也很重要。</p><blockquote><p>Q：Policy engine 目前在阿里的使用如何？在生产上有多上的规模使用这种方式进行动态调整？是否和社区的 HPA VPA 配合使用？</p></blockquote><p>A15: Policy engine在阿里某些集群已经使用。至于规模暂时无法透漏。涉及到很多组件之间的联动，社区的HPA和VPA目前都不太能满足我们的需求。因此阿里的HPA和VPA都是我们自行开发的，但是和社区的原理是一致的。阿里HPA的开源可以关注 openkruise社区。VPA开源计划我这里还没有确切消息。</p><blockquote><p>Q：data aggregator 通过什么方式采集数据?</p></blockquote><p>A16：类似cadvisor方式直接从node的cgroup获取实时资源消耗数据。然后根据容器，node为单位再进行聚合。</p><blockquote><p>Q：当单机节点资源不足以提供容器扩容时，目前是否可以进行HPA或VPA扩容呢</p></blockquote><p>A17：单机节点不足的时候，应用可以通过HPA进行增加副本应对。但是VPA如果选择原节点进行更新的话，是失败的。只能调度到其他资源丰富的节点。在流量陡升的场景下，重建容器未h h必能满足需求，很可能导致雪崩，即重建过程中，整个应用其他未升级的副本接受更多流量，OOM掉，新启动的容器再瞬间被OOM，所以重启容器需要慎重。快速扩容（HPA)或者快速提升高优先级资源，抑制低优先级容器资源的方式效果更明显。</p><h2 id="1107-社群直播：如何实现-K8s-一键部署？开发部署提速-8-倍？带你上手一款下载超-10-万次的-IDEA-插件"><a href="#1107-社群直播：如何实现-K8s-一键部署？开发部署提速-8-倍？带你上手一款下载超-10-万次的-IDEA-插件" class="headerlink" title="1107 社群直播：如何实现 K8s 一键部署？开发部署提速 8 倍？带你上手一款下载超 10 万次的 IDEA 插件"></a>1107 社群直播：如何实现 K8s 一键部署？开发部署提速 8 倍？带你上手一款下载超 10 万次的 IDEA 插件</h2><p><a href="https://shimo.im/docs/6HDpcqJ3yQx8yHh3" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q： k8s各组件，比如etcd，建议部署在容器内还是物理机？有什么区别或者优劣吗？</p></blockquote><p>A1：etcd可以部署在容器里，物理机的话就是性能更好一点。</p><blockquote><p>Q：如果登录是堡垒机，并且是动态密码，那个配置保存必须要密码，所以不方便吧！能动态密码登陆局域网服务器吗？</p></blockquote><p>A2：这是个非常好的建议，我们需要在后续的版本中开发这些能力。</p><blockquote><p>Q：如何在本地电脑(如mac)部署k8s玩玩，以及写Go代码增删改查k8s资源，这块有啥玩一玩的优良经验嘛？目的是想本地开发测试k8s，更加去熟悉k8s内部机制。</p></blockquote><p>A3：本地mac要玩k8s可以去搜一下minikube。</p><blockquote><p>Q：k8s一键部署是用kubeadm部署么，本地虚拟机部署多节点k8s集群，虚拟机网络应该怎么处理。由于是自己部署着玩玩，在公司里虚拟机网络不能使用桥接的方式。而使用网络地址转换NET+hostonly 在起calico网络的时候worker节点calico起不来，提示网络冲突。谢谢</p></blockquote><p>A4： nat模式两个机器会用同一个IP，所以会冲突，可以给虚拟机配两个网卡，1个网卡用NET+hostonly用来访问外部网络，1个网卡用private network用来节点间Pod的网络</p><blockquote><p>Q：对于后端开发者来说(写Go)，有必要去更加熟悉k8s么？毕竟k8s就是个运维工具，为了更爽的去部署软件以及扩容等等，有必要去深入了解k8s内部机制么，这块有没有什么建议和见解？</p></blockquote><p>A5：首先，Kubernetes 本身是用 Go 语言写的，就是一个最好的 Go 语言开发和架构的最佳学习物。</p><blockquote><p>Q：k8s 网络组件calico和自带的flannel，请问建议采用哪一个？</p></blockquote><p>A6：简单上手选flannel，看重功能选calico</p><blockquote><p>Q：有哪些开源的管理k8s Web UI 软件，这样可以部署在公司内，所有团队直接在该软件内傻瓜式操作k8s资源，自己部署上线代码？</p></blockquote><p>A8：K8s自带的dashboard可以试试</p><blockquote><p>Q：我想深入学k8s，但是k8s内部使用了 etcd/coredns，以及监控这块使用 prometheus，这些技术是不是先深入学习下，再去深入学习 k8s呢，毕竟 k8s 太大了，一上来就深入会容易找不到门路，这块大大有啥经验没？</p></blockquote><p>A9：建议从K8s核心开始学习，再学习周边组件。从中心到外围的顺序。推荐学习下CNCF和阿里云联合做的这个免费公开课：<a href="https://edu.aliyun.com/roadmap/cloudnative" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：若k8s集群服务器宕机，请问如何快速恢复集群能力（除拉起kubelet等待其他组件自动拉起，是否还有其他方式)？</p></blockquote><p>A10：配置3master高可用可降低宕机带来的损失，另外备份组件的配置文件。</p><blockquote><p>Q：Master节点如果同时作为node节点，请问存在哪些风险？</p></blockquote><p>A11：master节点不宜作为node节点部署应用，会导致集群不稳定。</p><blockquote><p>Q： 您好！现在使用了jenkins pipeline做为ci工具，cd1: helm chart 对每个应用编写对应的chart，通过questions.yaml在rancher定制化接口. cd2: 通过argocd 和helm chart 形成的git ops  ,请问有没有更好的工具推荐？ 想解决批量升级，现在每次升级都需要人工干预.</p></blockquote><p>A12:</p><h2 id="Kubernetes在SHAREit的落地实战"><a href="#Kubernetes在SHAREit的落地实战" class="headerlink" title="Kubernetes在SHAREit的落地实战"></a>Kubernetes在SHAREit的落地实战</h2><p><a href="https://shimo.im/docs/KDWHyyPCtYCPcVdy" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：直接采用物理机还是有先做IaaS层虚拟化？</p></blockquote><p>A：我们做的是出海业务，基本上考虑到合规等问题，我们主要项目全部运行在公有云上。</p><blockquote><p>Q：有没有碰到调度的问题，某台服务器CPU或内存高了仍调度到这台上？</p></blockquote><p>A：遇到过，一般情况下，需要考虑你的应用是否加了很多亲和性或是nodeselector。正常的调度器，是会优先考虑资源平衡的。</p><blockquote><p>Q：请问一下coredns如何反解析pod的IP地址？不用svc的情况下，是否可以解析pod的名字？是否有用coredns的rewrite插件。</p></blockquote><p>A：这个不清楚，我们没有这样的场景。但是coredns，支持编写自己的插件。</p><blockquote><p>Q：请问下，不同云之间的延时怎么解决?你们是一朵云就部署一个完整的业务么？</p></blockquote><p>A：我们会在不同云之间通过专线打通。基本上相关联的业务会部署在一家云上。但是我们会尽量保证同一个业务部署在不同的AZ。</p><blockquote><p>Q：告警策略上有没有最佳实践分享？</p></blockquote><p>A：我们的统一报警平台基于alertmanager实现，基本上用到了它提供的静默，分组，抑制等特性。只不过我们对接了它的api，也集成到scmp当中。</p><blockquote><p>Q：配置管理是怎么做到不同环境，不同配置？</p></blockquote><p>A：我们的配置是在configmap结合数据库来实现版本管理，本质上每个集群都需要单独设置。所以不同的环境，设置不同的configmap即可。</p><blockquote><p>Q：业务的数据库是在k8s里面运行，还是单独搭集群？</p></blockquote><p>A：我们除了prometheus和一些mq，我们目前还没有尝试有状态应用。</p><blockquote><p>Q：linux内核参数优化具体你们碰到过哪些坑呢，怎么优化的呢？线上使用的centos版本和内核如何选择的？</p></blockquote><p>A：我们使用的是公有云，内核版本一般公有云提供版本中最新的。其实不同的主机类型，相应的参数不一样，需要在选型主机的时候，做大规模测试。比如 net.netfiletr 下的参数。我们会基于公有云镜像，做优化，然后利用pakcer打成新的镜像使用。</p><blockquote><p>Q：自研组件，可以开源吗？比如日志的那个</p></blockquote><p>A：SHAREit 是一个技术非常open的单位。我们从上到下，鼓励技术人员去分享。所以如果大家有需要，我们会做一下内部的整理，开源出去。同时，我也会写一些具体的文章，来讲具体的细节。</p><blockquote><p>Q：alertmanager报警，我使用的prometheus operator安装的，使用默认的微信报警，这个报警时区问题，是修改源码解决，还是使用一个webhook？报警的模板文件是如何管理的？</p></blockquote><p>A：我觉得你应该需要重新定制alertmanager的镜像，在dockerfile中修改时区。其实我们这边也fork了alertmanager，做了一些优化和功能增强，比如直接将dingtalk集成进来，避免引入webhook组件，所以我们也是自己打的镜像。至于报警模板，我们这边先把报警模板数据存放到数据库当中，然后结合confd来实现altermanager 配置文件刷新的。</p><blockquote><p>Q：hpa部分你们怎么做到根据不同业务选择不同的策略?</p></blockquote><h2 id="Jenkins-X：基于-Kubernetes-的-Serverless-Jenkins"><a href="#Jenkins-X：基于-Kubernetes-的-Serverless-Jenkins" class="headerlink" title="Jenkins X：基于 Kubernetes 的 Serverless Jenkins"></a>Jenkins X：基于 Kubernetes 的 Serverless Jenkins</h2><p><a href="https://shimo.im/docs/rXvrqchvXx63QtVy" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：这是干嘛的</p></blockquote><p>A：在分享有关 Kubernetes 之上的 DevOps 产品 Jenkins X，有兴趣的话可以了解一下。可以加速软件的交付速度与可靠性。</p><blockquote><p>Q：有实际应用案例吗？自己怎么快速体验JenkinsX的特性？</p></blockquote><p>A：现在国内的应用案例相对较少，是属于下一代的 CI/CD 产品，在国外的用户会更多一些。jenkins x 支持一键在大型云厂商/现有 kubernetes 集群上进行部署，可以参考官网文档安装一下。</p><blockquote><p>Q：和gitlab ci相比有什么优势</p></blockquote><p>A： 和 gitlab ci 相比的优势可以参考下 jenkins 与 jenkins x的对比。在用户角度来说，以应用为视角使用起来会更加方便，也方便利用社区资源。从架构和可维护性来说，Jenkins X 的架构会相对更加先进（与诞生年代有直接关系)。</p><blockquote><p>Q：prow现在支持gitlab了吗？现在大多数企业的代码仓库其实更多使用gitlab。</p></blockquote><p>A：prow 目前还没有支持gitlab，这也是jenkins x目前最大的一个问题，据我所知目前 jenkins x项目组在主要解决这部分问题，现在在 jenkins x当中开发最活跃的模块 lighthouse 是做这部分工作的，有兴趣的话可以了解一下。</p><blockquote><p>Q：从Jenkins迁移到X似乎需要大量功夫？</p></blockquote><p>A：现在 Jenkins X 是有两个版本的，其中一种是使用传统的 Jenkins 架构，这个迁移过去相对平滑一些，但具体也和组织情况相关。<br>不过社区主推的是基于 tekton 的方案，也被称为下一代 CI/CD 产品，如果是迁移到这种方案的话可以忘掉原来 Jenkins 所带来的经验，重新开始。</p><blockquote><p>Q：KubeSphere 计划把 Jenkins X 用进去吗？</p></blockquote><p>A：在目前版本当中还没有计划把 jenkins x 用进去，很大的原因是因为 Q4，现在 prow 支持的scm 类型太过于单一了，不太适合企业客户。</p><blockquote><p>Q：Jenkins X可以直接用于生产环境的CD吗？可以结合公司的审批流吗？与kubnetes如何协作？</p></blockquote><p>A：Jenkins X 是可以用于生产环境CD的，结合审批流应该有一定的开发量。可以看下分享有关 Jenkins X 的环境管理部分，Jenkins X 本身就是和 k8s 深度融合的。</p><blockquote><p>Q：KubeSphere DevOps 对比原生的 Jenkins 有哪些优势呢？</p></blockquote><p>A：KubeSphere DevOps 没有对原生 Jenkins 进行很大的改造。但是用户如果自己搭建 Jenkins 需要自己去了解 Jenkins 的原理以及各种和 k8s结合的方案、如何运行的更稳定。<br>如果使用 KubeSphere 的话用户可以直接使用流水线，避免掉了自己搭积木的过程。<br>并且对于一些普遍的问题，我们会向 Jenkins 提交 PR 来改进 Jenkins的功能。<br>例如下面链接所对应的 PR 让 kubernetes 的 agent 调度从10s 左右优化到了 10ms 左右<br><a href="https://github.com/jenkinsci/kubernetes-plugin/pull/598" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：谢谢</p></blockquote><p>A：所有人都在这里提问。</p><blockquote><p>Q：其实gitops完全落地在一般企业是有难度的，考虑到有一些上线审批等流程。gitops落地有什么好的建议和思考？</p></blockquote><p>A：个人认为理想状况下最好的方案还是利用 PR/MR 的方式进行开发，在 PR/MR 里面进行审核，这可能和很多企业的现状不太符合，但其实这种方案在某种程度上也是可以落地上线审批流程的。<br>可以先推行开发过程利用 PR/MR，用数据证明这种方式是可行的，再去推动生产环境部署切换工作方式。</p><blockquote><p>Q：jenkins如何做备份恢复</p></blockquote><p>A: Jenkins 的备份有很多种方案。其中一种最常见也是比较暴力的方案就是备份下整个 Jenkins Home 目录，恢复的时候直接恢复整个目录就可以了。<br>另外一种常见方案是 jenkins kubernetes operator 所采用的方案，在这个方案里面把 jenkins 的配置和操作历史记录进行了分离，配置（包括流水线的创建)都存储在 git 仓库中，而构建记录、日志等信息单独进行备份，有兴趣的话可以在 github 上找到这个项目了解一下。</p><blockquote><p>Q： jenkins X能支持jenkins现有的插件嘛？</p></blockquote><h2 id="k3s在边缘计算中的应用实践"><a href="#k3s在边缘计算中的应用实践" class="headerlink" title="k3s在边缘计算中的应用实践"></a>k3s在边缘计算中的应用实践</h2><p><a href="https://shimo.im/docs/x3WjRWHhdJVPkdQG" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：一台阿里云杭州服务器，一台阿里云美国服务器，都有公网IP，如何方便，快捷的（并且不购买网络带宽费用)的搭建一个2台服务器的K3S集群？</p></blockquote><p>A：你这个问题的话主要就是你的这个路由的问题，pod网络和service网络的一个拉平的问题，涉及到这个路由的跳转需要你自己去去配置的。</p><blockquote><p>Q：边缘节点的K3S集群可以很方便的被中心节点的K8S集群来管理吗？如何 管理？数据如何同步？中心节点需要存放边缘节点的数据吗？边缘节点挂了之后中心节点能拉起或管理吗？现在我们也计划做这放面的工作。我们有多个分公司？想在分公司部署集群，但没有维护人员，还有一个问题就是，现在集群 联邦不成熟，也不能很好纳管多个集群做资源调度？</p></blockquote><p>A：这个k3s集群和k8s集群，它是一个平级的关系。他属于多个集群如果要管理多个集群我们可以采用向rancher这样的集群管理平台去管理它，我们现在就是这么做的在阿里云上有一个rancher的平台，然后管着我们在阿里云平台的业务集群和我们的多个边缘集群。<br>然后你的第二个问题就是中心节点会存储我整个集群的所有的数据，因此我们应该周期性的对这个中心节点的这个数据进行一个备份，而且在未来的版本当中，k3s会支持HA，它是，它是通过实现后端存储，如postgresql、MySQL的一个高可用性保证我们的集群的可靠性的，这个现在已经是实验的特性了，估计在未来很快就会发布了。工作节点挂了的话分两种情况吧一种是你这个节点直接就不能工作了，还有一种情况点跟我的指甲想不通啊，那么前一种情况的话肯定是我的业务也不能正常工作了，后一种情况的话，其实我的业务还是在正常运行的，只不过是不能通过我的主节点去调度了，但是一旦它恢复这个通信的话，所有的都会自动恢复，因为这个边缘的这个设备的他有个特点就是网络不稳定，还有，还有就是经常会掉件这种情况，我们这个集群已经在跑了有两三个月了，表现一直是很好的。</p><blockquote><p>Q：k3s 去哪获取 资料了？</p></blockquote><p>A：k3s相关的文档我们可以在rancher的官方网站上获取的。也可以到它的github主页上面去获取相关的材料。<br>补充：这题我会！k3s的官网是：<a href="https://k3s.io" target="_blank" rel="noopener">k3s.io</a>，GitHub的主页是：<a href="https://github.com/rancher/k3s" target="_blank" rel="noopener">k3s</a>，最新开始运营的官方微信公众号ID是：Dockerlab</p><blockquote><p>Q：K3s的list-watch请求没有走tunel-proxy吗？</p></blockquote><p>A：k3s的主节点和agent节点之间通信都是走的tunnel通道的。</p><blockquote><p>Q：边缘网络不稳定的场景，list-watch请求会有问题吗？K3s有针对边缘网络不稳定场景做优化不？</p></blockquote><p>A：这个场景其实就是kubelet跟我的主节点失联，一旦这个通信恢复的话，主节点他会直接把状态重新传到这个工作节点上去。</p><blockquote><p>Q：k3s在使用上和k8s相比有什么限制和优势？目前我理解来看主要就是占用较少资源。</p></blockquote><p>A：对，因为边缘设备的话都是很小的工，一般都是公用的，工业用的工控机，工控机一般都是一个低压的CPU啊，然后还有一个就是内存比较小。实际上来讲的话我目前没有发现根k8s有太大的区别，基本上在我k8s上部署的应用全部可以部署在我的边缘端。</p><blockquote><p>Q：k3s的主节点和agent节点之间通信都是走的tunnel通道的。 List-watch请求也走tunnel通道的吗，据我看源码，并没有走tunnel，只有logs和exec接口走了tunnel。</p></blockquote><p>A：这里相关的源代码我没有深入去研究过，下来我详细去了解下k3s这里的机制。<br>补充：list-watch就是直接访问kube-apiserver的端口。</p><blockquote><p>Q：k3s集群直接更改设备IP是否可用，如果不支持更改IP，对于更改IP的需求有什么应对方案？</p></blockquote><p>A：这里分两种情况，在集群部署完成后，如果要更改server节点的IP，那么我们需要重新去将所有的agent节点重新加入到集群中，如果更改agent的节点IP，那么可能导致agent节点对应存储在server节点中的身份凭证失效，也就是需要移除失效的节点，将修改后的节点重新加入，当然这种情况是在同一个子网内的情况，如果跨网段的话，那就会更复杂一些了。</p><blockquote><p>Q：Rancher管理k3s集群，k3s的master要暴露公网IP吗？主讲人的多个边缘</p></blockquote><p>A：server节点不需要暴露公网IP，只需要能从server节点内部访问rancher即可。通过import的形式将k3s集群导入到Rancher中即可管理起来，也可以管理应用和配置。</p><blockquote><p>Q：k3s server 也支持docker吧</p></blockquote><p>A：是的，agent节点提供了–docker参数，可以指定它的容器运行时为docker</p><blockquote><p>Q：rancher  可以自己部署，管理自己的 k3s?</p></blockquote><p>A：是的，我们的rancher是部署在阿里云端，同时管理了我们的中枢业务k8s集群和多个客户的k3s边缘集群。</p><blockquote><p>Q：有在Android上成功运行的经验或者案例么</p></blockquote><p>A：我们暂时还没有涉及到arm的设备，也没有可供测试的arm设备，因此暂时没有这方面的实践。</p><blockquote><p>Q：运行单个Docker容器来安装Ranche？可以满足管理吗？</p></blockquote><p>A：可以，但是这样可靠性会不好，推荐还是多实例通过负载均衡的形式来部署。</p><blockquote><p>Q： k3s 支持master高可用吗？</p></blockquote><p>A：暂时还不支持，但是已经发布了实验特性的版本，通过对k3s集群数据存储的高可用来实现的，我们可以部署高可用的postgresql作为k3s集群的管理节点的数据存储。这个特性应该不久就会GA了。</p><blockquote><p>Q：边缘资源充足，是否可以直接用k8s?</p></blockquote><p>A：如果边缘设备资源充足的情况下，也可以使用k8s来维护，但是需要考虑的是边缘设备网络的复杂性和不稳定性。</p><blockquote><p>Q： K3s针对边缘设备网络的复杂性和不稳定性做了哪些改进</p></blockquote><p>A：譬如刚刚有同学提到的list-watch问题，k3s的我没有深入研究过，但是之前在调研kubeedge的时候，了解到其实就是在断网的情况下仍旧能够实现区域内自治，保证业务的稳定和持续性。</p><blockquote><p>Q：针对kubeedge实现的区域内自治，K3s当前没有实现的话，商用是否有风险呢，在边缘网络不稳定</p></blockquote><p>A：这个还是还是得从那个边缘端的得从那个边缘端的这个特点来说。边缘端设备比较分散，每个节点的责任其实很有限，当然肯定有一些非常重要的节点，那这一部分我们可以采取一些额外的措施来保证可靠性，譬如直接从硬件上冗余来保证这一个区域的业务不中断。不是说k3s不能实现区域自治，譬如worker节点在于主节点失联不受控了之后，我怎么管理这台节点的应用，这种情况一般发生有两种情形，一种是断网，一种是断电，当然，断电的情形就不说了，断网的情况下。</p><blockquote><p>Q：请问k3s,k8s,kube,openflow,现在名词越来越多了,有没有办法在去区别这些名词是处在哪些的阶段，用于什么功能？</p></blockquote><p>A：这个问题的话，首先还是根据项目需求来做对比调研工作，新技术层出不穷，不需要追求最新的，当下比较流行的一定是适应性最好的，一般经过了众多的验证。</p><blockquote><p>Q：k3s 启动个helm的时候，由于众所周知的原因，经常下载不到镜像，怎么解决呢？</p></blockquote><p>A：官方提供了离线镜像包，大约200MB不到，这个镜像包包含了我们启动server和agent节点所需的所有镜像，能够保证集群自身功能正常。helm 我们可以使用国内的charts源来代替，例如azure的源。</p><blockquote><p>Q：containerd可以配置morror么？</p></blockquote><p>A：可以配置，但是比较麻烦，docker提供了比较好的人际接口，所以推荐使用docker。</p><blockquote><p>Q：k3s和k8s搭建的容器系统是否可以无缝的相互切换，如果不是，应该怎么做适配才能相互转化？</p></blockquote><p>A：我不太清楚你这个无缝切换是什么意思，是业务迁移还是？首先这个需求可能并不常见，而且两者面向的场景不同。</p><blockquote><p>Q：备份k3s的集群数据为什么是备份那几个目录而不是备份sqlite的db文件？k3s的server支持类似rke对etcd定期自动备份配置吗？</p></blockquote><p>A：因为还涉及到一些认证文件，譬如agent节点在server端存储有一个身份标记，agent节点的恢复是会判断这些身份的。一旦丢失，重新注册相当于是一个新的节点了。</p><blockquote><p>Q：请教老师，不管是基于containerd还是docker，它们都是共享内核的，那么如何做到安全隔离呢？</p></blockquote><p>A：在底层的资源隔离上，还是依赖于系统的各种命名空间，这块建议可以详细研究一下pod的安全策略。</p><blockquote><p>Q：离线镜像文件是否只要放在images目录即可，文件名并不重要，都可以被识别出来？</p></blockquote><p>A：是的，使用containerd作为runtime时，不需要手动导入，启动时会自动从这里获取镜像，如果使用docker作为运行时，需要手动load镜像，因为国内直接访问不了gcr.io下面的镜像。</p><blockquote><p>Q：请问一个问题，单机版K3S，容器内访问本机的一个服务端口，无法访问，这个问题官方测试过吗？</p></blockquote><p>A：这个可能有很多种情形了，看是否是主机安全策略限制。例如selinux或者iptables规则限制了。</p><blockquote><p>Q：centos在边缘设备小内存设备上能装吗？也是有内存限制的吧，最小支持多少？</p></blockquote><p>A：k3s server官方给的需求是512MB就能满足，但是实际的观察中，一般情况下用到200多MB，剩下的就看你部署的应用的资源需求了。另外我们需要保证应用不能把系统资源全部抢占了。</p><blockquote><p>Q：k8与k3在api上使用上有啥具体差别比如是否支持crd?另外k8的网络组网方案有flannel和calico，k3是怎么组网的?</p></blockquote><p>A：K3s默认使用的是flannel网络。<br>补充：k3s也支持手动指定其他的CNI，都是比较灵活的配置。</p><blockquote><p>Q：k3s可以用来部署安全网关么？</p></blockquote><p>A：暂时没有进行过相关的实践。</p><blockquote><p>Q：iot client设备没有固定公网ip下如何进行部署？需要自行组网吗？</p></blockquote><p>A：这里是一个大家都会遇到的问题，一般来说，IOT设备都是客户内网的，不可能给你在防火墙上打洞，我们现在是自己开发了一套系统，只用来偶尔维护边缘设备的后台，类似ssh反向代理就可以实现。</p><blockquote><p>Q：容器运行时的查看的资源怎么跟宿主技做区分，比如我在运行的容器里面，free -h看到的是宿主技的，怎么做饭只能看到容器本身的呢？</p></blockquote><p>A：是否对容器做了资源限制。</p><blockquote><p>Q：边缘设备是怎么被监控的，有的什么方案呢？是否也有监控的实时界面？？</p></blockquote><p>A：我们可以考虑采取prometheus pushgateway的形式来在边缘内网部署监控代理，然后再介入到统一的监控平台。</p><blockquote><p>Q：内网环境(可通过代理上网)，需要为containerd配制代理吗？还是containerd可以识别主机的代理配制？如果需要配制的话应该如何配制？</p></blockquote><p>A：如果是全局代理的话，应该是支持的。</p><blockquote><p>Q：k3s跟k8s的迭代关系是什么，每发布新版k8s，k3s都要修剪出相应的版本，还是增量开发？用k3s需不需要定期升级？</p></blockquote><p>A：我们一直在持续关注相关release notes，当有重大新特性和安全问题、功能Bug修复时我们会考虑升级版本。</p><blockquote><p>Q：Kubeedge提供的设备管理能力，K3s是否有相应的计划？</p></blockquote><p>A：已经有了相应的计划，明年会在k3s的辅助产品中体现。不过，我们会更专注核心引擎k3s的迭代。</p><blockquote><p>Q：Dind 中创建出来的容器 MTU 不正常，什么原因导致的？</p></blockquote><p>A：Dind不是本次分享的讨论范畴。dind内部的docker也是可以指定mtu的，都是灵活的配置。</p><blockquote><p>Q：请问一个问题，单机版K3S，容器内访问本机的一个服务端口，无法访问。这个端口是我服务器上一个加密狗端口，程序需要从容器中调用这个加密狗。补充一下，我加密狗调用包含tcp和UDP</p></blockquote><p>A：没有在社区中收到过类似反馈，这里不适合讨论这种很细节技术的问题，建议您提一个issue到<a href="https://github.com/rancher/k3s" target="_blank" rel="noopener">k3s</a>，我们在comment中讨论。</p><blockquote><p>Q：我尝试给containerd配了代理，单独安装的containerd可以拉镜像，但是k3s内嵌的containerd确一直没法拉镜像。这个需要怎么解决</p></blockquote><p>A：不确定你在k3s的containerd中如何配置的，k3s的containerd中的配置文件会被重置，你需要以模版方式配置<a href="https://rancher.com/docs/k3s/latest/en/configuration/#containerd-and-docker" target="_blank" rel="noopener">containerd-and-docker</a>。详细问题可以提issue到k3s来讨论。</p><blockquote><p>Q：centos在边缘设备小内存设备上能装吗？也是有内存限制的吧，最小支持多少？</p></blockquote><p>A：官方给出的内存需求是512MB，据我观察，在没有部署很多应用的情况下，内存占用一般在200多MB，占用的内存会随着部署的应用增加而增加，但是一般边缘用的工控机内存最大一般8GB，而且边缘不宜过重。</p><blockquote><p>Q： 边缘设备上做 k3s ，岂不是增加运维人员工作量吗？本来是个简单应用，变成系统了！</p></blockquote><p>A：因为边缘设备分散、网络情况不好，要统一管理和运维的话，是有难度的，后期的应用维护更新、配置变更、升级等等都是需要考虑的。如果采用传统的部署形式，虽然可以采用类似Ansible这样的自动化工具来做，但是要考虑到网络不稳定，部分设备离线情形的运维工作。所以采用类似k3s这样的统一管理平台是比较好的方案，在实践过程中发现，工作量下降了很多。如果不使用，你需要自己去watch你的应用的运行情况。自己去做类似supervisord这样的守护等等。</p><blockquote><p>Q： 边缘设备及应用，监控用的是什么方案</p></blockquote><p>A：采用在节点上部署prometheus exporter, 然后再部署一个pushgateway来做。</p><blockquote><p>Q： 最大支持多少个agent，一个server带多少agent</p></blockquote><p>A：这个没有真正的去验证过，不过我们目前的集群状态已经达到100+（1 server,剩余的全是agent)，</p><blockquote><p>Q： k3s 和 k8s 具体有多大的差别，有实例吗 ？或者数据对比。</p></blockquote><p>A：在实际的应用部署中，几乎没有任何差异，至少到目前为止，我所遇到的场景,k8s能满足的，k3s也能满足，相信，通过不断的迭代，k3s在未来会更完善边缘场景。</p><p>来自 18群 的无痕 2019-11-07 22:38:44，睡觉了拜拜！</p><h2 id="扇贝-Service-Mesh-发展历程"><a href="#扇贝-Service-Mesh-发展历程" class="headerlink" title="扇贝 Service Mesh 发展历程"></a>扇贝 Service Mesh 发展历程</h2><p><a href="https://shimo.im/docs/C9xJT8Hj66cg8Chc" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：istio 相关的ymal配置文件，比如流量百分比，在哪里配置，直接操作文件吗？</p></blockquote><p>A：你是指单纯使用 Envoy 的时候如何如何实现 Istio 里流量百分比的功能吗？这个可以通过给 endpoints 配置不同的权重来做到</p><blockquote><p>Q：这个现在是在哪里操作的是运维手工修改ymal文件？</p></blockquote><p>不是的，举个例子，你可以在 xds 服务端实现根据不同 deployment pod数量来下发新的配置</p><blockquote><p>Q：service mesh  有对mq 相关研究吗</p></blockquote><p>A：我们的 mq 没有部署在集群里，Envoy 对这块协议也没有相应的支持<br>A: istio应该暂时还不支持kafka和amqp，gRPC/websocket等可以实现异步调用。</p><blockquote><p>Q：为啥自己实现xds服务器？有现成的为啥不用？例如istio-pilot/rotor? istio-pilot可以单独使用的。</p></blockquote><p>A：其实是早期遗留问题，一开始我们用的 Istio 不稳定，后续的选择就趋于保守了。当时rotor应该还没有 release 版本</p><p>A:好吧，Rotor一年前也没有更新了，他们团队好像被twitter招安了</p><blockquote><p>Q：你们只用envoy做front-proxy吗？如果是这样，这就不叫service mesh了</p></blockquote><p>A：分享里说了哈，既有front-proxy，也有服务间的</p><blockquote><p>Q：如何保证envoy对业务性能影响最小？</p></blockquote><p>A：envoy 本身性能没什么问题，要注意的是配置的 filter这些跟外部服务交互的地方，比如 ratelimit 之类的，要配置好超时时间以及失败后的策略</p><blockquote><p>Q：被sidecar inject过的prometheus如何去scrap每个pod的metrics?服务是基于springboot的。这个研究过吗？</p></blockquote><p>A：抱歉，这个没有研究过。你是要抓取 sidecar 的数据？<br>A: 谢谢，没关系。我目前只能让prometheus直接去抓pod的metrics。sidecar的数据不用抓:)</p><blockquote><p>Q：把istio mixer里的jaeger暴露出来，给k8s外部的服务使用，这个需要考虑些什么？</p></blockquote><p>A：我们单纯的使用的 Envoy 哈</p><blockquote><p>Q：istio的配套监控体系如何，是直接用开源搭建还是自建？</p></blockquote><p>A：我们的监控是 Prometheus 那一套技术栈</p><blockquote><p>Q：你们的服务是基于gRPC还是REST/http1.1的？gRPC要求至少http2，如果需要把gRPC服务暴露给外部，对于ingress controller你有什么推荐？你们服务部署的是阿里云吗？Edge Proxy用的阿里的服务?</p></blockquote><p>A：我们对外的 rest，内部服务是 gRPC。Envoy 也是有做ingress controller 的产品的，比如Contour，不过我们没有实践过，谈不上推荐。是的，阿里云。最外面有一层阿里云的 slb<br>A: cool</p><blockquote><p>Q： 你们目前网关怎么做健康检查的？lstio，第二个问题，sidecar如何实现链路监控，自己日志文件怎么处理的？麻烦分享一下你们的监控指标和维度针对service me sh</p></blockquote><p>A：既可以让 Envoy 对 cluster 做主动健康检查，也可以在 xDS 服务端那边主动更新 envoy的 endpoints，比如依赖 pod 配置的探活指针。我们日志都是到 pod 的标准输出，然后 ELK 那一套做收集处理<br>A：日志是怎么收集的呢？链路监控目前怎么用的呢？那个技术栈</p><blockquote><p>Q：nginx+consul+consul-template这个用nginx做edge proxy?nginx这一层如何做cluster?</p></blockquote><p>A：nginx 我们是部署多台，前面还有一层阿里云的 slb对 nginx做主动健康检查</p><blockquote><p>Q：daemonset模式下，如果一个服务挂掉了例如timeout，如果实现circuit-breaker? 服务挂了。</p></blockquote><p>A：服务熔断我们最近刚开始调研，现在给不出实践经验<br>Q: 哦，那只好还是编码在代码里面</p><blockquote><p>Q：网关怎么处理健康检查的，pod日志怎么处理，统一收集吗？链路监控又是如何接入的？</p></blockquote><p>不好意思，问题重复了</p><blockquote><p>Q： istio不好用，为什么不考虑sofa mesh来代替？</p></blockquote><p>A：早期 0点几版本的时候不稳定哈。现在不是特别在意大集群性能问题的话，istio 是可用的<br>A: 实测过一下，istio sidecar injection大概平均一次增加1ms的latency，感觉不是很厉害。一般远程调用都是十毫秒以上的返回。</p><blockquote><p>Q：请问如何实现的灰度发布和蓝绿部署</p></blockquote><p>A：灰度发布也是基于配置不同 endpoints 权重这个思路来的，也可以部署不同的deployment，基于 pod 比例来做。蓝绿部署实践不多哈</p><blockquote><p>Q：  你们服务tracing和流量监控是怎么做的呢？</p></blockquote><p>A: traceing 目前还是原始的日志方式，在研究替代方案，后续有进展可以再分享一下。流量监控我们有做 pod 的进出流量统计，也有从 Envoy metrics 获取的请求统计</p><h2 id="基于CDN的边缘计算平台设计和思考"><a href="#基于CDN的边缘计算平台设计和思考" class="headerlink" title="基于CDN的边缘计算平台设计和思考"></a>基于CDN的边缘计算平台设计和思考</h2><p><a href="https://shimo.im/docs/pkxrK9PGDcVgXpkx" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：阿里的edge 有用在阿里的cdn上吗</p></blockquote><p>A：目前我们以及有对外的产品ENS，形态上就是在CDN节点售卖虚拟机。另外我们在做的另一见事情，就是把CDN业务迁移到容器里面，这样到目的就是最大化释放CDN的资源和能力。</p><blockquote><p>Q：能否介绍一下，目前cdn节点改造成边缘计算节点，主要涉及哪些方面改造，阿里的实践情况，谢谢。</p></blockquote><p>A：目前CDN改造有3个部分：基础设施到改造（交换机、机型)，软件层面的改造（容器化)，CDN节点架构的改造（比如把传统的7层负载均衡改成K8S的Ingress Controller)</p><blockquote><p>Q：目前在边缘的ENS节点，有提供GPU，物理机等产品吗？</p></blockquote><p>A：ENS能力上是对齐阿里云ECS的，目前提供CPU和GPU，神龙裸金属如果有需要也是可以支持的。</p><blockquote><p>Q：CDN场景的落地场景来说，形态上就是在云中心部署Kuberentes Master，将云中心所在Region附近的CDN节点接入到Kubrentes中 ，指的是在各个Region 里面的节点当作k8的node 处理吗 ？</p></blockquote><p>A：比如我们在阿里云中心的杭州Region创建一个K8S Master，然后会把杭州整个省的CDN节点，全部接入到这个K8S Master里面，CDN节点指的是一个机房，一个机房会有1～100台机器，整个CDN节点的机器都会接入。</p><blockquote><p>Q：请问阿里边缘计算有和5g结合的计划吗?具体有哪些结合点?</p></blockquote><p>A：在今年云栖大会上，我们以及发布了5G边缘计算战略，这个可以网上找下视频回放。具体的结合点目前来看是城市大脑和城市云。不过因为5G还未大规模商用，所以我们也在探索。<br><a href="https://yunqi.youku.com/2019/hangzhou/review?spm=a2c4e.11165380.1395223.1" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：请问未来docker会向安全容器转型嘛？安全容器是趋势,作为开发者要注意哪些点？</p></blockquote><p>A：其实kata和普通runc容器，在行为上没有太大差别，如果非要说关注点的话，目前我觉得是内核部分，因为kata容器对于内核要求是比较高的，稳定性方面还需要打磨。</p><blockquote><p>Q：目前阿里有没有什么比较成熟的或者已经在计划中的边缘计算相关项目？公司内部对于边缘计算的支持程度是怎么样的?（落点很多，结合5g等新形式，相对感觉视频分析等传统cv方面可能应用性更强一点</p></blockquote><p>A：ENS就是我们成熟的对外产品，我们对于边缘计算的投入也是不惜代价的。具体场景我们现在也在跟我们的客户、运营商都有广泛合作。只要有需求或者合作意向都可以找我沟通。</p><blockquote><p>Q：在云上部署k8s master节点，cdn节点作为边缘节点。对k8s来说，节点之前的网络通讯要求会比较高，那当网络不稳定时，边缘节点和master节点断开，这时如何实现边缘节点上的服务自治呢？</p></blockquote><p>A：这个就是ACK@Edge解决的问题了，ACK@Edge在边缘测机器上部署了一个Edgehub的组件，kubelet并不是直接请求kube-apiserver，而是通过edgehub然后再请求到APIServer。edgehub做了缓存和代理的能力，即使在断网的情况下，也能保障边缘节点的kubelet正常工作。这个能力叫做边缘自治，是ACK加强的能力。</p><blockquote><p>Q：请谈谈阿里看到的边缘计算cover的真实价值场景或者客户群，感觉很多现有场景中心计算也能满足，不一定要用边缘计算。特别是边缘计算节点也卖虚机，价值不大。谢谢。</p></blockquote><p>A：以cdn为例，cdn就是通过边缘做加速来提高用户体验。虚拟只是一种形态，比如你购买虚拟机自建cdn。所以边缘的场景肯定是跟中心不一样，比如城市大脑，就是需要在就近有个节点可以做接入，如果全部回中心，对中心的压力也很大。</p><blockquote><p>Q：阿里在边缘存储上有什么计划吗，能介绍一下是否有业务会需要把大量数据存储在边缘？</p></blockquote><p>A：ENS节点的虚拟机提供云盘的，但是并不建议把大量存储放在 边缘。因为边缘的存储冗余并没有中心那么高，就像我说的，目前不建议在边缘部署对数据可靠性要求非常高的业务。</p><blockquote><p>Q：请问安全容器的存储性能有考虑过么？接入点在边缘还是放云端？</p></blockquote><p>A：安全容器最终是跑着边缘上的，安全容器的存储目前是一个大的问题，kata开源的存储方案性能并不好。阿里云的内核团队做了大量的优化，目前应该有了比较大的性能改进。</p><blockquote><p>Q：请问ACK@Edge是开源的吗？</p></blockquote><p>A：ACK@Edge是阿里云上的产品，目前已经在公测中，可以直接在阿里云官网开通使用。</p><blockquote><p>Q： 容器安全方面有什么需要注意的？除了kata之外，使用dockerd 与k8s有什么安全建议psp之类的？</p></blockquote><p>A：安全容器的使用，第一K8S需要做适配runtimeClass，第二内核也要求比较高（应该是要4.*内核比较文档)<br>安全建议：就是加证书、改端口，不然容易被外部注入容器。其他的安全建议：就是直接使用云上产品，云上产品具备了比较高的安全能力。</p><blockquote><p>Q：  接Q8问题，如果云上master和边缘节点网络恢复了，但master节点上的pod的状态和边缘节点上的服务的状态不一致（断开时间长后，云上pod的状态通常是terminating状态，而边缘节点上的服务仍能正常工作)，这时候如何解决呢？网络恢复后，会将边缘节点的服务重启吗？比如pod重建？</p></blockquote><p>A：网络恢复后，就是继续往K8S设置的终态变化了，比如中心把Pod删了，那么网络恢复后自然相应的Pod就会被删除。因为有edghub的存在，pod是不会处于terminating状态的。不过具体细节可以仔细ACK的同学，场景和需求可能不大一样。</p><blockquote><p>Q：CDN的流量分配是在哪里做的？是DNS还是GSLB那种?异地灾备也可以用同样的方式?</p></blockquote><p>A：CDN的流量分配就有DNS、HTTPDNS、302调度，CDN 本身就是成熟的技术了，调度这块都是非常成熟的技术。</p><blockquote><p>Q： 想问edge节点的升级问题？比如有了重大CVE 或者 0day？或者和master版本差太多？</p></blockquote><p>A：升级的话，我们目标保持跟ACK中心同步的节奏。主要根据ACK提供的信息。<br>q18请问您那块容器主要跑在虚拟机还是物理机上？<br>都有</p><h2 id="蔚来汽车的Kubernetes实践"><a href="#蔚来汽车的Kubernetes实践" class="headerlink" title="蔚来汽车的Kubernetes实践"></a>蔚来汽车的Kubernetes实践</h2><p><a href="https://shimo.im/docs/DRgJKGJdvV9cXDKD" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：请问Kubernetes数据备份与恢复，这个是包括kubectl-proxy，etcd，网络配置等吗？如果进行多集群下的数据备份？</p></blockquote><p>A：备份的其实就是etcd中的数据，我们网络是用的flannel，一些关键网段信息也是存在etcd中的，对于多集群来看的话，还是要针对数据存放对应的etcd集群数据去进行备份</p><blockquote><p>Q：请问一下业务日志太多，一天一个节点的业务日志有200G，怎么做日志收集及监控告警。</p></blockquote><p>A：一天一个节点200G的话，这个要看你们集群节点多不多，我们上百个节点，一个节点的量大概在100G左右，线上日志量都是几十T的数据，用我分享的方案去落地应该是没问题的，ELK的整体性能还是非常不错的，filebeat现在最高的性能分配是占用500m cpu 1G内存，收集起来也是能应对的，这个根据你的量再调整，监控的话肯定就用prometheus就好，官方都是有自动发现的配置，很便利，当然如果你要对日志进行分析，这块就比较复杂了，可以通过es接口去聚合数据，当然日志的字段也要规范好。</p><blockquote><p>Q：生产环境 k8s 采用二进制方式搭建还是 kubeadm ，还是其他方案？</p></blockquote><p>A：线上采用的是二进制的方法，因为我们上k8s的时候 kubeadm还是测试版本，当然现在高版本的kubeadm应该已经是正式版本，但是觉得还是二进制更方便一些，你改配置，以及自定义一些参数会方便一些。</p><blockquote><p>Q：生产环境k8s都用哪种网络模式</p></blockquote><p>A：我们用的是flannel，不过后续会考虑打算换成calico，现在发现线上有一定网络限制的需求，calico的性能相对也会更好，但是维护的复杂度比较高，在集群节点多的情况下，要添加路由反射器，这个比较关键，而且网络选型前一定对未来的规模有个规划，规划好使用的网段。</p><blockquote><p>Q：请问生产环境中etcd的数据需要备份吗？怎么备份？还有二进制安装etcd集群由3个节点增加到5个节点，需要重新生e成证书后再重启etcd服务吗？增加节点重启策略是一个一个节点依次重启吗</p></blockquote><p>A：建议备份，其实主要用到的就是etcd的snapshot功能，不复杂，看下我分享的脚本即可，扩容的话需要修改server端证书对应的host，逐台重启没有问题的，官方的方法也是要一台一台执行的，线上etcd节点我做过测试，即使操作失误都down掉的话也不会影响你现有服务的运行，而且保证法定节点的存在就更好。</p><blockquote><p>Q：你分享的prometheus是operator方式吗？你的监控数据是有经过二次开发后作为标准格式输出吗？对于nginx和java监控如何实现呀？</p></blockquote><p>A：prometheus没有用operator的方式，是用的官方的yaml文件创建的，我们线上java服务居多，都是通过spring官方的prometheus插件就可以自定义监控数据，nginx的话我们还真的不多，这个估计你要用相应的exporter就好，监控数据是开发自定义上传的，我们没有做限制。</p><blockquote><p>Q：pod挂掉之后如何保留现场，比如做内存dump有什么好的方案没？</p></blockquote><p>A：我们这边是这样，对于健康检查没有添加liveness的检查，也是防止容器的重启，尤其是在第一次项目上线，难免无法正常启动，如果加了liveness就会一直，重启，不太方便查问题，所以只加了readiness,只是保证不影响线上访问，对于生产中，java项目遇到最多的就是OOM问题，这个我们也对POD重启的原因加了报警，至于dump我们还没这方面的操作，需要开发自行检查了。</p><blockquote><p>Q：传统系统架构如何改造成k8s架构？</p></blockquote><p>A：这个问题有点宽泛呢，还是得看您这边实际的场景，我觉得更多的也是得需要开发一起的配合，尽量保证服务模块都能够做到微服务话，不要耦合的太紧，您可以先搭建一个测试集群，然后从开发那边找一个模块进行docker化的转换，然后一点一点再去试吧。</p><blockquote><p>Q：是否有ingress tcp/udp应用的生产级网络方案？</p></blockquote><p>A：我们没有用ingress，我们的用法也算是一种比较简单的用法，我们是把网关直接加入到k8s集群中，这样网关就可以调用到k8s的service，因为我们以网关为中心，做了一些安全及认证功能，所以之前的网关必须要用到，而且加了ingress相当于多加了一层性能消耗，所以也没有用，最后我们把之前部署在虚拟机上的网关也变成docker化去部署到集群内部。</p><blockquote><p>Q：传统数据库负载过高时查询缓慢，但是会有结果，k8s架构数据库负载过高直接pod重启，导致没有结果返回，请问应该如何处理的。</p></blockquote><p>A：我们集群还没有跑数据库这种有状态的服务，但是听您描述，还是得看看pod重启的具体原因，如果pod都重启了，理论上跑在机器上一定也会有问题，还是在上云之前做好充分的性能压测，并且您可以考虑取消liveness的健康检查，只保留readness访问的检查。</p><blockquote><p>Q：采集日志过程中，fluentd或fluent bit通过读取node节点docker log目录采集日志，该目录包含了所有服务的日志。请问如何在output阶段中根据namespace和container_name创建elasticsearch的index，并作为index的命名前缀？</p></blockquote><p>A：首先不建议通过docker目录的方式采集，日志还是落盘到具体路径为好，因为我也碰到过您这个困惑，因为docker的目录都是软链接，而且当docker 重启后路径会改变，当然我们线上用的是filebeat采集，不知道fluentd能不能解决这个问题，由于是软链接，很难用相对路径，必须用绝对路径采集到真正存放的那个目录日志，我们对于es index名称的创建是通过日志提供的一个index名称字段去匹配的，索引名称会引用这个变量进行区分不同的index。</p><blockquote><p>Q：fileneat node模式采集，多个相同pod在同一节点情况下，如何映射日志目录耳不互相干扰，另外如何配置filebeat做到pod变动时的采集</p></blockquote><p>A：您这个情况我们也遇到过，多个pod跑在同一个节点确实存在这个问题，因为你的deploy yaml是定死的，很难处理这种情况，我们的解决方法是添加pod的亲和性，保证每个节点都尽量只跑一个pod，当然如果节点非常小的情况下，这种做法有一定问题，以生产使用上来看，我们最初多个pod跑在一个节点同时写一个文件的话也是还可接受。</p><blockquote><p>Q：持续集成系统具体的细节可以透露下吗？基于gitlab ci，jekins？或者小公司可以直接用Spinnaker 这些吗？</p></blockquote><p>A：ci cd的话因为我们有自己现有的发布平台，背后的原理实际上还是调用jenkins去处理</p><blockquote><p>Q：日志收集的sidectar模式具体是咋部署的。filebeat和应用部署在一个pod里吗</p></blockquote><p>A：对的，部署在一个pod里，相当于你的deploy yaml里会有两个image配置，一个是你的服务，另一个是filebeat，具体的配置看下我的截图，把这部分配置放到你的服务配置后面即可，但是就像我分享说的，这种方式可能会比较消耗资源，但是确实自定义比较方便，但也增加了yaml配置</p><blockquote><p>Q：我司测试环境搭建的Harbor版本是1.5，使用docker-compose来按照Harbor各个组件的依赖顺序来启动的，但是当系统或者docker重启后，Harbor的容器就无法按照依赖顺序来启动，经常会有容器启动失败。请问下这个该如何优化呢？</p></blockquote><p>A：其实你需要在docker中注意一个参数，live-restore : true，这个参数很有用，你可能没有添加，这个参数能保证在你维护重启docker的时候，还能保证不影响正在运行的docker 容器，另外你可以对harbor进行监控，如果down了的话大不了做个自动重启的操作也不妨大碍。</p><blockquote><p>Q：（1)k8s平台上线前有什么测试？如何测试？可以上线的依据？（2)常见互联网架构的业务，需要改造才可以在k8s跑吗？需要如何改造？有什么坑？（3)你们多个业务线都共用同一套k8s？如何实现不会因为一个业务的高峰影响其他业务？（4)有什么方案可以实现最大限度的不丢日志？</p></blockquote><p>A：1.因为我不是测试，对于测试这块可能干涉的不是很多，对于运维来讲可能更多的是比较关注上线之前的压力测试，这块会跟后续的稳定性有很大关系 2. 常见的架构业务理论上改造应该不需要很大，最主要的是解决docker镜像化，遇到的坑可能更多的是对于dockerfile打镜像理解的不好，导致一些启动问题以及配置的丢失等等，3. 我们是通过namespace区分业务线，需要提前规划好业务，指定的业务线只跑在对应的机器上比较关键。 4. 我使用的ELK过程中还真的很少遇到过丢日志，只要你架构足够健壮应该是没什么问题的，另外ELK中一定要用消息队列，降低你消息传递的压力，保证每个组件都不要出现性能瓶颈，如果实在怕丢日志，可以让logstash在消费的时候把消息落盘，es也要合理配置好刷新的频率以及内存多大落盘等参数，提前做好各个组件的压测是保障。</p><blockquote><p>Q： 你好，我是蔚来es8车主，很高兴看到蔚来的分享。我想了解下你们存储的方案，之前听说是用的portworx，具体方案透露一下。你们这个team在北京还是上海？ 用aws的话有没有考虑直接使用aws的k8s服务？es也运行在k8s里吗？</p></blockquote><p>A: 您好，我们team在北京，因为我们的集群还未上有状态服务，所以暂时还未考虑分布式存储的问题，这块确实是很重要的一个环节，我们线上的服务基本也是通过S3去存储一些数据使用，portworx这个好像也出了很久了，当时在还没有k8s的时候调研过，不过想大面积使用貌似是要花钱用商业版，建议还是用现在比较流行的ceph可能会更好一些吧，我们还未用到aws自己的k8s服务，es有运行在k8s里的业务，但是不是通过operator部署，后端数据也没用到分布式存储，由于量不大，只是落在本地了，后期会进一步调研ceph以支持后期的有状态服务的迁移。</p><blockquote><p>Q： 请问是否考虑过 fluent-bit ，目前 filebeat 有没有性能上的问题呢？</p></blockquote><p>A: 因为在虚拟机的时候我们就用的filebeat，就沿用下去了，filebeat暂时还未发现性能问题，可以直接使用，总日志量我们应该有几十T的样子，在生产使用的过程中感觉filebeat还是比较靠谱的。</p><blockquote><p>Q：k8s一年的证书问题，你们怎么解决的呢？</p></blockquote><p>A: k8s的证书我们的时间都设置的是十年，kubelet可能是一年，这个我们最初疏忽了，碰到过一次，最终通过删除现有的配置，让kubelet重启自动生成，当然如果您是最初规划的话，可以加上证书自动到期认证的功能，据了解好像现在高版本的k8s已经不存在这个问题，我还没了解的那么多，您可以再查查</p><blockquote><p>Q：k8s生产环境上的安全相关的配置有哪些呢？</p></blockquote><p>A: 安全的话这个比较宽泛啊，这个还是要从各个方面完善，首先起码要保证流量流入方向的各个环节的安全限制，以及服务接口调用上的安全认证，以及开发人员使用时候的权限控制等等。</p><blockquote><p>Q：prometheus自定义监控具体怎么搞得，比如想要监控容器的端口连接数?</p></blockquote><p>A：容器端口的连接数监控确实还未添加，在原来宿主机的时候是有的，这块有些忽略了，加的话也不是很费劲，可以通过你们自己自定义的exporter去监控。</p><blockquote><p>Q：落盘的日志怎么定期清理</p></blockquote><p>A: 落盘的日志通过写好的清理任务进行清理，因为我们的日志都是规范的落到统一的目录，并且目录名称也是很规范的，所以清理起来很方便，写个简单的脚本就可以啦，定时清理就OK</p><blockquote><p>Q：k8s里java服务，你们是怎么做资源限制的？</p></blockquote><p>A: 我们是在yaml注入了能获取设置资源的env参数，然后在ci打镜像的时候统一规范了服务启动的start脚本，jvm里配置的是k8s配置的资源，所以java服务的使用也不会超过我们分配资源的使用。</p><blockquote><p>Q：想了解下你们日志收集 你们的服务数也就是日志数大概多少？每个k8s节点分配到的pod大概多少 因为是daemonset部署想了解一下filebeat的配置文件是怎么管理的？  后端日志分析完全靠es么？日志有没有入hadoop的需求？有MR或spark</p></blockquote><p>A： 我们一天的日志量最多能达到近10T的数据，当然这不全是k8s这边的日志，1个节点最多的话大概能跑到30多个pod，filebeat我们是走的统一的一份配置，因为日志都是json规范好字段传输，也无需做过多处理，因为日志分析主要不在这个场景做，我们这个场景只是提供开发看日志，当然其中一些网关数据我们会做报警和具体的图示，需要分析的大数据专门走我们的hadoop集群，我们这边有用到MR 和 spark，但是大数据相关的东西都没有在K8S上面。</p><h2 id="基于-Ceph-的-Kubernetes-数据持久化"><a href="#基于-Ceph-的-Kubernetes-数据持久化" class="headerlink" title="基于 Ceph 的 Kubernetes 数据持久化"></a>基于 Ceph 的 Kubernetes 数据持久化</h2><p><a href="https://shimo.im/docs/Px6xTrqGdDCJp8hW" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：k8s 里面使用 ceph，假设 ceph 出问题。这样会导致节点 hang 住吗？导致集群不可用情况。如果会，那该如何避免。谢谢。</p></blockquote><p>A: 并不会，因为Ceph 本身是分布式高可用的，而且即使Ceph节点全挂， 也仅仅会影响使用Ceph 的Pod，而不是节点。</p><blockquote><p>Q：ceph是通过k8s部署还是原生部署。ceph和k8s节点超融合吗，还是分开。</p></blockquote><p>A：一般生产环境中都是独立部署的，3 或 5 Monitor， 3 ～ 60+ OSD 等规模。</p><blockquote><p>Q：K8S中如果使用RBD作为数据库的存储，如果库比较大的情况下，对于数据日常的备份和维护是怎么做的？</p></blockquote><p>A：可以利用快照，快速备份和恢复。在去年的KubeCon 上，华为和谷歌的小姐姐们演示过。<br>ceph与glusterfs的优缺点</p><blockquote><p>Q：在K8S中对于需要共享的存储，使用CephFS需要注意什么，会不会存在一些坑？</p></blockquote><p>A：目前存在一种说法，就是CephFS不稳定，不推荐使用。具体如何不稳定、如何触发、怎么避免就很少有人知道了，另外还有，如果CephFS不稳定，那么我们还有其它哪些替代品呢？</p><blockquote><p>Q：学习ceph有什么比较好的方式？以及如何比较有效率的实践？</p></blockquote><p>A：快速阅读一下官方文档，然后自己安装一套，再结合文档深入研究。模仿需求场景测试使用。多实践。</p><blockquote><p>Q：K8S对外暴露服务用的是那种方式呢？ 如果在一个集群里面跑不同的业务，在对他们做对外的域名解析，访问控制是怎样实现的，会不会存在一些性能问题或端口的冲突？</p></blockquote><p>A: 一般比较常见的就是单节点访问的NodePort, 配置高可用模式的Ingress等等。<br>由于每个Pod/Service端口都是独立的，所以并不用担心会跟其它冲突。除非使用了NodePort且指定了端口。</p><blockquote><p>Q：rook 和 原生的Ceph 部署方式在性能和维护上是否有区别，这两种方式如何选择？</p></blockquote><p>A：抱歉， rook还没有使用过，不过相对来说，Ceph 集群维护的重点一般都在OSD。<br>在生产环境，一般也会独立部署Ceph, 毕竟即使快速的重新调度Monitor，也可能会对集群产生轻微影响。</p><blockquote><p>Q：对于小中型公司来说ceph是个好选择么？自行维护，可以从多个方面说说k8s下如何进行存储选型么？谢谢！</p></blockquote><p>A：相对可以接受，运维并不复杂。目前k8s 上存储还是以rbd比较多一些。当然也有一些NFS，不过因为其性能与稳定性，所以不推荐使用。</p><blockquote><p>Q：如果使用BlueStore的方式，osd磁盘文件的划分是怎样的，比如WAL, DB这种文件是单独存放在SSD盘中吗，还是都存储在SAS盘中?</p></blockquote><p>A：有条件的话，且存储需求性能高的情况下，使用更高性能的SSD通常都会有更好的效果。</p><blockquote><p>Q：Ceph 中pool 数量是如何设定的，如果对集群进行扩容，PG的数量是否需要调整，调整的时候需注意什么？ 网络方面怎么去规划比较合理，谢谢</p></blockquote><p>A：目前PG的限制多一些，因为Pool里面PG是存在一定数量的，而PG数量又跟硬盘数量挂钩，所以调整时需要计算Pool的数量与OSD数量。<br>网络方面的话，在生产环境，推荐使用至少10Gbps网络，双网卡以便分离业务和集群网络，提升性能。</p><blockquote><p>Q：1.osd 是否需要做阵列？20台物理机，单台物理机1个OSD阵列还是单台物理机8个OSD裸盘？2.当大量osd出现slow ops如何处理？3.纠删码和三副本，应该如何选择</p></blockquote><p>A:磁盘数量较少时，不推荐RAID，建议由Ceph直接管理磁盘，通过并行获取更好性能。另外PG的数量计算方式也跟OSD数量有关，所以需要综合考虑。<br>这个可能需要结合监控系统，及时发现异常情况，是设备还是服务或者节点呀网络原因等等判断处理。<br>可以结合业务场景需求与集群规模和硬件配置等情况来综合考虑决定采用哪种方式。</p><blockquote><p>Q：rbd分配给具体应用比如挂载到mysql后，如果空间不足，该如何扩容？谢谢</p></blockquote><p>A：目前支持在线动态扩容。</p><blockquote><p>Q：分布式存储应用于hdfs是否可行，相对于本地存储，分布式存储的读写性能如何提高，另外ceph的bluestore效果怎么样呢？</p></blockquote><p>这个不太合适，因为HDFS本身自己就是做分布式的文件系统，且业务场景也不相同。<br>Ceph 的性能提升无外乎两个方面：更快的磁盘/SSD 和 更大带宽的网络。<br>由于直接管理了硬盘，所以其性能还是很好的。</p><blockquote><p>Q：块存储模式下，磁盘在宿主机上的数据是加密的，如果要在容器外部操作这部分持久化的数据，需要怎么操作呢？</p></blockquote><p>可以挂载操作。</p><blockquote><p>Q：ceph图形管理界面需安装什么软件？</p></blockquote><p>A: 现在不需要额外安装软件了，已经内置。</p><blockquote><p>Q：请问怎样在k8s中，实现多个容器共享一个ceph文件系统，共享文件存储建议用哪种方式？</p></blockquote><p>A: 这种需求就需要用 cephfs了。<br>共享文件存储的话，看最终客户场景，如果是给Windows等客户端使用的共享，那么可以通过ISCSI来挂载RBD到Windows共享服务器。</p><blockquote><p>Q： Cephfs 之前在海量小文件读写测试时性能非常差，性能问题目前有没有解决？</p></blockquote><p>A：性能需要靠硬件去堆。</p><blockquote><p>Q： Ceph最大支持多大的存储容量不影响性能，与分布式存储HDFS的区别有哪些？pgp和pg什么关系</p></blockquote><p>官方号称是PB级的。HDFS适合大文件，上白G的那种单个文件。<br>PG 是指定存储池存储对象的目录有多少个，PGP 是存储池 PG 的 OSD 分布组合个数。</p><blockquote><p>Q： kubernes 中现在的块存储是一个部署绑定一个块，能否做成一个pod绑定一个块，有过这方便的实践吗？可否分享一下。</p></blockquote><p>使用 StatefulSet即可，会自动创建和绑定PVC。</p><blockquote><p>Q： 目前业界ceph集群的最大规模能达到多少个节点（大致的数量级)？是怎样的一种应用场景？</p></blockquote><p>目前最大的不太清楚，不少大公司可能不会公布。存储日志、备份数据等等。</p><h2 id="小公司如何优雅地推进应用上Kubernetes容器云"><a href="#小公司如何优雅地推进应用上Kubernetes容器云" class="headerlink" title="小公司如何优雅地推进应用上Kubernetes容器云"></a>小公司如何优雅地推进应用上Kubernetes容器云</h2><p><a href="https://shimo.im/docs/wrhTKPcqcp3htR6h" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：有状态springcloud 微服务如何进行管理和版本控制的？</p></blockquote><p>A：微服务尽量做到无状态好。</p><blockquote><p>Q：如何开发微服务应用operator?</p></blockquote><p>A:这个我看了三次，不太懂想问的问题是啥，我理解微服务应用与operatorr貌似没有什么必然的联系。</p><blockquote><p>Q：Grafana相比Zabbix有哪些优势和不足呢？</p></blockquote><p>A：这两者是互补的，应该是问普罗米修斯吧。</p><blockquote><p>Q：helm如何落地？是否有方案开发替代的系统完成版本管理功能？</p></blockquote><p>A：暂时没有使用helm，公司使用版本管理是通过调用官方API接口来实现更新、回滚、重启等操作。</p><p>Q5你们部署k8s应用  是有用到通用的yaml模板结合helm使用嘛 ？<br>A：是的，使用通用的yaml模板，但是并没有使用helm。首先再运维平台网页上配置相关参数，发布时候传入变量值，例如启动参数、镜像地址、等生成yaml配置，然后通过API方式调用来实现部署应用。</p><blockquote><p>Q：promethues server 后端存储tsdb高可用有做么 promethues server起了多个么 ？有遇到过server会偶尔挂掉么</p></blockquote><p>A：没有做高可用，server端主动挂情况并没有出现，检查下日志看看是否有报错。</p><blockquote><p>Q：请问从虚拟机正式环境迁移到k8s正式环境，需要做些什么准备，迁移过程会不会中断业务，数据库如何切换</p></blockquote><p>A：不需要中断任务，应用部署后验证没有问题才切换负载，数据库其实不需要做啥操作，除非你是问数据库上容器的话，数据库这块暂时还没有迁移上去。</p><blockquote><p>Q：前端和后端是不是改造完全分离的，有没有耦合在一起的项目，这些项目能用ingress吗</p></blockquote><p>A：大部分项目前后端分离，耦合一起的也能用，关键如何做好转发，现在逻辑上是SLB–&gt;负载层–&gt;ingress-&gt;-service–&gt;pod</p><blockquote><p>Q：开发环境中需要提供给开发使用的一些有状态的公共服务，在k8s，网络部分如何处理，如注册在zookeeper的服务等等？</p></blockquote><p>A：容器外访问容器内采取路由跳转，暂时通过node节点网络转发，这块后继需要优化。容器内访问容器外的，可以基于内网DNS配置公共服务地址即可。</p><blockquote><p>Q：生产部署二进制还是kubeadm？</p></blockquote><p>A：开发、测试、预发布、生产环境都是使用二进制安装，主要基于ansible剧本安装，只需要修改部分地址变量（例如vip、etcd地址等)即可</p><blockquote><p>Q：自建的k8s集群，当node节点资源不足时，你们公司是如何做自动扩展node节点的？</p></blockquote><p>A：还没有实现自动扩容，暂时提供网页版扩容方案，这个也是下一步需要实现的功能之一。</p><blockquote><p>Q：老师你们公司有做蓝绿发布或金丝雀部署吗？在容器云平台上是通过什么方式去实现的？</p></blockquote><p>A：金丝雀部署功能已提供，容器这块暂时还没有开放出去，跑在原来服务器的已开发，不过公司有点特殊，金丝雀暂时只开放给测试人员测试使用。、方式以下两种：<br>a、不同的入口，测试人员可以通过切换hosts。<br>b、浏览器设置header参数即可，负载层会判断来源实现不同转发。</p><blockquote><p>Q：平时这么多微服务的yml文件是如何管理的？通过什么方式编辑和修改</p></blockquote><p>A：文件其实是不存在的，是直接脚本生成yaml数据，通过api调用，python脚本会写好基本变量，只需要传值即可，脚本截取部分你应该能看明白。</p><p><img src="https://uploader.shimo.im/f/eRzQkIIdx4AdvY0U.png" alt="-"></p><blockquote><p>Q：听说你们汇桔网大裁员啊！还有几个运维？？</p></blockquote><p>A： 现在运维1个</p><blockquote><p>Q：一个微服务yml文件是deployment和svc配置一起，还是分开的2个文件？</p></blockquote><p>A：文件其实是不存在的，是直接脚本生成yaml数据，通过api调用。</p><blockquote><p>Q：etcd看到v2的数据和v3的数据备份方式不一样。如何一起备份？是直接拷贝任意节点的数据文件备份就行了么？</p></blockquote><p>A：备份需要了解网络和pod数据存放在v2还是v3，明白了就可以确定那些需要备份了，容器的IP对业务应该来说是不影响的，也就是说网络地址变更后，业务还是可以正常运行。</p><blockquote><p>Q： 网络用的canal还是flannel？有测试过性能么。能否满足需求？</p></blockquote><p>A：网络使用flannel，测试过暂时满足性能需要，后继这块有考虑替换其他，但短时间先不动为主。</p><blockquote><p>Q：  有让开发人员看监控么？比如说资源使用情况？</p></blockquote><p>A： 监控平台是会开放出去的，开发人员能看到对应的pod使用情况。</p><blockquote><p>Q： 请问，我们是java项目，在业务代码打成war包后，war包很大的情况下，在发布流程中，如何完成pod中的容器的代码更新，是采用挂载代码后重启容器方式，还是采用每次重新构建代码镜像，直接更新容器，或者有什么更好的建议吗</p></blockquote><p>A：配置分离（上配置中心)，参数通过启动鉴权下载配置文件启动，这样子环境的更新只需要基于通过一个包即可。</p><blockquote><p>Q：请问，那个管理告警并发送告警监控平台是怎么设计和实现的？</p></blockquote><p>A：告警发送到监控平台不难，监控平台提供接口，数据过来做过滤存库处理，监控平台通过调用微信企业通讯录，绑定工号，发送也是调用api接口，并没有其他，只是简单做了合并收敛，5分钟内非级别为高的，统一合并发送。</p><blockquote><p>Q：有没有使用volume，集成分布式存储场景？</p></blockquote><p>A：volume这块后面会上分布式，暂时文件上传暂时上传到oss上。</p><blockquote><p>Q：持续化存储推荐用的是什么，ceph可以吗，这个数据做过持久化后，怎么做高可用</p></blockquote><blockquote><p>Q：redis有跑在k8s上么？主从或者集群有在k8s有跑么？传统的主从跑到k8s上需要做redis主从么？</p></blockquote><blockquote><p>Q：  K8S PYTHON client  的对象如何转json的？自己实现decoder？</p></blockquote><h2 id="Prometheus架构与实践分享"><a href="#Prometheus架构与实践分享" class="headerlink" title="Prometheus架构与实践分享"></a>Prometheus架构与实践分享</h2><p><a href="https://shimo.im/docs/HPdrhHpP3DVk9wDk" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：您好，我们prometheus监控系统需要持久化监控数据，目前约存储了1.8T数据，严重影响了查询速度，gafana基本无法刷新数据了，请问有优雅的解决办法吗？</p></blockquote><p>A：1.8T都是保存在本地吗？SSD有一定的加速作用。如果数据量比较大建议使用m3db、clickhouse、opentsdb等。</p><blockquote><p>Q：如何登录prometheus数据库?</p></blockquote><p>A：prometheus本地tsdb没有登录入口，只有go的api。</p><blockquote><p>Q：企业级的promtheus监控的数据存储是基于什么呢？ES吗，还是其他的存储？</p></blockquote><p>A：我们使用m3db，集群版本的influxdb、opentsdb等都支持</p><blockquote><p>Q：现在有高可用方案吗？</p></blockquote><p>A：prometheus的联邦或者Improbable开源的Thanos都是高可用方案</p><blockquote><p>Q：promethues占用内存很好，我们的环境下45w指标大概要占用8G左右的内存，经常出现prometheus容器OOM，请注意有什么办法可以优化内存占用吗？</p></blockquote><p>A：数据指标如果确实比较大可以考虑prometheus的hash采集，分摊压力。在生产过程中很多指标都是可以省去的，譬如kubernetes中的sandbox容器的指标。</p><blockquote><p>Q：面对海量微服务，好上千个k8s节点，日钧上千上万亿的时序点数据，如何解决prometheus高可用，如何选择和解决远程存储问题？宜信目前有多大规模？有多少指标，一天大概有多少量数据</p></blockquote><p>A：目前宜信的容器大约4000左右，规模还并不大，很多服务都还部署在虚拟机里面。每天的监控数据量不到100G。历史数据通过M3db存储。</p><blockquote><p>Q：选择普通远程存储，面对持久化数据相对prometheus本地数据几十倍放大的问题如何解决，如何处理日TB级海量存储，后期如何取出数据进行分析？</p></blockquote><p>A：prometheus设计的初衷并非解决大容量存储。如果是TB数据建议保存到远端的opentsdb中。</p><blockquote><p>Q：目前prometheus能否支持对网络设备的监控，如何支持采用snmp  ssh 等协议方式的监控；能否实现与Zibbix的对接？</p></blockquote><p>A：prometheus有snmp的exporter可以实现网络监控。目前还没听说可以对接zabbix。</p><blockquote><p>Q：目前prometheus的报警rules规则是怎么管理的？报警阀值是否可动态调整？</p></blockquote><p>A：rules也是通过yaml文件配置，可以动态调整，但需要reload配置。</p><blockquote><p>Q：Prometheus的push方式（push推送给pushgateway)和pull正常的方式方式的性能比较，谁更好呢？</p></blockquote><p>A：pushgateway本身作为数据转发的代理，本身性能损耗很少。建议直接提供prometheus的pull支持</p><blockquote><p>Q： 联邦配置时，实测抓取多个job的metrics存在延迟现像极其严重，不知道有没有好的解决办法？目前我是通过grafana直接获取两个prometheus集群作为后端数据库</p></blockquote><p>A：这个主要看延迟的原因，是下面的prometheus采集慢还是联邦节点二次汇聚的慢。具体情况后续可以一起加微信排查一下。<br>2次汇聚，本地prometheus与线上prometheus,本地配置联邦，本地汇聚线上job的metrics，当job数量多了就会出现”federation failed” err=”write tcp 192.168.243.145:9090-&gt;10.0.0.12:33508: write: broken pipe”</p><blockquote><p>Q：针对于一些公司自有业务的进程数据监控是依赖于自研 的go-clent上报吗？还是说一些三方的client？</p></blockquote><p>A：如果可以二次开发建议直接在代码里面加入prometheus采集的支持，处理go 以外还有java<br>Python的sdk支持。如果不能二次开发也可以在外部通过exporter方式。</p><blockquote><p>Q：如果有多个副本 CPU利用率 还是用container_name来算就有问题了吧？另外问一下  不同版本的pod（比如发版之后)怎么比较其CPU利用率？另外histogram的metrics有分析过吗？另外 查询一个月的数据应该蛮有压力的吧还是做了优化是否有必要？</p></blockquote><p>A：嗯，多副本需要group。不同版本数据都在prometheus存储，可以通过容器名称汇聚查询出来，一个月数据step可以调整的大一些。目前看一个月内的查询基本控制在2s以内。<br>发版之后 pod name名字是不一样的<br>一种方式是通过保持container name，另外一种方式是通过前缀，正则匹配<br>我用得后者 不过会出现很多空线条 因为前面版本不存在这个pod name标签的metrics，这个和多副本的container_name 也算是有点冲突，暂时用正则的方式 多谢<br>metric名称应该是固定的啊，你用正则匹配，不会有问题的，历史都会查出来<br>另外我发现histogram的metrics超过7天之后就没有什么参考价值了 所以对于查询一个月感觉意义不大，比如 prometheus_http_request_duration_seconds， metrics还是重在实时性</p><blockquote><p>Q：Prometheus的数据不知道宜信是否有存储，是存到opentsdb还是influxdb呢？</p></blockquote><p>A：本地+m3db</p><blockquote><p>Q：prometheus告警延时比较高，如果要做到秒级告警有什么方案！调整抓取频率不太靠谱</p></blockquote><p>A：目前告警都是在几秒，你说的延迟是多长时间？</p><blockquote><p>Q： 请问针对Prometheus 不能监控日志的瑕疵，有什么好的方案可以和Prometheus 形成互补呢？</p></blockquote><p>A:公司自研了watchdog日志采集。社区常用filebeat + es+kibana方案</p><blockquote><p>Q：宜信目前用Prometheus监控了多少个服务target了？Prometheus使用的资源大概是多少？</p></blockquote><p>A:宜信正在从zabbix迁移到prometheus，目前是三台物理机。</p><blockquote><p>Q：m3db数据存储有没有放大？相对prometheus 的tsdb，有 大概有多少倍？</p></blockquote><p>A:放大是啥意思？<br>比如一天的数据pro 的tsdb存储是多少g，通过远程存储，就会放大几十倍，比如100个变成1t</p><blockquote><p>Q：请问应用进程http接口的性能监控是怎么实现的？</p></blockquote><p>A:有java和go、Python的sdk</p><blockquote><p>Q：怎么过滤掉不需要的metrics?通过prom</p></blockquote><p>A:这个可以在pro配置里面drop</p><blockquote><p>Q：本地存储用来做查询吗？多个prometheus是如何统一查询的？数据都存在汇聚的prometheus上吗</p></blockquote><p>A:</p><blockquote><p>Q：怎么实现tsdb历史数据保存到别的地方的？通过什么技术方式分开的？</p></blockquote><p>A:remote write read</p><blockquote><p>Q：时序数据库跟传统数据库的优势在哪？应该如何进行选型？</p></blockquote><p>A:时序数据是保存随时间变化的量，查询也是时间维度，从而实现高压缩比。关系型数据有事在于数据管理。</p><blockquote><p>Q：请问m3db能不能满足ha prometheus 的数据去重？还是存两份？</p></blockquote><p>A:m3db不需要存两份</p><blockquote><p>Q：比如要做每日用户登录数统计，具体应该怎么做？需要哪些流程和步骤？</p></blockquote><p>A:需要程序里面集成sdk，并提供查询累计登录用户的http接口，并在prometheus配置这个target。</p><blockquote><p>Q： 选型的时候为什么选择m3？没考虑其他远程存储吗，是有什么考虑。远程存储你们只是用来备份一份吗还是也会一起从远程读数据？之前远程读的性能比较烂，目前prom新版本的stream远程读你们有试验吗</p></blockquote><h2 id="eBay-Kubernetes集群的存储实践"><a href="#eBay-Kubernetes集群的存储实践" class="headerlink" title="eBay Kubernetes集群的存储实践"></a>eBay Kubernetes集群的存储实践</h2><p><a href="https://shimo.im/docs/dJ6Gccp3JrdrCtrP" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：分布式数据库例如MongoDB在k8s上有实现方案吗?</p></blockquote><p>A：有的，我们内部NoSQL就是完全运行在容器云上的，pod部署由应用自己管理，通过svc暴露服务，存储上使用local PV，并实现了backup restore。社区应该也有比较多的实现参考。</p><blockquote><p>Q：由于环境，如网络因素，出现短时间暂时大规模掉node的情况怎么处理？</p></blockquote><p>A：如网络问题导致node连不通，对于网络存储来说，需要在网络恢复之后重连，比如cephfs kernel client和fuse都实现了reconnect</p><blockquote><p>Q：etcd集群中，v2和数据和v3的数据备份方式不一样，如何备份整个etcd数据呢？</p></blockquote><p>A：etcd server只能有一种版本，不会并存，所以按照各自版本的方式备份即可</p><blockquote><p>Q：PVC的anti affinity调度特性是k8s原生支持的吗？自研方案有计划贡献到k8s仓库吗？</p></blockquote><p>A：不是，我们是在使用MongoDB的过程中，发现master pod的io load很高，所以基于此自己开发了这个功能。</p><blockquote><p>Q：数据如何做容灾</p></blockquote><p>A：网络存储自己有多replica和rack awareness的分布，本地存储需要应用自己实现多拷贝，对于可靠性要求比较高的数据，需要做备份还原。</p><blockquote><p>Q：本地存储能说的更清楚点么？比如registar是怎么把信息同步到kubernetesnode中的。pv的删除是csi那个组件来做的？信息有哪些信息。谢谢。</p></blockquote><p>A：registar在注册节点的时候会将vg的相关信息以annotation的方式写到node对象中，pv的删除由csi-provisioner sidecar完成，大体思路可参考社区的design doc。</p><blockquote><p>Q：容器镜像如何存储和管理？</p></blockquote><p>A：我们目前用的是quay，用swift存储镜像层</p><blockquote><p>Q：redis集群，3主3从这种，如何跑在k8s上</p></blockquote><p>A：可以用statefulset的方式，具体可以参考社区的做法</p><blockquote><p>Q：使用ceph rbd会出现multiattach error，导致新pod一直处于creating状态，需要人工介入，有无自动处理方案？比如，kubelet挂掉</p></blockquote><p>A：如出现kubelet挂掉或者node hung导致kubelet不工作，有可能出现这种情况，需要实现节点的remediation，监控这些情况，重启或者下架节点，保证原来的连接断掉。</p><blockquote><p>Q：请问日志存储是在专有的节点吗？如果不是会和业务数据存储产生影响吗？空间占用,cpu，内存方面的影响。</p></blockquote><p>A：每个节点组件本身的日志和容器的日志都是通过beats来收集并上报到监控系统，不会和业务数据冲突或干扰。</p><blockquote><p>Q：存储限制是怎么做的？</p></blockquote><p>A：对于emptydir，我们使用xfs quota限制。对于PV/PVC，我们在controller层面做了每个namespace的quota limit。</p><blockquote><p>Q：ceph rbd和本地磁盘有做过benchmark么？cg v2应该只能限制本地盘吧？</p></blockquote><p>A：<img src="https://uploader.shimo.im/f/PLfMQZT4SOMLOKjU.png" alt="-"></p><blockquote><p>Q：kernel network storage有没有什么好的学习材料？</p></blockquote><p>A：具体是哪类存储类型，可以参见 <a href="https://www.oreilly.com/library/view/linux-device-drivers" target="_blank" rel="noopener">linux-device-drivers</a></p><blockquote><p>Q：有没有可能通过StatfulSet 实现分布式存储？来做异地容灾</p></blockquote><p>A：异地容灾是federation层面的部署，感觉和用哪类workload api没太大关系</p><blockquote><p>Q：本地存储不需要另外的scheduler-extender么？用原有的scheduler就可以了？</p></blockquote><p>A：我们是直接在原有的scheduler基础上做了修改，当时还没有extender机制，后续会考虑以extend方式放到外部</p><h2 id="基于Kubernetes的DevOps平台实战"><a href="#基于Kubernetes的DevOps平台实战" class="headerlink" title="基于Kubernetes的DevOps平台实战"></a>基于Kubernetes的DevOps平台实战</h2><p><a href="https://shimo.im/docs/vjw3P6rD8pyGJXqQ" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：请问老师是通过 Jenkinsfile 来控制版本管理吗，是否使用了 jenkins library，多个环境的情况下，是部署一个Jenkins master，还是每个K8s集群都带有一个 jenkins master？</p></blockquote><p>A：jenkinsfile实现整个CICD流程，使用git对jenkinsfile代码进行版本管理；目前没有使用jenkins library，但是jenkins library的方式正在重写过程中，还没有完成；多环境的实现是只在一个集群部署一套jenkins master+jenkins agent，不同的环境通过不同agent实现</p><blockquote><p>Q：我想知道这个分享有什么用？文字直播？</p></blockquote><p>A：这个我来答一下，感觉没用可以不看，没有强制要求。</p><blockquote><p>Q：每个jenkins的job里写一个jenkinsfile的repo？这样是不是太浪费了。每个repo就一个jenkinsfile文件（多环境可能有多个分支)。我们是直接写成了jenkinsfile模板，然后jenkins 构建参数传入的。不知道老师是如何权衡的</p></blockquote><p>A：不是的，所有job使用一个jenkiJenkinsnsfile。每个job就是传递一些基础参数，大多数配如编译命令，部署配置等，都是在devops平台先行配置好之后，触发job构建之后从devops拉取参数配置)</p><blockquote><p>Q：为什么拉取代码后就要进行Sonar代码扫描呢？研发的代码都没有集成编译验证，扫描代码有什么意义？</p></blockquote><p>A：不是拉取代码前进行的扫描，是拉取代码完成后进行的扫描。方便对接多语言。这个看取舍的，我们因为涉及语言种类比较多，不太容易顾全所有的语言，而且前期我们php语言的业务较多。</p><blockquote><p>Q：你们生产环境也关闭防火墙了吗？不用防火墙吗？还是你们用的其他的安全措施</p></blockquote><p>A：我们生产环境防火墙是关闭的，因为我们使用的是公有云环境，策略都是通过公有云安全组实现的。</p><blockquote><p>Q：同ansible集成那部分怎么实现的？中间涉及到传参数，例如IP地址，端口号，服务名称，是通过什么控制的？</p></blockquote><p>A：基础环境信息，都在inventory里维护。其他的一些参数放在一个group_vars中</p><blockquote><p>Q：node节点使用的是动态token还是apiserver内置的静态的token进行bootstrap的？</p></blockquote><p>A：动态token，不在apiserver的配置里指定token.csv</p><blockquote><p>Q：你们master节点和node节点都部署了多少台</p></blockquote><p>A：master节点3台，16c64G的。node有600台，配置种类比较多</p><blockquote><p>Q：能否提供一下你们基于pipeline的jenkinsfile示例？</p></blockquote><p>A：这个因为涉及公司隐私，不方便提供。但是后期基于jenkins library的代码完成后，会进行开源，请后续关注。</p><blockquote><p>Q：knative和istio现在未来前景咋样，国内有用到生产上去的吗？</p></blockquote><p>A：我们暂时还没有使用到生产上去，只是调研阶段</p><blockquote><p>Q：600个node calico用的反射模式还是node mesh?有做pod带宽限制么，谢谢！</p></blockquote><p>A：node-mesh，目前没有对带宽做任何限制，calico也遇到了不少坑，暂时也没精力进一步的使用功能</p><blockquote><p>Q：感谢老师分享。想请问下您们的运维团队是怎么配置的，谢谢？！</p></blockquote><p>A：我们分业务运维、系统运维、dba</p><blockquote><p>Q：Jenkinsfile 使用文档较少，可以提供在此遇到的坑列举几个典型吗？谢谢！</p></blockquote><p>A：使用的话，可以去参考有一本groovy的书。遇到的坑的话，大多数是CICD逻辑的问题，比如说，我们会有一个容器运行用户的配置，实际业务场景中有使用root的，有使用普通用户的，还会针对不同的环境适配不同的用户配置，逻辑处理出错就会导致实际部署后，pod运行异常。</p><blockquote><p>Q：请问 主机系统初始化 这一块对系统的发行版和内核版本有什么要求和建议？看到一些docker的问题是因为系统内核版本太低 （3.10 内核 kmem account 泄漏 bugs 导致节点 NotReady)，请问你们是如何选择的？</p></blockquote><p>A：目前仅支持Redhat、CentOS，内核版本是3.10,没有进行升级。以我们集群运行这么长时间看，虽然有NotReady现象，但是概率比较小，固没对考虑对内核升级</p><blockquote><p>Q： 请问下集群规模是怎么样的，node节点是怎么做资源保护的？</p></blockquote><p>A：目前600个node节点，我们目前是监控整体集群水位，在达到60%左右就会对集群进行扩容</p><blockquote><p>Q：如何实现灰度发布以及蓝绿部署</p></blockquote><p>A:基于ingress实现的，部分是使用公有云的负载均衡，通过api实现切换</p><blockquote><p>Q： 目前我们使用的gitlab-ci-runner 部署于k8s之外实现ci/cd。发现gitlab-ci在实际使用中，经常会遇到卡死报错。请问下，相比jenkins 做ci/cd 是会有什么优势，之前并没有使用过jenkins.</p></blockquote><p>A：gitlab-ci生产环境中，我们也没有使用，我们调研的结果是1、有侵入性 2、pipeline功能较弱，但是有一个好处是遇到错误好像还可以继续执行。jenkins遇到错误会中断流程。<br>基于kubeadm+calico，空闲时CPU占用达到30-40%是否正常？<br>实际使用中没有使用过kubeadm部署，因为封装东西太多，不易于排查问题。空闲时cpu到30-40，需要具体情况分析。</p><blockquote><p>Q：600个node节点都遇到过什么问题， 有什么需要注意的？</p></blockquote><p>A：前期网络上遇到的问题比较多，还包含calico bug。后面多数是一些业务使用上导致的问题，还有业务增量之后引发的各种问题。</p><blockquote><p>Q：请问是怎么配置的多个不同功能的jenkins-slave pod的还有jenkins-slave镜像怎么做的，还有一个任务中有发布和回滚怎么做呢，老师的cicd人工干预的地方在哪里?</p></blockquote><p>A：jenkins-slave镜像实际就是把jenkins的agent.jar运行在容器中。发布就如同前面所讲。回滚最终是调用helm rollback。cicd人工干预的话都是通过配置项来控制的。</p><blockquote><p>Q： 容器web应用，有没有做安全防护呢 有遇到用户恶意模拟XFF，频繁访问接口么?</p></blockquote><p>A：这个我们是在入口去做的，因为使用的公有云，直接就上了waf、各种安全产品。</p><blockquote><p>Q： k8s的编排资源是怎么弄到cmdb上的</p></blockquote><p>–anonymous-auth=false 设置后，liveness 访问报401错误，我Kube-apiserver在不停重启，这个需要怎么配置？用insecure ip和port,有不符合安全要求</p><p>这个是没有通过验证，要确认证书或者相关配置，具体的配置可以参考<a href="https://github.com/k8sre/docs/blob/master/kubernetes/kubernetes高可用集群之二进制部署.md" target="_blank" rel="noopener">我的文档</a></p><h2 id="云原生可观察性之日志管理"><a href="#云原生可观察性之日志管理" class="headerlink" title="云原生可观察性之日志管理"></a>云原生可观察性之日志管理</h2><p><a href="https://shimo.im/docs/KWJqTyw9Q3pqPDcv" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：fluentd bit 在收集的容器pod中 启用fluentd.io/parser选项 采用正则表达式匹配，发现一个正则很难试用全部场景，而且发现匹配不到日志内容的时候 节点会hung住 再重启会无法启动 一直报404启动不了 请问这个如何解决的</p></blockquote><p>A： 这个问题可以给 fluentbit 提 issue。KubeSphere 目前只用到 Parser 插件的 Decorders，主要是用 fluentbit 添加/删除/修改日志接收者，也会进行一些日志的过滤</p><blockquote><p>Q：如何debug Prometheus</p></blockquote><p>A：如果您是要参与 Prometheus 的开发，可以参考 Prometheus Github 的开发指南。如果是使用中遇到问题可以结合日志，或者查看 Prometheus Console UI 有一些直观的异常提示，到 Prometheus 社区 slack 或 Google group 请教。</p><blockquote><p>Q：Loki你们在生产上有用到吗？有没有什么最佳实践？</p></blockquote><p>A： 我们正在调研 Loki，Grafana Labs 已经用 loki 提供日志服务了。他们的部署方式参考 <a href="https://github.com/grafana/loki/tree/master/production/ksonnet" target="_blank" rel="noopener">ksonnet</a> 。建议就是几个组件要分开部署，每个组件可以有多个副本以实现高可用；另外就是根据情况选择 index 和 chunk 分别使用适合的存储。</p><blockquote><p>Q：请问一下，用户想自定义日志解析，如何实现？目前我们实现方式是 fluentd parser作为agent以deamonset的方式部署到k8s的每个节点上，一边收集一边解析，缺点是占用节点资源太多，请问咋们这边如何实现的呢？</p></blockquote><p>A：收集日志的 agent 最好用比较轻量一点的比如 fluentbit，可以把 fluentd 作为 fluentbit 的接收者，用 fluentd 实现集中的解析后再发到最终的存储，这样就不用每个节点去部署 fluentd 了。类似这样的架构</p><p><img src="https://uploader.shimo.im/f/cKq6I9f3a9Y8Fp6Q.png" alt="-"></p><blockquote><p>Q：请问一下，单台日志量多少？</p></blockquote><p>A：这个不太好说，看工作负载输出日志的情况。</p><blockquote><p>Q：日志展示？ 是kibana 还是自己单独</p></blockquote><p>A：日志展示KubeSphere 没用 kibana，是我们自己开发的日志 console</p><blockquote><p>Q：接Q4，谢谢您的答疑，目前我们想的是用户自定义解析策略不用通知任何人，日志就可以以流的方式输出到es或者其它终端，目前的问题就是如果用fluentd解析 如果添加一个解析规则就要修改fluentd的配置 就要重启下 这些感觉很不好，请问这边有什么建议吗？之所以用fluentd bit解析就是因为可以在 pod上用annotation 自定义fluentd.io parser 解析策略</p></blockquote><p>A：如果想每个节点都有自己的解析方式，而且不想频繁重启的话， 并且想用一个比较轻量的 agent 的话 可以试试 filebeat，filebeat 有自动加载配置的功能，解析日志也比较强大。</p><blockquote><p>Q：KubeSphere 的日志系统看起来很漂亮啊，也是开源的吧</p></blockquote><p>A： 目前后端是开源的，前端也即将开源。目前的所有版本都是免费安装可用的。安装下载链接：<a href="https://kubesphere.io/zh-CN/install/" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：KubeSphere的日志在多集群设计上是会用 Thanos 去实现吗？优点是什么</p></blockquote><p>A：Thanos 适用于监控的多集群实现，可用实现多个 Prometheus 的全局查询。日志多集群的话用 es 实现的话 Elasticsearch 较新版本支持的。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/modules-cross-cluster-search.html" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：fluent和filebeat有做过压测吗？还是因为fluentd是cncf的项目才选择这个的？</p></blockquote><p>ruby也有GIL锁，只能压榨单核性能<br>A：选择 fluentbit 主要是因为内存占用少。filebeat 也很流行，go 写的，内存占用据我说知会比 fluentbit 多一些。fluentbit 是完全用 C 写的，不是用 ruby。Fluentd 核心用的 c，插件用的 ruby</p><blockquote><p>Q：不同服务的日志都是混在一起的？而不是不同的index？容器内的日志怎么采集呢？</p></blockquote><p>A：目前是不同服务的日志每天一个index，如果想不同index的话应该要用filter加tag实现。容器内没有输出到stdout 落盘的日志可以用在容器内添加sidecar的方式将落盘日志转发到stdout。kubesphere 2.1 即将发布，自带了收集落盘日志sidecar自动注入的功能</p><blockquote><p>Q：标准输出，数据回落盘吗？怎么清理？</p></blockquote><p>标准输出，日志不会落到容器内挂载的盘，但是会落到容器所在的节点的盘上，通常这个节点的容器日志会有 rotation 设置，定期清理</p><h2 id="9-19-社群文字直播：当-K8s-集群达到万级规模，阿里巴巴如何解决系统各组件性能问题？"><a href="#9-19-社群文字直播：当-K8s-集群达到万级规模，阿里巴巴如何解决系统各组件性能问题？" class="headerlink" title="9.19 社群文字直播：当 K8s 集群达到万级规模，阿里巴巴如何解决系统各组件性能问题？"></a>9.19 社群文字直播：当 K8s 集群达到万级规模，阿里巴巴如何解决系统各组件性能问题？</h2><p><a href="https://shimo.im/docs/6KwX3CR3yRHWdtYV" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：calico网络中，如果节点跨三层，路由器不支持BGP，RR同步如何实现？</p></blockquote><p>A：这个不清楚。</p><blockquote><p>Q：由于节点IO，网络，负载过高等问题，etcd频繁选主，导致kube-apiserver方向超时。如何应对这种问题？</p></blockquote><p>A：最重要的，我们需要为 etcd 配置相对稳定的资源，CPU/Mem 视集群规模而定，Disk 最好是 SSD，因为 disk io 性能对 etcd 写性能影响巨大。我们需要检查 etcd heartbeat timeout 和 election timeout，是否适合当前集群的环境。如果有条件，建议大家能去实践 etcd 3.4，pre-vote 的引入能有效减小异常情形下的抖动。此外，今天也给大家提到了 kube-apiserver 层面的优化，通过在 kube-apiserver cache 上实现 linearizable read，避免大量的读请求打到 etcd，从而可以大幅降低 kubernetes 集群中 etcd 的压力。</p><blockquote><p>Q：当集群需要进行版本升级时，k8s各组件应该怎么操作。需要遵循顺序吗？为什么？</p></blockquote><p>A：一般遵循先升级 Server，再升级 Client 的做法。对 kubernetes 来说，先升级 kube-apiserver，再升级 controllers，最后灰度升级 kubelet。先升级 kube-apiserver 的原因是 server 是对外提供服务（接口)的，kubernetes 遵循向前兼容两个版本的机制，确保集群的兼容性，最后升级 kubelet 是因为在节点数非常多的情况下，kubelet 的升级需要一个较长的观察周期去灰度。同时提醒大家，一定要注意 kubelet 升级对节点上运行容器的影响。</p><blockquote><p>Q：在etcd里面有三个Instance，比如发生了以下场景:</p></blockquote><p>A作为leader，B和C作为follower，这时候用户通过curl指令发送了一个Put操作，A收到后通知了B和C，然后B，C回了response,这个时候A提交日志到状态机，然后回复给用户，但在回复用户的过程中挂掉了。这时候假设用户不再发起请求，但B和C选出主机后会提交该日志，也就说用户认为失败了，但etcd内部已经提交了该操作。这种情况下etcd是怎么处理的？</p><p>A：这种情况只是告诉用户超时了（结果未知)，并未告诉用户你的请求成功或者失败了（结果已知)。理解了分布式系统调用的三态，用户系统为了确保正确性，可以选择重试或者其他的方式确认自身状态的推进。</p><blockquote><p>Q：能否讲解以下etcd的幂等性的实现？</p></blockquote><p>A：幂等简单理解多次调用同一个操作不会破坏系统的正确性，典型的 put key value 操作是幂等的，delete key 也是幂等的，因为这不会破坏系统的数据状态。试想一下如果提供一个操作叫做 inc key 对 key 做 +1 操作（比如 redis 提供了类似的操作)，用户很难“正确”的使用该 API 构建正确、一致的分布式系统。当然并不是说 redis inc 不好，它可以很好的应用于某一些对一致性要求不高的场景，一个典型的例子是统计微博的点赞次数。</p><blockquote><p>Q：etcdctl在最新版本中get一个不存在的key的时候为什么不返回key not found了（标准输出中)，没有任何的提示和返回，版本3.5。</p></blockquote><p>A：因为真实语意实际上是一个 range 操作，既然是 range，当然不存在 key not found 的错误了，如果需要可以根据返回的条目确定结果。</p><blockquote><p>Q：在3.3etcd中有一个etcd处于故障状态，集群api暂时不可用这个问题除了升级etcd还有其余解决方案嘛</p></blockquote><p>A：生产环境一定要配置定期的数据备份策略，用于极端情况下的集群恢复。当然对于超过 quorum 节点，理论上我们可以扩展支持 “不安全” 的 member 调整方案，用于最大可能的恢复最近的数据，欢迎到社区发起类似 issue 的讨论，或许它就会成为我们的下一个增强。</p><blockquote><p>Q：Objects是什么呢</p></blockquote><p>A: 指 kubernetes 中的 pod/node/configmap 等资源对象</p><blockquote><p>Q：能不能整理出三个东西：名词列表、问题场景、解决办法图解版😃👍</p></blockquote><p>A: 敬请期待</p><blockquote><p>Q：kubelet 升级对节点上运行容器的影响大致有哪些呢？</p></blockquote><p>A: 比如因 spechash 的兼容性问题导致容器被意外重启</p><blockquote><p>Q：为什么acs上node节点的最大pod数量是110，和性能有关系吗？阿里云容器服务不是acs吗？</p></blockquote><p>A: acs？还是 ack，大规模的 ack 集群也是支持的，非常欢迎提工单骚扰</p><blockquote><p>Q：etcd 集群的dbsize 的存储空间和pod等数量是正比增长吗？我们一个集群400个pod db竟然达到2G，感觉不正常，另外一个集群才几十M？</p></blockquote><p>A: 也和单个 pod 的数据量大小，etcd compaction 策略有关系，etcd 会储存数据的多个版本。一般从经验上，400 pod 2G 是不太正常的，确认是否存在其他用户数据（比如超大的 configmap)，确认 compaction 正常工作。</p><blockquote><p>Q：k8s的调度时延都和什么有关系？</p></blockquote><p>A: 和集群中的节点数量，节点的 label 数量和 affinity/anti-affinity 复杂性，以及集群的资源空闲层度有关系。前两者比较好理解，最后一个是因为对于一个资源分配较满的集群，从中找到可以容纳待调度的节点需要更多的尝试次数。</p><blockquote><p>Q：目前您讲到的特性中有是否有贡献给社区的? 如果有的话,能简单说说吗?</p></blockquote><p>A: etcd 增强已经回馈社区并且在 etcd 3.4 中发布，kubernetes bookmark 已经发布到 1.15,后续版本请保持关注。我们的策略是尽最大的努力回馈到社区中，请大家放心。</p><blockquote><p>Q：请问在k8s中，遇到同一个接口对数据库查询时快时慢，然后整个系统中有很多应用都出现时快时慢的情况。这种情况下有什么好的方法去定位问题吗？感觉问题主要在statefulset的性能，和k8s内部网络上，但是却没有什么好的方法去定位.</p></blockquote><p>A：不是特别明白你的问题。</p><blockquote><p>Q：对于一个JAVA应用的pod的资源限制有什么好的经验？不知道到底应该限制多少合适？</p></blockquote><p>A：这是一个比较复杂的话题（VPA)，一般来说我们可以通过放宽 resource limit 来观察应用实际的运行情况，并通过实际经验来判断应该采用多少的 request 值。</p><blockquote><p>Q：如果kube-apiserver/kube-controller-manager/kube-scheduler是static pod形式部署的，那对这些pod做资源预留的方式，除了request/limit还有其他方法吗？</p></blockquote><p>A：一般建议隔离 control planes 节点与其他 worker 节点，避免运维上的风险。如果一定要这么做，目前没有好的方法来确保他们。</p><blockquote><p>Q：针对etcd集群，如何进行有效的监控，阿里云采用什么的方案监控集群的cpu和网络流量等，如果单节点冲高，有什么预警和排查思路吗？</p></blockquote><p>A：阿里云一般采用 kubernetes on kubernetes 的方案，用户的 kubernetes 集群部署在一个叫做管控的 kubernetes 集群之上，因此用户集群上应用的监控采用典型的 Prometheus 的方案即可。kubernetes 到 etcd 流量不均衡问题，导致单个 etcd 流量偏高，实际上我们已经做了修复方案，这一块大家也可以关注 etcd 3.4 中的 load balancer 机制。</p><blockquote><p>Q： 能否再多介绍一些apiserver上实现</p></blockquote><p>linearizable read以及通过cache实现的对客户端查询的优化那部分<br>2.etcd、API server、Controller及调度器优化实例</p><h2 id="Porter：面向裸金属环境的-Kubernetes-的开源负载均衡器"><a href="#Porter：面向裸金属环境的-Kubernetes-的开源负载均衡器" class="headerlink" title="Porter：面向裸金属环境的 Kubernetes 的开源负载均衡器"></a>Porter：面向裸金属环境的 Kubernetes 的开源负载均衡器</h2><p><a href="https://shimo.im/docs/wG6tjHJyQDGgDTQK" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q1：Porter 和calico有啥区别，简单了看了下都是用的BGP</p></blockquote><p>A：Porter是一个负载均衡器，而calico是CNI插件，用途不一样。</p><blockquote><p>Q2：porter有没有竞品？</p></blockquote><p>A：有一个metallb，以及基于F5的负载均衡器插件</p><blockquote><p>Q3：leaf节点是不是也需要部署服务?</p></blockquote><p>A：不需要，只需要开启BGP就可以了</p><blockquote><p>Q5：公司服务器就十台左右，部署的 Node 节点也比较少，网络方案使用静态路由是不是最好的选择？就是直接在上级路由器上添加 pod 的路由规则。性能方面是不是最好的选择？</p></blockquote><p>A：pod会有漂移情况的发生，手动更新一是比较麻烦，二是延迟较大。静态配置路由相比于开启BGP的路由器性能上会有一点优势，但是在pod漂移到手动更新路由中间，可能会出现服务中断，如果能承受应该是没问题的</p><h2 id="1205-社群直播：Knative-Serverless-之道-如何-0-运维、低成本实现应用托管？"><a href="#1205-社群直播：Knative-Serverless-之道-如何-0-运维、低成本实现应用托管？" class="headerlink" title="1205 社群直播：Knative Serverless 之道 - 如何 0 运维、低成本实现应用托管？"></a>1205 社群直播：Knative Serverless 之道 - 如何 0 运维、低成本实现应用托管？</h2><p><a href="https://shimo.im/docs/RhvYRWy8W3RqGYtW" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q1：开发怎么远程调试k8s中的应用</p></blockquote><p>A1：Kubernetes 底层首先是一个容器，那咱们就从容器谈起。容器相对于宿主机来说其实只是把业务进程限制在一个更合理的权限范围内。在调试容器里面的业务进程时可以直接 docker exec 到容器内。到了容器内部就和一个 vm 没有什么差别了。而 Kubernetes 的 Deployment 可以认为是编排很多容器，每一个 容器都可以通过 宿主机 docker exec 进去。当然也可以通过 Kubernetes 的方式 kubectl exec 到容器内进行调试。如果实在初期调试阶段建议使用比较完整的 CentOS 或者 Ubuntu 镜像，基础镜像内要有一些基本的调试工具。摸索熟悉了之后可以使用精简的基础镜像，这样更经济。</p><blockquote><p>Q2：knative的build和开发流程管理可以代替jenkins吗</p></blockquote><p>A2：Knative 的 Build 现在长大了，单独开启了一个项目就是  Tekton。Tekton 的定位不是替换 Jenkins ，这两者在使用方式上差别还是很大的。对于比较习惯 Jenkins 的用户来说切换成 Tekton 是需要一个适应过程的。那么为什么要搞一个 Tekton 呢，Jenkins 不是已经很好了吗？具体 Tekton 的详细设计和实现咱们以后可以单独说明，这里选几个重要的介绍一下区别：<br>Tekton 的 Kubernetes 原生特性体现在如下几点：<br>Tekton 的所有 Task 都是以 Pod 的粒度执行的，每一个 Task 可以包含很多个 Step。一个 Task 的所有 Step 在同一个 Pod 内串行执行。不同的 Task 通过 Tekton Controller 编排，是跨 Node 节点执行的；<br>Tekton 的最基本的执行单元是 Pod，这和 Kubernetes 云原生操作系统是非常契合的。一个人如果掌握了 Kubernetes，再学习 Tekton 就是一件非常容易的事情。但是想一下如果掌握了 Kubernetes 会对学习 Jenkins 有所帮助吗？不太可能。随着 Kubernetes 的流行这种影响也会变的越来越明显；<br>再说一下被集成的特性，Tekton 如果现在和 Jenkins 拼生态现在资历还不够，但是他的设计和云原生生态位决定了他可以很容易的通过 Kubernetes api 被集成，而 Jenkins 的 API 需要单独学习，这些都是成本；<br>Kubernetes 生态的很多已有的工具，比如 Chart 等等都可以和 Tekton 非常容易的契合在一起，Jenkins 的生态自己比较孤单。长远看 Tekton 是有优势的，但 Tekton 自己的领域能力也需要不断完善；</p><blockquote><p>Q3：knative编排和K8S应用编排的区别及应用场景?</p></blockquote><p>A3：Kubernetes 的最大价值是把对 IaaS 资源的操作标准化了，比如无论是在 aws 还是在阿里云上面使用计算、存储、网络等资源都可以直接通过 Kubernetes 语义完成，不需要关心不同厂商底层差异化的实现。而 Knative 才是面向应用的编排。Knative 对应用的 Serverless 编排主要体现在对：流量的管理、灰度策略和弹性的管理。并且流量、灰度和弹性这三者是完美的契合在一起的。从另一个角度来说 Knative 是建立在 Kubernetes 之上的，Knative 需要使用 Kubernetes 提供的对 IaaS 的标准化服务。这二者是上下层的依赖和被依赖的关系，不是竞争关系。</p><blockquote><p>Q4：knative有哪些成功的行业应用实践？</p></blockquote><p>A4：在阿里云上面已经有很多用户在使用了。另外 Google 的 CloudRun 产品完全是建立在 Knative 之上的。</p><blockquote><p>Q5：knative的现状和预期达到的目的?</p></blockquote><p>A5：Knative 现在已经被众多厂商开始支持了，Knative 的目标是标准化应用 Serverless 编排模型。比如：<br>通过 Knative 对应用进行编排<br>通过 Knative 支撑上层 faas 系统实现<br>这里说的应用其实不限于在线服务，很多 AI 任务也是通过 Knative 驱动的，比如分享中提到的 KFServing </p><blockquote><p>Q6：缩容时，怎么才能当pod内的流量消耗完？在销毁？</p></blockquote><p>A6：Kubernetes 中 Pod 是可以设置 Prestop 的，Prestop 可以保证先卸载流量，然后再摘除服务</p><blockquote><p>Q7：k8s 应用服务器内网无网络，入口只有一台nginx 在dmz区域可以出公网（nginx 与应用服务器网络只开放访问31380/31390），当pods 容器直接回调第三方域名时，该如何解决这个问题。</p></blockquote><p>A7：这个涉及到了具体业务模型和系统架构，可以单独联系我下线沟通</p><blockquote><p>Q8：感觉knative就是另一种形式的配置即服务，和jenkins X发展的异同?</p></blockquote><p>A8：Knative 是一个应用 Serverless 编排引擎，可以快速给普通应用赋予 Serverless 能力。比如流量、灰度和弹性的完美结合。另外 Knative 的事件模型可以对接外部事件做基于事件驱动的 Serverless 模型。</p><blockquote><p>Q9：在企业私有云环境部署knative会有哪些挑战？</p></blockquote><p>A9：只要是标准的 Kubernetes 集群之上就能部署 Knative，不过很多镜像需要翻墙</p><blockquote><p>Q10：阿里云上的容器镜像服务是如何处理鉴权的？</p></blockquote><p>A10：可以参考阿里云镜像仓库的官方文档：</p><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/authorize" target="_blank" rel="noopener">link</a></p><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/credentials" target="_blank" rel="noopener">link</a></p><blockquote><p>Q11: istio层面的管控和维护成本比较高，如envoy性能问题，网络问题等，这部分工作是由云平台负责的吗，knative这边有没有相应措施</p></blockquote><p>A11: 目前阿里云容器服务 Kubernetes 集群控制台可以通过 UI 管理 Istio 和 Knative，可以快速上手。控制台也提供了很多便捷操作降低运维成本。Knative 主要依赖了 Istio 的 Gateway，Gateway 本身是可以横向扩展的，不会有太大影响。</p><blockquote><p>Q12：容器的冷启动问题如何解决，第一个流量岂不是延时很高?</p></blockquote><p>A12: 如果缩容到零以后，到一个请求的延时是会很高。第一个请求冷启动的问题是一个公认的业界难题，这也是各大云厂商在竞相解决的问题。相比使用云的客户而言，云厂商自己其实更迫切解决这个问题，敬请关注…. </p><blockquote><p>Q13: knative的组件本身怎么部署？如何保证HA？谢谢</p></blockquote><p>A13: Knative 是建立在 Kubernetes 之上的，Knative 组件其实就是 CRD 的 Controller。在 Kubernetes 中 Controller 是可以部署多个实例，通过抢锁保证只有一个 Controller 可以执行写操作。HA 的问题容易解决。</p><p>————–以下内容请勿随意修改————</p><p>本周直播主题：《Knative Serverless 之道：如何 0 运维、低成本实现应用托管？》</p><p>下一场直播时间：12.19 （周四）敬请期待！</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;README&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://blog.502.li/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kindle Oasis 和 Kindle Paperwhite3 使用体验</title>
    <link href="https://blog.502.li/archives/Kindle-Oasis2-vs-Paperwhite3.html"/>
    <id>https://blog.502.li/archives/Kindle-Oasis2-vs-Paperwhite3.html</id>
    <published>2019-12-01T05:00:00.000Z</published>
    <updated>2019-12-06T07:40:26.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul><li>2019-12-01 初稿</li><li>未完成、更新中</li></ul><h2 id="历史原因"><a href="#历史原因" class="headerlink" title="历史原因"></a>历史原因</h2><h3 id="nook2"><a href="#nook2" class="headerlink" title="nook2"></a>nook2</h3><p>我第一个电纸书是巴诺的 nook2 ，是我高三的时候买的。那时候折腾这个电纸书可费了不少劲。</p><p>当时还是 nook2 能刷成 Android  2.1 ，之后还能安装 QQ ，浏览器，冷阅 coolreader 。对，当时在 nook2 上最好用的阅读器就是 coolreader 冷阅。系统默默改制后还支持全局刷新和局部刷新。总之折腾起来很爽，虽然当时还是 Android 2.1 但运行个 QQ ，浏览器什么的都不在话下。达不到流畅但能用😂。之后 nook2 送给了我姐。后来直到 2017 年才再一次买电纸书。期间都是买纸质书或者找 PDF 资源看。</p><p><img src="../img/001968968.jpg" alt="巴诺 nook2 "></p><p><img src="../img/001968966.jpg" alt="img"></p><p><img src="../img/001968967.jpg" alt="刷成 Android 版的系统"></p><h4 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h4><p>我觉着但是</p><h3 id="Kindle-入门版"><a href="#Kindle-入门版" class="headerlink" title="Kindle 入门版"></a>Kindle 入门版</h3><p>自从上大学以来一直想买个 Kindle 来看，但学生时代嘛，自己赚的钱还不够生活费，所以只好在心里种草。直到 2018 年 5 月份的时候，我在读书月的时候参加的第二次校园十佳读者活动，被评为了十佳读者之一。那一年我在我们学校的借阅量排在全校前十，进馆次数全校第二😂。所以就很轻轻松松地获奖了。奖品是新华书店的代金券 400 元。正好我市的新华书店也卖 Kindle ，想了想 400 块钱的代金券自己再加两百块钱就能买到 Kindle 了，巨爽，所以就下狠心买了 Kindle 入门版。第一次拿到 Kindle 的那一刻，心情激动死了。</p><p>kindle 入门的使用体验就是能用，对、仅仅是能用而已。没有背光知识和白天或者光线下看，到了夜间就成瞎子了。</p><h3 id="Kindle-Paperwhite3"><a href="#Kindle-Paperwhite3" class="headerlink" title="Kindle Paperwhite3"></a>Kindle Paperwhite3</h3><p>Kindle 入门版使用了大概一个多月的时间，在此期间看完了《数学女孩》三部以及《数学史》等几本书。因为姐姐要去欧洲教学一年，在那里买书不方便，所以就把 kindle 入门版给了我姐。kindle 入门版送给我姐以后我就接着和以前一样在图书馆里看纸质书。因为图书月活动我推荐给图书馆 100 多本书如今都已经买到并入馆了。所以这段时间一直在图书馆里看纸质书。没有 kindle 的那段时间里总感觉缺少点什么，到九月份开学的时候想了想要不要再买个  kindle ？用花呗分期 12 期免息买 Kindle Paperwhite3 每个月才 80 多块钱 ，感觉还可以啊。所以在九月份开学的时候又下决定买了 Kindle Paperwhite3 。</p><p>Kindle Paperwhite3 使用体验就是已经达到够用的水准了，看书和看漫画都不在话下😂。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>工作之后，开始有了微薄的收入，开始渐渐有了一些积蓄，还了一半的助学贷款，都二十好几的人了，实在没脸让家人帮我还贷款了。加上上个月”加班“多挣了点，准备买点东西提升一下自己的幸福感。对于现在的我来说，买房？首付的十之一都还没攒到，别说厕所，连块地板砖大小的面积都买不起。</p><p>我是小有成就，我是有点小积蓄，但是这有什么用？在一线城市，一座房子至少 100万+ 才能买的下吧。生于穷人家的孩子总是在体验同龄人都在毕业游而我却要为生活而奔波的落差感。与其这么辛苦，不如早日享受。无论我再怎么勤俭节约，努力工作赚外快，我知道我这辈子注定也买不起 100万+ 的房子。</p><p>贷款买房？想想以后一个月的工资要有一半来还房贷，我实在无法接受。最起码我现在虽然住在一间小破房了，但我的工资 18 倍于我的房租。我不想牺牲快乐和自由去换一套房。原本生活中的必需品，此时却变成奢侈品。反正既然也买不起房，那就不如享受，人生就是这样，在自己的承受范围内，买一些自己喜欢的东西。</p><p>我不是圣人君子，我也是有物欲的人，甚至我更加贪婪，占有欲更强。对于目前的我来讲现在最需要升级的设备就是 Kindle Paperwhite3 了。虽然使用 Kindle Paperwhite3 已经一年多了，但它用来看书的体验仅仅够用，还没达到我满意的程度。尤其是拿来看漫画的时候，更是捉襟见肘，所以有必要升级一下啦。Kindle Paperwhite3 没有物理翻页键，翻页起来有时回失灵。就是你想翻回上一页的时候死活翻不回去，很僵硬的问题。其次就是屏幕尺寸有点小，看漫画的时候需要仔细盯着眼看一些比较小的字体。</p><p>其他没啥想要的，三月份的时候给姐借了点钱买了个二手的 ThinkPad Yoga 12 笔记本，因工作需要。六月份的</p><h3 id="为什么不要买房呢"><a href="#为什么不要买房呢" class="headerlink" title="为什么不要买房呢"></a>为什么不要买房呢</h3><p>想必大多数人的回答都是两个字 <code>结婚</code> ，没有一套房子丈母娘也肯定不愿意。没钱买房子难道要贷款买房子嘛？首付我都付不起，更不要提还房贷了。假如一对夫妻每个月的工资都要有三分之一以上用来还房贷，这样的生活我是无法接受的。何况我又不想谈恋爱更不想结婚。</p><h3 id="为什么不要结婚呢"><a href="#为什么不要结婚呢" class="headerlink" title="为什么不要结婚呢"></a>为什么不要结婚呢</h3><p>结婚生子，拥有一个属于自己的家庭，这是每个正常人的追求，是每个正常人的生活。</p><p>但我不想要孩子，恕我自私了、，我并不觉着拥有一个孩子是多么幸福的事情。对于我开说养育孩子是是一件麻烦事儿，又要照顾孩子，又要给孩子上学什么的。没有拿到工作城市的户口还要借读或者去老家上学。老家那种国家级贫困县，教育水平和资源及其低劣。反正我是绝对不会让我的孩子再走一遍我所走过的路。</p><p>尤其是看到当今的国内的教育让我气愤的不得了。小学生都开始强制要求学习宪法，都洗脑教育唱赞歌。从小就灌输这种红色教育，我是绝对无法接受，绝对，绝对不能接受所谓的红色教、爱国教育。在我看来国内的中小学阶段的爱国教育都是扭曲的，都是用来给当权者唱赞歌的，所以我是绝对我不能让我的孩子接受这样的教育。</p><p>所以，我是绝对不会在国内结婚生子，绝对不会让我的孩子接受这种扭曲的教育。我不结婚所以就再也不用担心买房的问题，用剩下来的钱买一些自己喜欢的东西，让自己一个人过的开心一些。</p><h2 id="怎么买"><a href="#怎么买" class="headerlink" title="怎么买"></a>怎么买</h2><p>在购买之前我做足了调查，甚至有表格来分析性价比😂。当时决定要在淘宝上买个美版 Kindle Oasis2 2017。虽然 2019 年已经推出了 Kindle Oasis3 2019。我觉着升级的性价比极低，Kindle Oasis3 2019 比 Kindle Oasis2 2017 硬件上只多了几个 LED 灯而已。尺寸、内存、处理器、存储等等都几乎无差别。所以说 Kindle Oasis2 性价是不错滴。</p><h3 id="美亚"><a href="#美亚" class="headerlink" title="美亚"></a>美亚</h3><p>在黑五当天美亚上<a href="https://amzn.to/2R02n88" target="_blank" rel="noopener">Kindle Oasis 3</a>  的价格是174.99美元（人民幣約1230元），相当诱人滴。但美亚上没无法直邮，只能转运。而转运的话更为麻烦，费时费心费力。到手破损损坏的话处理起来更为麻烦。所以我就放弃了在美亚上购买。况且我也实在等不了十几天😂。而且自己买从美亚上买和在淘宝上买美版的区别不大的，都无法在国内享受保修。收到后出现坏点的话退换货成本极大，几乎无法退换货。淘宝上还能多加 20 块钱买个坏点险，如果出现四个以上的坏点的话免费换新，四个以内的话赔偿 40 块钱。</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">穷人的世界捡个垃圾都要做个表格分析一下性价比。<br>目前当务之急是把手头的 Kindle Paperwhite3 换到 Kindle Oasis 2，因为自从拿来看漫画就觉着 Kindle Paperwhite3 不够用了😂。<br>至于手机？等过几年再说吧，手头的 6s 还能续命接着用几年滴。毕竟每天 kindle 的使用时间(4h)三倍于手机。 <a href="https://t.co/EUGhXBZC7A" target="_blank" rel="noopener">pic.twitter.com/EUGhXBZC7A</a></p>&mdash; 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1199731167697756161?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">November 27, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h3 id="为什么买二手而不买未拆封美版？"><a href="#为什么买二手而不买未拆封美版？" class="headerlink" title="为什么买二手而不买未拆封美版？"></a>为什么买二手而不买未拆封美版？</h3><p>如果买国行的话，正品价格最低是 2399 ，而且依照 kindle 千年不降价的作风，对于咱来说买国行实在是买不起。如果你想买国行的话推荐淘宝上的梅先生的 kindle 店买。我上一个 Kindle Paperwhite3 就是在那里买的。</p><p>其实刚开始我是想买美版 Kindle Oasis2 的，淘宝上 1500 左右就能买到，如果自己在美亚上买的话加上转运费和税费价格也少不那里去。无论是在淘宝上还是美亚上买美版的 Kindle 都有一个共同点，退换货成本极大。淘宝上未拆封的 kindle ，买来拆封后是无法退货的，即便是有问题的机器那也算你倒霉无法退货。而在美亚上买，你邮寄回美国的运费又负担不起。</p><h3 id="闲鱼捡垃圾"><a href="#闲鱼捡垃圾" class="headerlink" title="闲鱼捡垃圾"></a>闲鱼捡垃圾</h3><p>综上决定在闲鱼上买，在咸鱼上搜了一下同城，正好找到一个卖家 。国行 Kindle Oasis2  8 GB 带官方 199￥ 的皮套，总价格 1280￥。和卖家沟通好第二天下午面交。😂第二天很顺利地完成了 PY 交易，卖家给便宜了 30￥，最终以 1250￥ 的价格买到手了 Kindle Oasis2。</p><h3 id="关于容量"><a href="#关于容量" class="headerlink" title="关于容量"></a>关于容量</h3><p>建议买 8 GB，你看书的话根本不需要 32 GB。两者价格相差 200 块钱，而仅仅多了 20 GB 的容量，性价比实在太低。 kindle 适合用来看书而不是用来存书，32 GB 的书你看十年都看不完😂，即便是 8GB 的容量也很难看完。所以没必要贪多，买 8 GB 足够。省出来那两百块钱订阅两年的 Kindle Unlimited 会员都要比多出那 20GB 的存储空间性价比高的多。</p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>在公交车上拍照<del>开箱</del>😂</p><p><img src="../img/image-20191202171108883.png" alt="KO2 在公交车上开箱😂"></p><p><img src="../img/image-20191202171129184.png" alt="KO2"></p><p><img src="../img/image-20191202171510337.png" alt="image-20191202171510337"></p><p><img src="../img/image-20191202172046660.png" alt="image-20191202172046660"></p><p><img src="../img/image-20191202172104805.png" alt="image-20191202172104805"></p><p><img src="../img/image-20191202172141495.png" alt="image-20191202172141495"></p><p><img src="../img/image-20191202172159248.png" alt="image-20191202172159248"></p><p><img src="../img/image-20191202172208956.png" alt="image-20191202172208956"></p><p><img src="../img/image-20191202172216921.png" alt="image-20191202172216921"></p><p><img src="../img/image-20191202172231655.png" alt="image-20191202172231655"></p><h3 id="看漫画"><a href="#看漫画" class="headerlink" title="看漫画"></a>看漫画</h3><p><img src="../img/image-20191203100634998.png" alt="image-20191203100634998"></p><p><img src="../img/image-20191203100645837.png" alt="image-20191203100645837"></p><p><img src="../img/image-20191203100655418.png" alt="image-20191203100655418"></p><p><img src="../img/image-20191203100706964.png" alt="image-20191203100706964"></p><h2 id="总体感受"><a href="#总体感受" class="headerlink" title="总体感受"></a>总体感受</h2><p>Kindle Oasis2 无论在尺寸还是在速度上已经满足我了，物理翻页键取代触屏翻页也方便多了。以前使用 Kindle Paperwhite3 看书的时候经常误触，按回退不知怎么地就翻到下一页。物理键取代触摸屏幕翻页效率和准确度上那是一天地上跑的和一个天上飞的区别😂。如果 Kindle Paperwhite3 能有个物理翻页键就完美无缺了。</p><p>但美中不足也有一些瑕疵，其中最大的问题就是 Kindle Oasis2 的电池太不耐用了，现在基本上是三天一充，而 Kindle Paperwhite3 一周一充。😥</p><p>另一个问题就是由于 KO2 是金属机身，冬天躲被窝里看书的时候手汗会留在上面🙃。但瑕不掩瑜，瑕不掩瑜😂</p><p><img src="../img/image-20191202172126512.png" alt="image-20191202172126512"></p><p>事后留下了一些不明液体🙃？其实是手汗😂</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bennythink.com/first-mbp.html" target="_blank" rel="noopener">还是早日享乐吧——年轻人的第一台 MacBook</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;更新日志&quot;&gt;&lt;a href=&quot;#更新日志&quot;
        
      
    
    </summary>
    
    
      <category term="阅读" scheme="https://blog.502.li/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="Kindle" scheme="https://blog.502.li/tags/Kindle/"/>
    
  </entry>
  
  <entry>
    <title>博客从 typecho 迁移到 hexo</title>
    <link href="https://blog.502.li/archives/blog-typecho-to-hexo.html"/>
    <id>https://blog.502.li/archives/blog-typecho-to-hexo.html</id>
    <published>2019-11-21T05:00:00.000Z</published>
    <updated>2019-12-06T06:03:19.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Typecho"><a href="#Typecho" class="headerlink" title="Typecho"></a>Typecho</h2><p>年初的时候终于把博客写了起来，到现在也水了大概 50 篇博客文章。大一大二的时候也整个，当时还是使用 Wordpress ，只是玩心太重没能坚持下来写。直到毕业后找到了第一份工作，955 工作制，才有时间精心打理这个博客。</p><p>博客使用的是  <a href="https://github.com/zgq354/typecho-theme-next" target="_blank" rel="noopener">NexT.Mist</a> 的主题 ，不得不说 <a href="https://github.com/zgq354/typecho-theme-next" target="_blank" rel="noopener">NexT.Mist</a>  主题是我用过的 typecho 里面最好的主题，没有之一。我拿来后经过大刀阔斧地删除了很多无用的内容，并把归档设置为首页。能精简的就精简掉，没有花里胡哨的花架子。但也有一些缺点，比如：对中文排版不够好，我希望二级标题三级标题还有引用等能呈现的突兀一些，尤其是在移动端的时候，三级标题以及四级标题几乎和正文一样了；代码高亮字体太小，不美观。</p><p><img src="../img/image-20191121112230084.png" alt="首页很精简"></p><p><img src="../img/image-20191121112335945.png" alt="中文排版多级标题很差"></p><p><img src="../img/image-20191121112940929.png" alt="代码高亮字体太小"></p><h2 id="hugo"><a href="#hugo" class="headerlink" title="hugo"></a>hugo</h2><p>期间也折腾了 hugo，但 hugo 的主题没有找到像 next 一样的，很僵硬。不过我平时写文档最后还是喜欢用  hugo 来生成。或者用 Typora 导出 PDF 然后上交给领导😂。在我看来 hugo 最大的优势就是精简和极速。就单单一个 hugo 二进制可执行文件即可创建站点，不像 hexo 那样要依赖上千的包和上万个文件。hugo 的这一点比 hexo 高到不知道哪里去了😂。</p><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>感觉 hexo 的主题无论是在数量还是质量抑或是美学上不知道比 hugo 高到不知到哪里去了😂</p><p>无意间在发现了  <a href="https://www.elietio.xyz/" target="_blank" rel="noopener">零の轨迹</a>  的博客，使用的也是   <a href="https://theme-next.org/" target="_blank" rel="noopener">NexT.Gemini</a>  主题，主题很符合我的期望，遂采用了   <a href="https://theme-next.org/" target="_blank" rel="noopener">NexT.Gemini</a>  主题。克隆下来博主的 <a href="https://github.com/Elietio/Elietio.github.io" target="_blank" rel="noopener">Elietio.github.io</a> repo 就撸起袖子加油干。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p> 网上类似的教程一搜一大把，写得其实很详细 。由于 hexo 是使用 nodejs 开发，所以需要装 nodejs 以及 nodejs 的包管理器 yarn，不推荐用 npm。我的环境是 Debian 10。debian 10 上已经有 nodejs 的包了，所以直接 apt 一把梭就 ok </p><blockquote><p> 官方是使用 npm 进行安装，个人推荐使用 <a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="noopener">yarn</a> 进行安装，关于 yarn 和 npm 优劣分析，可以参考这篇文章《<a href="http://web.jobbole.com/88459/" target="_blank" rel="noopener">Yarn vs npm: 你需要知道的一切</a>》 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 nodejs 包管理器 yarn 的源</span></span><br><span class="line">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://dl.yarnpkg.com/debian/ stable main"</span> | sudo tee /etc/apt/sources.list.d/yarn.list</span><br><span class="line">sudo apt update &amp;&amp; sudo apt install yarn</span><br><span class="line"><span class="comment"># 安装 hexo</span></span><br><span class="line">yarn global add hexo-cli</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Elietio/Elietio.github.io hexo</span><br><span class="line"><span class="built_in">cd</span> hexo</span><br><span class="line">git checkout hexo</span><br><span class="line">yarn install</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="精简"><a href="#精简" class="headerlink" title="精简"></a>精简</h3><p>使用 yarn 安装完依赖后，原项目太臃肿了，还是第一次见人把 models 放进 git repo 里的😂。咱就精简一下吧，去掉那些花里胡哨的东西，四博客更加轻量和精简。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">8.0K    _config.yml</span><br><span class="line">4.0K    gulpfile.js</span><br><span class="line">34M     live2d_models</span><br><span class="line">86M     node_modules</span><br><span class="line">4.0K    package.json</span><br><span class="line">368K    package-lock.json</span><br><span class="line">4.0K    README.md</span><br><span class="line">1.0K    scaffolds</span><br><span class="line">1.4M    <span class="built_in">source</span></span><br><span class="line">7.4M    themes</span><br><span class="line">260K    yarn.lock</span><br></pre></td></tr></table></figure><h3 id="精简第三方插件"><a href="#精简第三方插件" class="headerlink" title="精简第三方插件"></a>精简第三方插件</h3><p>第三方插件装在了 <code>themes/next/source/lib</code> ，有很多我不需要的。所以需要一个一个精简掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.8M    algolia-instant-search   <span class="comment"># 站内搜索</span></span><br><span class="line">20K     canvas-nest              <span class="comment"># 绘画</span></span><br><span class="line">16K     canvas-ribbon            <span class="comment"># 绘画</span></span><br><span class="line">436K    font-awesome             <span class="comment"># 字体</span></span><br><span class="line">84K     jquery</span><br><span class="line">84K     needsharebutton          <span class="comment"># 分享</span></span><br><span class="line">77K     pace                     <span class="comment"># 加载图标</span></span><br><span class="line">649K    three                    <span class="comment"># 3D</span></span><br><span class="line">304K    velocity                 <span class="comment"># 异步加载库</span></span><br></pre></td></tr></table></figure><h4 id="精简后"><a href="#精简后" class="headerlink" title="精简后"></a>精简后</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">432K    font-awesome</span><br><span class="line">84K     jquery</span><br><span class="line">24K     jquery_lazyload</span><br></pre></td></tr></table></figure><p>最后我只保留了字体和  jQuery 以及装了个 <code>jquery_lazyload</code> 用来延迟加载大量的图片文件。</p><p>同时在 <code>layout</code> 目录里的文件也精简掉了很多，去掉了看板娘、分享、赞赏、热度、加载进度条等花里胡哨的东西。对于我来说只追求文章内容的排版，这一堆幺蛾子没啥用，都是一堆花架子。</p><h3 id="fuck-baidu"><a href="#fuck-baidu" class="headerlink" title="fuck baidu"></a>fuck baidu</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><p>原项目里使用的 <code>baidusitemap.xml</code> ，对于咱这种对 baidu 恨之入骨的人来说当人是无法忍受的了，所以就关键字搜索 baidu ，干掉了所有与百度相关的代码。</p><p><img src="../img/image-20191121132219406.png" alt="image-20191121132219406"></p><h2 id="精简后-1"><a href="#精简后-1" class="headerlink" title="精简后"></a>精简后</h2><p>经过四个多小时的精简终于达到了我所满足的地步，文件数量以及静态文件也比自带的减少一倍，在 Google page test 都能达到 92 分，如果加上 CDN 的话分还能再高一些。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.0K    bower.json</span><br><span class="line">36K     _config.yml</span><br><span class="line">0       crowdin.yml</span><br><span class="line">4.0K    gulpfile.coffee</span><br><span class="line">72K     languages</span><br><span class="line">159K    layout</span><br><span class="line">4.0K    LICENSE.md</span><br><span class="line">4.0K    package.json</span><br><span class="line">32K     README.md</span><br><span class="line">94K     scripts</span><br><span class="line">868K    <span class="built_in">source</span></span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="../img/image-20191121112120336.png" alt="image-20191121112120336"></p><p><img src="../img/image-20191121112401015.png" alt="目录和多级标题很nice"></p><p>  <a href="https://theme-next.org/" target="_blank" rel="noopener">NexT.Gemini</a>  主题的引用部分背景色好评，用来提醒读者我是<del>引用</del>剽窃别人的还是不错滴😂，我倒是喜欢用 <code>剽窃</code>二字替代<code>引用</code>，用来自嘲自己知识水平不足只能靠剽窃😀。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>后续尝试着把目前在使用的 hexo 主题 移植到 hugo 上，对于这种菜鸡运维来说还是挺难的。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Typecho&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="typecho" scheme="https://blog.502.li/tags/typecho/"/>
    
      <category term="blog" scheme="https://blog.502.li/tags/blog/"/>
    
      <category term="hexo" scheme="https://blog.502.li/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>justice 公开课</title>
    <link href="https://blog.502.li/archives/justic.html"/>
    <id>https://blog.502.li/archives/justic.html</id>
    <published>2019-11-20T05:00:00.000Z</published>
    <updated>2019-12-06T06:03:19.234Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此文引用剽窃自互联网</p></blockquote><h2 id="1-《杀人的道德侧面》"><a href="#1-《杀人的道德侧面》" class="headerlink" title="1.《杀人的道德侧面》"></a>1.《杀人的道德侧面》</h2><hr><p>如果必须选择杀死1人或者杀死5人，有多数的学生投票来赞成杀死1人，来保全其余五个人的性命。如果在最后，可以有五个人活下来。那么哪怕牺牲一个人的生命也是值得的。这个例子体现了结果主义的道德推理。 事情的正确以及道德与否，取决于你的行为所产生的后果。 结果主义的道德准则中最著名的例子是功利主义功利主义不考虑一个人行为的动机与手段，仅考虑一个行为的结果对最大快乐值的影响。能增加最大快乐值的即是善；反之即为恶。即使是为了救回5条人命。杀害一个无辜者。人们在考虑是不是要这么做的时候，会考虑到这个行为的本身，无论结果如何人们觉得这是错的，而且大错特错。这就引出了第二种道德推理，绝对主义的道德推理。绝对主义的道德推理认为：道德有其绝对的道德原则，有明确的责任和权利，而无论所造成的结果是怎么样的。</p><hr><h2 id="2-《同类相残案》"><a href="#2-《同类相残案》" class="headerlink" title="2.《同类相残案》"></a>2.《同类相残案》</h2><p>人们是否也有某些基本权利？如果不是来自较大群体的福祉，或者效用或幸福？那么这些权利从何而生？为什么同意以一定的程序，公平的程序，就可以用该程序的运作来为最终带来的结果辩护？得到同意的基本思想：得到同意产生的道德影响是什么？为什么一个得到许可的行为会产生道德上是否允许的不同，使未经许可杀死一个生命是错误的，而本人同意了，在道德上就是允许的？</p><hr><h2 id="3-《给生命一个价格标签》"><a href="#3-《给生命一个价格标签》" class="headerlink" title="3.《给生命一个价格标签》"></a>3.《给生命一个价格标签》</h2><p>边沁版本的功利主义其主要思想就是：道德的最高原则，无论个人或政治道德，就是将公共福利，或集体的幸福最大化，或在快乐与痛苦的平衡中倾向快乐;简而言之就是，功利最大化。 从这个理论的整体出发，从做正确的事的观点出发，政策和法律的公正的基础就是将效用最大化。两个反对功利主义的不同意见：一是功利主义是否充分尊重了个体权利或少数群体的权利；另一个则是聚集起来的所有效益或价值，是否能将聚集起来的所有价值转换成金钱?Thorndike从他的研究中得到的结论。任何愿望或满足感都存在一个量来度量它们，因此是可度量的。狗或猫或鸡的生活都是由欲望组成，渴望，欲望，以及他们的满足。人类的生活，也是如此，虽然人类的欲望和欲求更加复杂。</p><hr><h2 id="4-《如何衡量快乐》"><a href="#4-《如何衡量快乐》" class="headerlink" title="4.《如何衡量快乐》"></a>4.《如何衡量快乐》</h2><p>功利主义哲学家密尔认为，所有人类的体验都可以量化，但某些快乐是更值得拥有，更有价值的。穆勒认为，如果社会重视更大程度的欢乐和公正，那么长远来说，社会整体终会有所进步。他说，”我质疑一切不基于效用之上的公义评判标准”但是同时， 他认为基于效用的公义评判标准”是所有道德标准中主要， 神圣且独一无二的一部分。”所以公义和个人权利在社会中的较高地位，并非因为它们脱离了功利主义的前提。公义， 作为某些道德要求的合称，其在社会范围中所能起到的正面效用被人们普遍认同。因此， 它比起其他的道德而言更为重要所以说， 公义是神圣的，是重要的， 对个人来说也是这样。它不是那种可以被简单置换的东西。但最终功利主义的原因是， 穆勒认为人类作为进取的物种，考虑长期利益的时候如果能够做到公义， 以及对权利的尊重，整个社会长期而言将会更加美好。</p><hr><h2 id="5-《自由选择》"><a href="#5-《自由选择》" class="headerlink" title="5.《自由选择》"></a>5.《自由选择》</h2><p>自由主义，它十分严肃的看待个人权利的问题。之所以叫自由主义， 是因为它认为一个人的基本权利就是享受自由的权利，因为我们是独立的个体生命，我们不一定要被社会予取予求。因为我们是独立的个体生命，我们有对自由的基本权利。也就是说，我们可以自由的选择自己想过的生活，只要在享有自由的同时也尊重他人自由的权利。自由主义者认为政府干预最少的社会是最理想的社会形态。按照自由主义的观点来看， 大部分现代政府都做了三件不合法或是不公平的事情，其中之一是家长式的立法，即制订了让人们自己保护自己的法律。<br>第二点， 不该有道德上的立法。很多法律试图起到提升公民素质或阐明社会道德价值的作用，自由主义者认为这也是一种对自由权利侵犯。第三种被自由主义哲学家踢出局的法律政策就是税收或者任何为了再分配贫富之间收入财产的政策。<br>对于诺齐克和自由主义者来说，为再分配而实施的税收就是盗窃。而且，这并不只是在道义上等同于索取一个人的部分生命和劳动的盗窃，在道义上，它等同于强制劳动。诺齐克指出，强制劳动，就是奴隶制。因为，如果我不拥有对自己劳动的全部所有权，那么，就可以毫无疑问的说，政府或是政治家群体拥有我本人的部分所有权。国家拥有我的部分所有权。由此可以推出我是一个奴隶，我不是自己的主人。<br>上述推理会为我们引出一个支撑自由主义观点的基本原则——我是自己的主人。确切的说，就是自主的思想。如果你不愿只是将人民当作偏心的集合，你就会意识到最基本的道德观点在于，我们自己的拥有者或所有人就是我们自己，这也是功利主义的错误所在。</p><hr><h2 id="6-《我属于谁？》"><a href="#6-《我属于谁？》" class="headerlink" title="6.《我属于谁？》"></a>6.《我属于谁？》</h2><p>为了普遍的福利而强迫某人，而利用某人这是错误的，因为它违背了我们是自己主人的这个基本事实，也就是违背了自我拥有或自我所有的基本道义事实。自由主义反对再分配的论据正是以“我们是自己的主人”这个基本思想为起点。自由主义者与那些为了集体的愉悦而利用人民的人斗争，是一种手段，就像在路边放一块停车牌，让利用别人的功利主义逻辑能直接察觉到一个强大的思想，即我们是我们自己的所有者。</p><hr><h2 id="7-《这片土地是我的土地》"><a href="#7-《这片土地是我的土地》" class="headerlink" title="7.《这片土地是我的土地》"></a>7.《这片土地是我的土地》</h2><p>Locke指出，在“自然状态”，在任何政治体制建立之前，每个人都享有生命，自由和财产的自然权利。然而，一旦我们同意进入社会，就同意了受法律制度的约束。因此，Locke认为，即使政府干预了个人的权力，这也是大多数人的意见赋予了它权力这么做的。我们进入社会是通过同意，通过协议来离开自然状态，并被大多数人通过法律体系，人类的法律所管辖。但这些人类法律合法的唯一前提是，他们尊重我们的自然权利，他们尊重我们不可剥夺的权利：生命、自由和财产，没有哪个议会或者立法机构或民主的全权证书可以合理地侵犯我们的自然权利。没有法律可以侵犯我们的生命权、自由权和财产权。但是，怎样才算尊重我的生命权和财产权，却是由各国政府决定和界定的。</p><hr><h2 id="8-《满合法年龄的成年人》"><a href="#8-《满合法年龄的成年人》" class="headerlink" title="8.《满合法年龄的成年人》"></a>8.《满合法年龄的成年人》</h2><p>我们正在通过社会生活对税收法律做“默认同意”，因此，税收是合法的。而且，只要政府不是特意对某一群体征税-如果不是武断专横的-那么税收并没有侵犯个人的基本权利。脱离自然状态的唯一途径就是采取一个“同意”的行动：同意放弃执法的权利，并且建立一个政府或者一个团体，在这里，有立法机关制定法律，并且每个人都事先同意，每个进来的人，也都事先同意服从多数人的决定。权利是不可分割的，并且因此，我根本没有真正地拥有自己。我不能处置我的生命、我的自由、我的财产，这样其实是侵犯了我的权利。一旦有一个合法政府，经过同意而建立的合法政府，对洛克来说，唯一的限制，就是限制对人的生命、自由和财产的任意掠夺。</p><hr><h2 id="9-《雇枪》"><a href="#9-《雇枪》" class="headerlink" title="9.《雇枪》"></a>9.《雇枪》</h2><p>用洛克的观点看，一个民主的民选政府有权向人民征税，政府征税应经过人民的同意，因为这的确涉及到公共利益，而拿走个人的财产，但它不需要在税法制定或征集时去征求每个独立个体的意见。它确实需要的是人在进入社会时，就事先默认赋予的同意权，并承担政治义务。而一旦你承担了这些义务，你就同意了大多数人的约束。<br>生命权又怎样？个人拥有自己的观念难道不是受到侵犯吗？将军可以判处临阵逃脱或不服从命令—甚至是自杀性命令，但这些长官们不能做的事情是：他们没权拿走该士兵的一分一文，因为这种做法是不合法的，因为这是专制，腐败。同意论在洛克的思想中非常重要，该同意不是个体对税收或军事命令的同意，而是在第一阶段加入政府，并受大多数人的约束时就默认同意了，这就是同意论的关键所在。而且这相当关键，即使是建立在我们有一些天赋的生存权，自由权以及财产权基础之上的有限政府，即便这个有限政府只在观念上受限，并受到普遍使用的法律的监管，政府要依法行政，政府不能专制，这就是洛克的理论。</p><hr><h2 id="10-《出售母亲》"><a href="#10-《出售母亲》" class="headerlink" title="10.《出售母亲》"></a>10.《出售母亲》</h2><p>Sandel教授把自由市场交易运用到当代颇具争议的新领域：生殖权利。一种反对意见和“不知情的同意”有关，这次不是因为明显的或隐含的强迫，而是因为不完美或者有缺陷的信息，所以“不知情的”或者“有缺陷的”同意可能产生于缺乏相关的信息。产生第一个疑问：我们要计算出自愿交换的市场在涉及讨价还价、平等的信息时有多大的自由？第二种反对执行代孕合同的声音说这多少有点没有人性通过市场来交易生育，有些没有人性是什么意思？效用……用处是用来处理事物的唯一适当方法吗？包括生命、征兵、生育、养育？如果不是，我们如何计算？是否有些无法用钱买到的事物，并非因为“不知情的同意”而也可能是因为某些事物比单纯的使用具有更高的价值。</p><hr><h2 id="11-《考虑你的动机》"><a href="#11-《考虑你的动机》" class="headerlink" title="11.《考虑你的动机》"></a>11.《考虑你的动机》</h2><p>康德：最具挑战性和最有难度的思想家之一。康德认为，我们作为个体，是神圣的，是权力的享有者，但并不是因为我们拥有自己。相反，理性和自由选择是我们的能力，使我们变得独特，使我们跟单纯的动物区别开。当我们将责任付诸行动的时候，去做正确的事，只有这样，我们的行动才有道德的价值。<br>自由的行动，就意味着自主的行动。自主的行动，就意味着遵从自己为自己设定的规则而行动，不是出于自然法则或因果定律。尊重人类的尊严，意味着不仅仅将人视为实现目的的工具，而且要将人本身也视为终极目的。由于这样的原因，为了一些人的幸福安乐而牺牲其他人，就是错误的。<br>我们之所以能作为自主的生命并给自己设定行为原则，是因为一种理性，这是一种我们作为人类而普遍拥有的理性，而非什么不同寻常的特质。我们应该敬重别人的尊严，是因为我们都是理性的生命，我们都有理性思考的能力，正是我们无差别拥有的理性思维的能力，将尊严赋予我们所有人。</p><hr><h2 id="12-《道德的最高准则》"><a href="#12-《道德的最高准则》" class="headerlink" title="12.《道德的最高准则》"></a>12.《道德的最高准则》</h2><p>康德说，就我们行为的道德价值而言，赋予它道德价值的是我们超越自身利益和偏好，将责任付诸行动的能力。康德认为只有一种动机才称得上是道德的，那就是出于义务的动机，为了正确的理由做正确的事情。只有当我是在独立自主的拿主意的时候，我才是自由的。<br>康德说理性的指导方式有两种：康德将这种理性的指导称为“律令”。简单的说，律令就是指出你应该做某件事。第一种律令，也许是我们最熟悉的，是假言律令。假言律令使用的是工具理性，如果你想得到甲，那么你必须先做乙。这是一种目的-手段的逻辑推理。如果这行动本身就有价值，一个讲究理性的头脑也会认为这是必须做的事情，那么这种动机是就是绝对律令（已所不欲，勿施于人；人就是目的；尊重）。</p><hr><h2 id="13-《谎言的教训》"><a href="#13-《谎言的教训》" class="headerlink" title="13.《谎言的教训》"></a>13.《谎言的教训》</h2><p>康德看来，人并不是因为顺从于法律而获得尊严，而是因为尊重那些法律，我是法律的作者，我附属于法律，同时我主动承担起法律，我遵循法律。如果我们依照我们的道德心，自由的选择，那么我们就能保证道德法则成为一个人人共有的道德法则。理性控制了意愿，理性主导者我的意愿，当我遵守道德法则的时候，是同样的理性让你为自己选择了道德法则，这就是为什么我们能自主为自己作出选择，我们每一个人都能为自己作出选择。我们是有自主能力的个人，我们最后都遵循同一个道德法则——绝对律令。从康德的观点看来一个谎言和一个误导的真相的差别有一个世界那么大，误导性的事实对道德律仍然有所尊重。</p><hr><h2 id="14-《协议就是协议》"><a href="#14-《协议就是协议》" class="headerlink" title="14.《协议就是协议》"></a>14.《协议就是协议》</h2><p>康德认为：缔造正义法则的契约仅仅是理性观念的产物，但是它拥有勿庸置疑的实践真实性，因为它能够促使每一位立法者在制定法律的时候都与全国人民的整体意愿相符。但这是一种虚构的契约，这种契约从来没有发生过，能有多少道德力量呢？罗尔斯认为思考正义的方法就是站在一个假想契约的角度，站在无知之幕的背后，它创造了平等的条件，通过排除，或者使我们暂时忘记权力和知识的差距。这些差距在大多数情况下会导致不公平的结果。这就是为什么对康德和罗尔斯来说，一个各方平等的假想契约是思考正义原则的唯一途径。</p><hr><h2 id="15-《什么是公平的起点》"><a href="#15-《什么是公平的起点》" class="headerlink" title="15.《什么是公平的起点》"></a>15.《什么是公平的起点》</h2><p>在“无知的面纱”背后，每个人都知道一旦遮盖掀起，现实生活开启，我们每个人都希望有尊严受尊重。即使是在我们是少数的情况下。我们不希望被压榨。所以由此，我们会同意去反对功利主义，相反的，要适用我们的首要原则，即基本自由。那些在社会地位与经济上的不平等的允许条件，只有他能适用于最不富裕人群的利益。所以我们不会反对所有的收入与财富上的不平等。我们会允许一些。但是衡量界定是，那些不平等现象是否符合所有人的利益。Rawls认为，是原则，尤其是那些最底层人们的利益。只有这样那些不平等才会在 “无知的面纱”背后被接受。因此，RAWLS主张说，那些不平等只有服从于最少数人民利益，才能算是公正。</p><hr><h2 id="16-《我们该得到什么》"><a href="#16-《我们该得到什么》" class="headerlink" title="16.《我们该得到什么》"></a>16.《我们该得到什么》</h2><p>自由主义认为，公正的分配体系是一种自由交换的体系，自由的市场经济，反对背景的一种完全平等。罗尔斯称，如果你只有完全平等，工作对每个人都敞开，结果是不会公平的。机遇会偏向于那些碰巧出生在富足家庭的人，那些碰巧能有接受优良教育机会的人，而这种出生的偶然性用于分配人生际遇是不公正的。<br>我们应得那些利益，那些游戏规则所承诺的那种基于自身天赋做出的努力所获得的成果。但，不要错误与自负地假设说，我们原本一开始就是应得的，我们一开始就值得拥有这个社会所推崇的那种我们碰巧有的素质。如果我们是生活在那种社会里，而不是我们现在的这种社会中，我们很可能会少赚很多钱。但是当我们那个时候应得的东西减少的时候，我们自身的价值不会降低。</p><hr><h2 id="17-《讨论反歧视行动》"><a href="#17-《讨论反歧视行动》" class="headerlink" title="17.《讨论反歧视行动》"></a>17.《讨论反歧视行动》</h2><p>在捍卫种族和少数民族因素作为录取因素的这一观点中，一个观点打算纠正教育劣势带来的结果，改良观点，这种观点自始至终都坚持一个原则：即学业前景和学术潜力应当在录取时加以考虑，我们只需要超越单一的测试成绩和学位，来对学业前景和学术潜力做出真实的估计。<br>第二个观点认为，平权运动是正当的，在此没有必要为了一个申请人而专门改正教育劣势，这种事情合理是因为它是历史错误的一种补偿，为了过去的非正义行为，因此，这是一个补偿观点，补偿过去的错误。<br>第三个观点，多样化观点。多样化观点有两个方面。一方面认为，为了让每个人都接受教育，重要之处在于应当多样化学生群体，而另一方面其他人则说到了更为广泛的社会。</p><hr><h2 id="18-《目的是什么》"><a href="#18-《目的是什么》" class="headerlink" title="18.《目的是什么》"></a>18.《目的是什么》</h2><p>亚里士多德关于公平和正义的理论，简单地说，是告诉人们他们该付出什么，该得到什么。亚里士多德认为，一个人在考虑分配问题的时候，必须考虑分配的目标，终点和目的。对他来说，这是关于一个人找到合适的位置来发挥他的美德的事情。对亚里士多德来说，正义是给予人们应得的东西，是给予人们本来属于他们的东西，这是一个关乎人们之间，以他们的美德，他们适宜的社会角色相互配合的问题。</p><hr><h2 id="19-《好公民》"><a href="#19-《好公民》" class="headerlink" title="19.《好公民》"></a>19.《好公民》</h2><p>亚里士多德不同意康德和罗尔斯。亚里士多德主张说，公正是一种让人们得到应得之物的事物。而亚里士多德的正义理论的中心观点就是，对正义和我们拥有的权利进行推理，就不可避免地要思考，设立社会活动的目的——需要给予相同的人们以相同的东西。<br>亚里士多德说认为“美德是我们只能通过实践才能获致的，是我们只能通过运用才能获致的。它是这样的事物，我们只能通过做才能学到。它不是能从书本学到的。”我们唯一用来获得，能建立美好生活的美德的方法，是去运用美德，是去形成确定的、由反复受教而出现的习惯，然后致力于，同公民们进行研讨的实践活动，研讨关于好的性质。那是政治生活的终极关注。</p><hr><h2 id="20-《自由与适应》"><a href="#20-《自由与适应》" class="headerlink" title="20.《自由与适应》"></a>20.《自由与适应》</h2><p>在一个多元社会中，人们在关于好的生活的本质上明显会出现分歧，我们不应该去试图将正义建筑在，任何特定的对上述问题的答案上。所以他们拒绝目的论。他们拒绝，将正义捆绑到一些善的概念的观念。罗尔斯式和康德式的自由主义者在讨论目的论时，其关键之处如下：如果你把一种特定的善的概念，捆绑到正义上的话，如果你把正义视为，一个人和他或她的社会角色间，是恰当的话，你没有给自由留下空间，而想要自由就是要独立于任何特定的角色，或独立于传统，或独立于，可能是我父母留下来的惯例，或独立于我的社会。</p><hr><h2 id="21-《社会的需求》"><a href="#21-《社会的需求》" class="headerlink" title="21.《社会的需求》"></a>21.《社会的需求》</h2><p>康德认为，支持某种在其中人们可以追随自己美好生活观念的公平的权利框架是一回事，而将法律或者正义的基本规则置于任何一种特定美好生活观念的基础上，则是另外一回事 而且还会带来强制的危险。对亚里士多德来说，法律的全部意义，包括城邦的目的就在于塑造公民的性格，在于培养公民的美德，在于引导公民发展其卓越品性，在于提供某种美好生活的可能。<br>麦金太尔的德性理论包括如下基本内容：一、当代的道德危机和道德理论危机，二、西方的德性传统，三、德性论。麦金泰尔依据他的这个实践概念对“德性”进行界定，他说，“一种德性是一种获得性品质，这种德性的拥有和践行，使我们能够获得对实践而言的内在利益，缺乏这种德性，就无从获得这些利益。”由此，可以看到他把德性与实践的关系看成是内在不可分割的关系。有着内在利益的任何实践和实践的卓越标准都必须把德性作为必要成份而包括进去。善与实践是内在统一的。</p><hr><h2 id="22-《我们的忠诚在哪里》"><a href="#22-《我们的忠诚在哪里》" class="headerlink" title="22.《我们的忠诚在哪里》"></a>22.《我们的忠诚在哪里》</h2><p>一些基本的道德义务，这些义务是源自于共同体成员的责任，正是这样的责任构成了我们的身份。如何来判断一个人所应尽的义务的是否正确，我们可以从他的目的是否公正看出，这里我们要面对一个严肃的问题。如果我们接受集体这种概念，我们是否应该坚定的认为，公正是与正确相联系的，不管一个特殊的群体或者传统都意味着公正，包括那些南方隔离主义者，这是重要的区别两种不同的方法，公正可以与正确具有联系，一种是相对论这种方法：去想这事是正确，去想这事是公正的，看看我们所推广的价值，在任何一个被给定的社会群体，与给定的时间，不要以外界标准来判断他们，通过替代从而建立公正，按照公正去理解一种特殊的传统。</p><hr><h2 id="23-《辩论同性婚姻》"><a href="#23-《辩论同性婚姻》" class="headerlink" title="23.《辩论同性婚姻》"></a>23.《辩论同性婚姻》</h2><p>如果公正的原则取决于权利服务的终点是否有道德或内在的价值。社会怎样处理不同人对“好”持有不同的想法和观念？我们做为人类是有义务的，像是普遍性义务。如果我们来执行忠诚那肯定会有主从关系，越来越多的特殊性，那么我们肯定会对朋友和陌生人进行区别对待，这些都应在观念上被克服，过份的关注你的有钱朋友也将视做一种妒忌，这是从普遍大众观注度得出的一种测量人与人之间的距离方式。米尔认为：人类行为的唯一目的是求得幸福，所以对幸福的促进就成为判断人的一切行为的标准。</p><hr><h2 id="24-《美好生活》"><a href="#24-《美好生活》" class="headerlink" title="24.《美好生活》"></a>24.《美好生活》</h2><p>Sandel作总结时指出，我们作为个体，可能永远不会同意许多道德哲学问题的争论点。不过他认为，一方面，关于这些问题的辩论是不可避免的。另一方面，这给我们提供了一个更好地了解他人价值观的好机会。我们一直都生活 在这些问题的回答中。 在我们的公共生活中，在我们的私人生活中， 即使有时候这些问题无法回答，但我们还是无法回避哲学。开始的时候，谈到了康德的一个观点，即“怀疑是人类理性的休憩之处。怀疑让理性能反省 其教条式的漫游旅程，但怀疑也并非是永久的安身之处。<br>要做到尊重其他公民的道德和宗教信仰，还有另外一种方法， 不是漠视他们，而是与之交流。对他们予以关注有的时候还需要与之争论。有的时候则需要聆听和学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;此文引用剽窃自互联网&lt;/p&gt;
&lt;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>娱乐至死 | 如何远离手机 | 阅读</title>
    <link href="https://blog.502.li/archives/amusing-ourselves-to-death-reading-notes.html"/>
    <id>https://blog.502.li/archives/amusing-ourselves-to-death-reading-notes.html</id>
    <published>2019-11-20T05:00:00.000Z</published>
    <updated>2019-12-06T07:40:26.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul><li>2019-11-20 初稿</li></ul><p>未完成，继续更新</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>十一国庆回家的时候，见到七岁大的外甥已经戴上眼镜了。最主要是因为使用手机和平板电脑等时间太长，从而导致了散光，必须要戴眼镜才行。真的，整个国庆假期因为这件事儿心里难受了好几天。回来后也一直在思考如今的电子设备究竟给我们带来了什么？</p><p>大概思考了很久，这篇文章谈论的内容也比较多而杂，主要还是概括开讲以下几点：</p><ul><li>《娱乐至死》读书摘抄和思考总结</li><li>《浅薄：互联网如何毒化了我们的大脑》</li><li>短视频的危害</li><li>手机依赖症的表现</li><li>如何摆脱手机依赖症</li><li>广告如何使人不幸福的</li><li>碎片化阅读专注力</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;更新日志&quot;&gt;&lt;a href=&quot;#更新日志&quot;
        
      
    
    </summary>
    
    
      <category term="阅读" scheme="https://blog.502.li/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>2019 年读书笔记和思考</title>
    <link href="https://blog.502.li/archives/2019-reading-notes.html"/>
    <id>https://blog.502.li/archives/2019-reading-notes.html</id>
    <published>2019-11-10T05:00:00.000Z</published>
    <updated>2019-12-06T07:40:26.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul><li>2019-11-10 初步开始写</li><li>2019-11-30 补充漫画部分</li><li>2019-12-01 补充《童年的消逝》部分</li></ul><p>会持续更新到这个月的最后一天，12 月 31 号那天再发一遍</p><h2 id="我青年时代就读过😂"><a href="#我青年时代就读过😂" class="headerlink" title="我青年时代就读过😂"></a>我青年时代就读过😂</h2><p><del>没读过西游记、也没读过马可波罗游记、更没读过左丘明和左传</del></p><p>先满足一下虚荣心😊，晒一下昨天（11月30日）<del>新买</del>捡垃圾买的 Kindle Oasis 2</p><p><img src="../img/image-20191201200537133.png" alt="image-20191201200537133"></p> <blockquote class="twitter-tweet"><p lang="zh" dir="ltr">啦啦啦，到手啦， 1250￥ 成交，激活时间是 去年九月份，还有半年多的基本部件质保。<br><br>第三个 Kindle 😂 ，从 kindle 入门版到 Kindle Paperwhite3 再到今天的 Kindle Oasis 2。使用体验就是入门版能用，KP3 够用，KO2 满足。果真 KO2 无论在阅读体验和速度上都要比 KP3 高到不知道哪里去了。😂 <a href="https://t.co/CxhB9jKZlE" target="_blank" rel="noopener">https://t.co/CxhB9jKZlE</a> <a href="https://t.co/OYOh4WUr0z" target="_blank" rel="noopener">pic.twitter.com/OYOh4WUr0z</a></p>&mdash; 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1200678601324032000?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">November 30, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> <h3 id="致读者"><a href="#致读者" class="headerlink" title="致读者"></a>致读者</h3><p>每本书大概可以分为作者、简介、读后感、摘抄四个主要的部分。其中摘抄部分全部提取自我的 Kindle 标注，把自己喜欢的一些段落和句子分享给大家，我相信你会为其中的几句而吸引住，勾引读者们对这本书的兴趣。</p><p>摘抄最主要的目的是提醒自己回顾一下读过的书，通过这些摘抄就能回忆起整本书贯穿的内容，其次摘抄也是自己平时所思考的源泉，就像高中时自己写的一本本的阅读摘抄本一样。都值得自己反复咀嚼阅读思考。感觉 Kindle 这个功能非常棒，代替了我读纸质书时抄在笔记本上的功能😂。每隔一段时间就反复读一读摘抄的内容，从而复习一下读过的书。</p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><h3 id="1-《1984》"><a href="#1-《1984》" class="headerlink" title="1.《1984》"></a>1.《1984》</h3><h4 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h4><ul><li>[英] 乔治·奥威尔</li></ul><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>《1984》是一部杰出的政治寓言小说，也是一部幻想小说。作品刻画了人类在极权主义社会的生存状态，有若一个永不褪色的警示标签，警醒世人提防这种预想中的黑暗成为现实。历经几十年，其生命力益显强大，被誉为20世纪影响最为深远的文学经典之一。</p><p><del>引用</del>剽窃自豆瓣</p></blockquote><h4 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h4><p>2017 年的时候读过一遍，今年的时候是读的第二遍。</p><p>我很喜欢这本书，因为我们就生活在一个 1984 般的社会，所以能在书里找到很多现实中的原型。<br>对未来充满希望的人，往往对历史一无所知，与那些觉着国家越来越富强，祖国越来越繁荣，生活越来越美好的人不同。读完这本书，我觉着未来必定是反乌托邦式的极权社会，一个 1984 和娱乐至死相互交织的社会：无限权力的政府掌控所有资源和技术，人民在征信系统、人工智能、人脸识别、大数据分析、数据挖掘等高科技面前手无缚鸡之力，只能过着娱乐至死般的生活。所有人的思想都整齐划一地被真理部牢牢掌控，任何反对质疑批评质疑的人都要被消灭掉。想过上好日子不是不可以，但你得像胡鞍钢、胡锡进、金灿荣那样对当权者歌功赞德、拍马溜须、谄媚献媚、阿谀奉承才能有立足之地 。或者沉默不语过着蝼蚁一般的生活，每天靠着短视频、假新闻、营销号、娱乐消费等来填补无知和恐惧，在真理部意识形态的控制下放弃对自由的追求等等。那时的人们感到痛苦的不是他们用笑声代替了思考，而是他们不知道自己为什么笑以及为什么不再思考。</p><p>在不受约束的权力面前，即便是家财万贯的国民老公都无法保全自己，何况你我这帮如蝼蚁般的屁民呢。所以推荐去读读这本书吧，你或许能从中找到生活中的一些原型，当 1984 那一天到来时你也不会觉得震惊，也不会觉着无法接受。多读读这本书，去思考一下当今社会的种种问题，当社会主义铁拳砸到你身上的时候你也就不会觉得那么疼了。</p><h4 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄"></a>摘抄</h4><p>下面剽窃摘抄自本书原文，大部分都是从我 kindle 上导出来的标注，因为标注的太多了，所以就挑选几条。</p><ul><li><blockquote><p>  极权最有效的统治术是仇恨教育，塑造一个远在天边的外在敌人，人们就会忘记身边的痛苦。</p></blockquote></li><li><blockquote><p>  眼下，已进入仇恨周活动的第六天，大家都受够了游行、演说、呐喊、颂歌、摇旗、招贴、电影、蜡像、擂鼓、鸣号、跺足、坦克轰鸣、飞机盘旋以及枪炮隆隆的折磨了。6天过后，人们已经亢奋到了极点，对欧亚国的仇恨，也已经到了将近走火入魔的地步。如果让那2000名将于活动最后一天被绞死的欧亚国俘虏落在他们手上，他们一定会像野兽一样把他们撕碎。然而就在这时，大洋国政府突然宣布：交战对象不是欧亚国，而是东亚国，欧亚国实则是他们的盟友。</p></blockquote></li><li><blockquote><p>  他在谩骂老大哥，在诋毁党的专政制度，他要求立即与欧亚国缔结和约，他倡导言论自由、出版自由、集会自由和思想自由，他歇斯底里地奔走呼号：革命已被出卖了！</p></blockquote></li><li><blockquote><p>  “两分钟仇恨”节目开始还不到半分钟，大堂里的一多半人已迫不及待地想把心中的愤懑倾泻出来，开始大喊大叫。电屏上那张洋洋自得的绵羊脸以及欧亚国军队展现出的强大震慑力，让台下的党员坐不住了。此外，戈斯坦的一个眼神或者想法，都会令观众自动迸发出恐惧与愤怒的情绪。他成了比欧亚国或者东亚国更可憎的对象，因为大洋国和任何一国开战都将与另外一国修好。但是，奇怪的是，尽管戈斯坦遭万千人憎恨和唾弃，尽管他的言辞论调每天数以千次地在讲台、电屏、报纸和书上被抵制、粉碎、嘲弄，他的无知也体无完肤地暴露在公众面前，但他的影响力却不降反增。</p></blockquote></li><li><blockquote><p>  这样的表达方式，一定程度上是对老大哥智慧与威严的赞美，同时也是一种自我催眠，人们故意用这样有节奏的拍子来抹杀内心理性的波澜。</p></blockquote></li><li><blockquote><p>  致未来、过去以及思想自由的时代：人人各不相同，不再孤寂一生。献给真理永存的时代，献给事情既已发生而无需篡改的时代。我们这群活在没有自由可言、孤苦潦倒的岁月的人，活在老大哥及双重思想阴影下的人——向你们致敬！</p></blockquote></li><li><blockquote><p>  如果所有人都听信党这别有用心的谎言，如果所有记录都如是记载这谎言，那么这谎言就会顺理成章地变成历史，变成真理了。于是党的口号，也就变成这样：“谁主宰历史，谁就主宰未来；谁主宰现在，谁就主宰历史。”如此一来，历史也就不容更改了，其实这里的历史就其本质来说，早已被党大肆篡改过了。现在正确的事情，将来也一定是正确的，就是这么一个简单的道理。如此情形之下，你要做的无非只能是顺从所谓的历史，战胜你顽固的记忆罢了。这就是他们所谓的“现实控制”，新语美其名曰“双重思想”。</p></blockquote></li><li><blockquote><p>明明知道，却佯装不知；本来对事实心知肚明，去偏要费尽心机去编造谎言；明知两种观点水火不容，却硬要把它们捏合在一起，相信其必能共存共荣；本来已合乎逻辑，却偏偏用逻辑推翻逻辑；明明批判道德，却转而吹嘘道德；民主已是空谈，却偏偏要做民主的守护者；明明已忘却该忘却的一切，却偏偏在需要时把它捡起来，然后在不需要时再把它丢出去。总之，最重要的是将做法用于做法本身——这就是双重思想玄之又玄的地方：有意识地进入无意识状态，然后对刚才的自我催眠装作一无所知，统统抛于脑后。</p></blockquote></li><li><blockquote><p>  不用说，将双重思想运用到极致的人，恰恰是那些发明双重思想且深知自己在进行一系列有预谋的精神欺骗的人。在我们现今的社会，对实际情况最了如指掌的人，恰恰是那些背离实际看待世界的人。一般而言，他们对世界认识得越透彻，对民众的欺骗与蛊惑就越多，他们显得越聪明，做起事来便也越不靠谱。</p></blockquote></li></ul><h3 id="2-《-如果沒有今天，明天会不会有昨天？-》"><a href="#2-《-如果沒有今天，明天会不会有昨天？-》" class="headerlink" title="2.《 如果沒有今天，明天会不会有昨天？ 》"></a>2.《 如果沒有今天，明天会不会有昨天？ 》</h3><h4 id="作者-1"><a href="#作者-1" class="headerlink" title="作者"></a>作者</h4><ul><li>[瑞士] 伊夫·博萨尔特</li></ul><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>这本书是 B 站 UP 主 兔肉菌推荐的</p><h4 id="读后感-1"><a href="#读后感-1" class="headerlink" title="读后感"></a>读后感</h4><h4 id="摘抄-1"><a href="#摘抄-1" class="headerlink" title="摘抄"></a>摘抄</h4><h3 id="3-《开放社会与敌人》"><a href="#3-《开放社会与敌人》" class="headerlink" title="3.《开放社会与敌人》"></a>3.《开放社会与敌人》</h3><h4 id="作者-2"><a href="#作者-2" class="headerlink" title="作者"></a>作者</h4><ul><li>[英] 卡尔·波普尔</li></ul><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p> 这本书与哈耶克的《通往奴役之路》齐名，是战后反思极权主义、整体主义和法西斯主义等造成人类大灾难的思想根源的力作，更为战后西方社会走出无约束资本主义的渐进改良提供了思想依据。</p><blockquote><p> 波普尔在二战时期所写的这本书首先无疑与他当时的处境密切相关。该书第二版序言开篇即指出，“虽然本书的大量内容在较早的日子就形成了，但最终下定决心写这本书却是在1938年 3 月我接到奥地利被占领消息的那个日子。写作的日期持续到1943年”。20世纪上半叶，整个西方世界处于前所未有的转型阵痛期。马克思和狄更斯笔下的“无约束的资本主义” 因其复杂的内在矛盾而难以为继，在世界大战和经济大萧条中风雨飘摇，在共产主义、社会民主主义和法西斯主义等思潮、运动乃至暴行之间左冲右突、迂回折冲。法西斯主义的暴行促使他对纳粹思想根源进行了深入的检讨和批判。正因为这一背景，波普尔将这本书定位为“一部政治哲学和历史哲学的批判性导言，也是对某些社会重建原则的审查”。</p></blockquote><h4 id="读后感-2"><a href="#读后感-2" class="headerlink" title="读后感"></a>读后感</h4><h4 id="摘抄-2"><a href="#摘抄-2" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote></blockquote></li></ul><h3 id="4-《历史决定论的贫困》"><a href="#4-《历史决定论的贫困》" class="headerlink" title="4.《历史决定论的贫困》"></a>4.《历史决定论的贫困》</h3><h4 id="作者-3"><a href="#作者-3" class="headerlink" title="作者"></a>作者</h4><ul><li>[英] 卡尔·波普尔</li></ul><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><h4 id="读后感-3"><a href="#读后感-3" class="headerlink" title="读后感"></a>读后感</h4><h4 id="摘抄-3"><a href="#摘抄-3" class="headerlink" title="摘抄"></a>摘抄</h4><blockquote><p>  为了让读者知道这些最近成果，我拟在这里简单谈谈我对历史决定论的这个反驳。我的论证可以概括为如下五个论题：</p><p>  （1）人类历史的进程受人类知识增长的强烈影响。（即使把我们的思想，包括我们的科学思想看作某种物质发展的副产品的那些人，也不得不承认这个前提的正确性。）</p><p>  （2）我们不可能用合理的或科学的方法来预测我们的科学知识的增长。（这个论断可以由下面概述的理由给予逻辑的证明。）</p><p>  （3）所以，我们不能预测人类历史的未来进程。</p><p>  （4）这就是说，我们必须摈弃理论历史学的可能性，即摈弃与理论物理学相当的历史社会科学的可能性。没有一种科学的历史发展埋比能作为预测历史的根据。</p><p>  （5）所以历史决定论方法的基本目的是错误的；历史决定论不能成立。</p></blockquote><h3 id="5-《通往奴役之路》"><a href="#5-《通往奴役之路》" class="headerlink" title="5.《通往奴役之路》"></a>5.《通往奴役之路》</h3><h4 id="作者-4"><a href="#作者-4" class="headerlink" title="作者"></a>作者</h4><ul><li>[英]弗里德利希·奥古斯特·哈耶克</li></ul><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>这本书读了一遍没都很懂😂，所以我先引用一下别人写的简介。</p><blockquote><p>  按作者的说法是一本批判的小册子，而批判的对象就是集体主义的思想倾向。 作者用严密的逻辑粉碎了掩盖在集体主义之上的美好设想，论证了集体主义必将导致独裁，最终走向文化崩坏与经济停滞的结局。 逻辑性很强，读起来不容易。相比之下对自由主义的立论较弱，有些偏理想化</p><p>  核心的论证逻辑其实很简单明了。论证的过程可以分为：</p><ul><li>为什么人们渴望集体主义？</li><li>集体主义为什么走不通？</li><li><p>为什么要坚持自由主义？</p><p>自由主义社会下，人们很容易产生很多不满，包括：</p></li><li><p>政治混乱，每天都争执不休；</p></li><li>经济混乱，自由竞争下存在大量的浪费；</li><li><p>思想混乱，每个人都有一套自己所认为的说辞；</p><p>在这些诸多的混乱下，一个有理想有抱负的人，很容易去试图建立起一种“秩序”， 比如针对经济，希望能够建立起一种目光长远的，和谐有序的经济制度，将浪费最小化， 让每个人从无效的浪费和争执中解放出来，专注于有益的共同的目标。</p><p>这个理想是非常美好的，几百年来不断有思想家或实践家试图践行这一理想，但是却没有一个人或社会能够成功。 其最终要么全面崩溃，要么建成了如人间地狱一般的极权社会。</p><p>到底是哪里错了呢？有些人认为是因为有坏人从中作梗，将原本良善的目标和努力引导到了他的个人野心之上。 而此书对于这一观点也做出了有力的驳斥，并且一针见血地指出，极权主义是集体主义的必然路径。 任何想要发展集体主义的社会，最终必然成为极权社会。而对于任何极权社会，无论当权者用心善良还是险恶， 为了在这一制度中生存下来，他必将会采取一系列在后世看来残忍而又贪婪的举措。</p><p>集体主义必将导致极权社会的理由可以非常简单的概括为：</p></li><li><p>集体主义必然需要为社会确定一个最高目标；</p></li><li>但是每个人心目中的目标其实都不一样，为了确定这个目标，必须先要实现高度集权；</li><li><p>只有极权社会，才有可能压倒众人的个人思想，推行一种整齐划一的规划和经济活动。</p><p>到这里还很容易理解。但是，为什么会说极权社会必然导致文化堕落和经济停滞呢？</p><p>这里需要引入几个前提：</p></li><li><p>社会的发展是不可预测的，没有人能够准确的猜测出未来的发展方向和方式；</p></li><li><p>社会是错综复杂的，每个人都只能看到和他息息相关的一部分信息。</p><p>所以，我们可以得出这样的推论，因为在极权社会中，是由地位最高的人根据自己的见解， 来制定整个社会的经济计划，所以：</p></li><li><p>一切的社会活动，都会按照最终和“最高目标”间的联系，确定优先级；</p></li><li><p>一切的社会活动，必须要有明确的目的和产出，否则会被视为无意义的行为；</p><p>也就是说，计划经济只能对一个“已知的目标”进行计划。 这会导致这种社会制度扼杀一切新形式的创新。 更有甚者，因为没有人能够了解社会的全貌，所以其实这种针对已知目标的“全盘计划”也是不可能的。</p><p>为了能够在现实中真正的实施而不是一纸空话，这些计划一定要是含糊的，留有一定随机应变的空间。 让基层领导可以在具体实施的时候再根据自己的意志去变通。</p><p>而这又得出了一个新的结论，集体主义的社会中，其法制一定是欠缺的。 因为高度计划之下的计划或法令，必须要给实际的权力人物或机构留出足够的变通的空间。 换言之，集体主义的法制一定是定义模糊可自由解释的。</p><p>除了经济和法律的领域之外，集体主义为了推广整齐划一的经济计划， 那么就必须要尽可能的在大多数人的思想中，灌输统一的价值观， 以令大多数人都能够形成一个相对一致的目标。</p><p>很讽刺的是，作者为了攻击苏联体制出版了这书，然后却因为苏联的工业化成功而遭受冷遇， 然而几十年后，此书描述的一切都如同预言一般的在苏联上演，此后各个集体主义国家几乎全部都像魔咒一样的把历史一再重演。</p><p>此处引用  <a href="https://blog.laisky.com/p/serfdom/" target="_blank" rel="noopener">《通往奴役之路》读后感 &amp; 摘抄</a> </p></li></ul></blockquote><h4 id="读后感-4"><a href="#读后感-4" class="headerlink" title="读后感"></a>读后感</h4><p>这本书读起来不容易，逻辑性很强，等以后多读几遍之后，经过大量的思考实践总结之后再专门写一篇博客谈谈读后感。在此推荐各位去读一读另一位的 <a href="https://blog.laisky.com/p/serfdom/" target="_blank" rel="noopener">《通往奴役之路》读后感 &amp; 摘抄 </a> 以及盛洪老师的 <a href="https://www.youtube.com/watch?v=MpJDymF6K-M" target="_blank" rel="noopener">盛洪谈哈耶克之《法、立法与自由》</a> </p><h4 id="摘抄-4"><a href="#摘抄-4" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>  即使共产主义者们也想必多少已为诸如列宁的老友马克斯·伊斯门先生所作的那类宣言所震撼；他自己不得不承认，“斯大林主义与法西斯主义相比，不是更好，而是更坏，更残酷无情、野蛮、不公正、不道德、反民主、无可救药”，并且它“最好被称为超法西斯主义”；当我们发现同一作者承认“在这样一种意义上，斯大林主义就是社会主义，它是国有化和集体化不可预料但却是不可避免的政冶附属物，而这两者都是他赖以建立一个无阶级社会计划的一部分”，②他的结论明显地具有更广泛的意义。</p></blockquote></li><li><blockquote><p>  在俄国住了12年的美国记者W·H·张伯伦先生眼见他的全部理想破灭，便将他在那里和德国、意大利所做的研究总结成这种说法：“社会主义者肯定会证实，至少在其开始时，不是通往自由的道路，而是通往独裁和反独裁、通往最惨烈的内战的道路。以民主手段实现并维持的社会主义，看来确实属于乌托邦世界。</p></blockquote></li><li><blockquote><p>  马克思主义已经导致了法西斯主义和民族社会主义，因为就其全部本质而言，它就是法西斯主义和民族社会主义”。</p></blockquote></li><li><blockquote><p>  人们从近年来的出版物中，可以挑选出许多有能力做出判断的人所作出的其它类似叙述，特别是由那种人所作的叙述，他们作为现在的极权主义国家的公民，亲历了这种转变，他们的经验迫使他们对许多珍爱的信念加以修正。</p></blockquote></li><li><blockquote><p>  通过马克思主义可以达到自由与平等的信念的完全崩溃，已经迫使俄国走上德国一直在遵循的相同道路，即通往极权主义的、纯粹消极的、非经济的、不自由不平等的社会。这等于说共产主义和法西斯主义本质上是相同的。法西斯主义是在共产主义已被证实为一种幻想之后所达到的一个阶段，而在斯大林主义的俄国和希特勒之前的德国，共产主义已经同样被证实是一种幻想。</p></blockquote></li><li><blockquote><p>  在这个意义上，社会主义意味着废除私有企业，废除生产资料私有制，创造一种“计划经济”体制，在这种体制中，中央的计划机构取代了为利润而工作的企业家。</p></blockquote></li><li><blockquote><p>  社会主义不仅是集体主义或“计划”中最最重要的一种，而且正是社会主义劝说具有自由主义思想的人们再一次屈从对经济生活的管辖，而这种管辖他们曾推翻过，因为照亚当·斯密的说法，这使政府处于“为了维持自身，他们有责任实行压迫和专制”①的地位。</p></blockquote></li><li><blockquote><p>  问题在于，出于这个目的，强制力量的控制者是否应该将自己限制于笼统地创造条件，以便最充分地发挥每个人的知识和创造力，使他们能成功地做出计划，或者为了合理地利用资源，我们是否必须根据某些有意识构造的“蓝图”对我们的一切活动加以集中的管理和组织。</p></blockquote></li><li><blockquote><p>  任何控制某些商品的价格或数量的企图，都会使竞争失去它有效地协调个人努力的力量，因为这时价格的变化不再显示客观条件的全部有关变化，也不再对个人的行动提供一个可靠的指南。</p></blockquote></li><li><blockquote><p>  成功地将竞争用作社会组织的原则，就排除了对经济生活的某种形式的强制性干预，但它承认有时会有助于其运作的其它形式的强制性干预，甚至还必需某种形式的政府行为。</p></blockquote></li><li><blockquote><p>  法律仅仅承认私有财产和契约自由是根本不够的，它更有赖于对适用于不同事物的财产权的明确限定。对使竞争制度有效运行的种种形态法律制度的系统研究，已经令人痛心地遭到忽视；</p></blockquote></li><li><blockquote><p>  至少可能想见，在一个非常整齐划一的政府和一个教条主义的多数民主的政府统治下，民主制度也许和最坏的独裁制度同样暴虐。但是，我们的要点与其是独裁必然不可避免地消灭了自由，毋宁是计划导致独裁，因为独裁是强制推行各种理想的最有效工具，而且，集中计划要在很大程度成为可能的话，独裁本身是必不可少的。计划与民主之间的冲突只不过起因于这个事实，即对经济活动管理所需的对自由的压制来说，后者是个障碍。但是，只要民主不再是个人自由的保障的话，那么它也可能以某种形式依然存在于极权主义政体之下。一个真正的“无产阶级专政”，即使形式上是民主的，如果它集中管理经济体系的话，可能会和任何专制政体所曾做的一样完全破坏了个人自由。</p></blockquote></li></ul><h3 id="6-《末日时在做什么？有没有空？可以来拯救吗？》"><a href="#6-《末日时在做什么？有没有空？可以来拯救吗？》" class="headerlink" title="6.《末日时在做什么？有没有空？可以来拯救吗？》"></a>6.《末日时在做什么？有没有空？可以来拯救吗？》</h3><h4 id="作者："><a href="#作者：" class="headerlink" title="作者："></a>作者：</h4><ul><li>[日] 枯野瑛</li></ul><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><p>之前看过动画，也是暑假的时候才开始读一下原作的，只不过读完第一部就没心情接着读第二部了。因为第二部的故事主人公都变了，而且第一部的结局读完后很压抑。</p><h3 id="7-《切尔诺贝利的悲鸣》"><a href="#7-《切尔诺贝利的悲鸣》" class="headerlink" title="7.《切尔诺贝利的悲鸣》"></a>7.《切尔诺贝利的悲鸣》</h3><h4 id="作者-5"><a href="#作者-5" class="headerlink" title="作者"></a>作者</h4><ul><li>[白俄] S·A·阿列克谢耶维奇</li></ul><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><blockquote><p>  ★获得2015年诺贝尔文学奖，真实记录切尔诺贝利核灾难事件</p><p>  ★“她的复调书写，是对我们时代的苦难和勇气的纪念。”</p><p>  ★“每一页，都是感人肺腑的故事。”</p><p>  -————————————————————————</p><p>  1986年4月26日，史上最惨烈的反应炉事故发生在切尔诺贝利。这是史上最浩大的悲剧之一。作者访问了上百位受到切尔诺贝利核灾影响的人民，有无辜的居民、消防员、以及那些被征招去清理灾难现场的人员。他们的故事透露出他们至今仍生活在恐惧、愤怒和不安当中。</p><p>  本书将这些访谈以独白的方式呈现，巨细靡遗的写实描绘，使这场悲剧读起来像世界末日的童话。人们坦白地述说着痛苦，细腻的独白让人身历其境却又难以承受。</p><p>  -————————————————————————</p><p>  ★《纽约时报》——每一页都是奇异而残忍的故事，就像那些残留在幸存者身上的辐射。</p><p>  ★《伦敦时报》——如同古希腊悲剧表演的合唱团，本书收录了众人的心声。短期之内，我们恐怕不会再有机会读到这般真实记录愤怒、愚昧、英勇和伤亡的文字。</p><p>  ★《每日电讯报》——从受访者的独白中，阿列克谢耶维奇创造了这样一种历史：无论离这些事件有多远，读者都能感同身受，如有切肤之痛。读完这本书，我才知道切尔诺贝利是欧洲的一场海啸，这场海啸不仅是由我们人类所造成的，而且还永无止尽。如果你对未来抱有好奇心，我强烈推荐这本书。书中的切尔诺贝利是个充满极端与未知的地方，一个现代科技发展造就的戏剧世界。</p><p>  ★《出版人周刊》——口语叙述的历史在脑海中挥之不去，充斥着面对命运时的无奈、艰苦卓绝的勇气，以及浓厚的黑色幽默……如同不可磨灭的X光透视着俄国人的灵魂。</p><p>  ★《国家》杂志——阿列克谢耶维奇的这本杰出著作，忠实地记录着她那些白俄罗斯同胞的生命与死亡。本书终于将在美国上架……这是无与伦比的见证。</p><p>  ★《书目杂志》——书中记录着受污染的世界里骇人的生活。这些典型的故事分别传达出不同的声音：愤怒、恐惧、无知、艰苦、英勇、同情和爱。阿列克谢耶维奇冒着损害健康的风险，深入前线收集这些见证，把故事转化成令人难忘的精辟著作，我们只能期盼书中的灾难不会重现。</p><p>  此处剽窃自豆瓣</p></blockquote><h4 id="读后感-5"><a href="#读后感-5" class="headerlink" title="读后感"></a>读后感</h4><p>五月份的时候 Netflix 上映了切尔诺贝利的纪录片，之后十月份的时候在博客上认识一位博主，在他的博客里发现了这本书，于是就花了一周的时间读完。建议看完 Netflix 上的纪录片再来看看这本书。读这本书的时候，和《一百个人的十年》一样的感受，心中压抑痛苦的心情无法用言语表达。</p><h4 id="摘抄-5"><a href="#摘抄-5" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>  我已经身处险境了<br>  我们现在都身处险境<br>  因为那些机密和谎言<br>  基本上成为了我们的一部分<br>  当真相浮出水面 ，我们不断用谎言覆盖<br>  直到我们都记不起真相是什么<br>  但真相依旧在那里<br>  我们撒的每一个谎言都是对真相的透支，早晚要还<br>  这就是压力管式石墨沸水堆反应堆核心爆炸的原因–谎言<br>  此处引用 HBO 切尔诺贝利纪录片 S1E5</p></blockquote></li><li><blockquote><p>  我看遍了他人的痛苦，但在这里我和他们同样是见证人。这个事件是我人生的一部分，我就活在其中。</p><p>  我们的国家有三百五十颗核弹。人们还没有注意到是从什么时候开始的，却已经活在后核战的时代了。</p><p>  现在，人们因为其他的战争来到这里。上千名俄国难民从亚美尼亚、格鲁吉亚、阿布哈兹、塔吉克斯坦、车臣等地涌入。这些人从有枪声的地方来，来到这片被遗弃的土地。这里还有荒废的房屋尚未被特殊部队掩埋。</p><p>  一共有两千五百万侨胞住在俄国领土外——这已经是一个国家的人口数了——他们无处可归，只能去切尔诺贝利。关于那里的土地、水和空气能够取人性命的传言，对他们来说只是童话故事。这些人有自己的故事，一个古老的故事，他们深信不疑——这个故事是在说人们如何用枪射杀他人。</p><p>  我是在伟大的俄罗斯文学的浸染中长大的，我认为作品的尺度可以更辽阔，所以我把这一段血肉横飞的情节写了下来。但是在隔离区——那是另一个世界，那个世界与外面的世界不同——那些强烈的感受是文学无法形容的。</p><p>  三年来，我四处旅行，在人群里访问：包括在核电厂工作的工人，科学家，前共党官僚，医生，士兵，直升机驾驶员，矿工，难民，迁居的人们。他们都有着不同的命运、职业和个性，但是切尔诺贝利却是他们生命里共同的重心。这些人不过是平凡人，却必须面临最艰难的问题。</p><p>  我时常觉得，简单和呆板的事实，不见得会比人们模糊的感受、传言和想象更接近真相。为什么要强调这些事实呢，这只会掩盖我们的感受而已。从事实当中衍生出的这些感受，以及这些感受的演变过程，才是令我着迷的。我会试着找出这些感受，收集这些感受，并将其仔细保护起来。</p><p>  书中的人已经见过他人未知的事物。我觉得自己像是在记录着未来。</p><p>  斯韦特兰娜·阿列克谢耶维奇</p></blockquote></li></ul><h3 id="8-《一百个人的十年》"><a href="#8-《一百个人的十年》" class="headerlink" title="8.《一百个人的十年》"></a>8.《一百个人的十年》</h3><h4 id="作者：-1"><a href="#作者：-1" class="headerlink" title="作者："></a>作者：</h4><ul><li>冯骥才</li></ul><h4 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h4><blockquote><p>  二十世纪历史将以最沉重的笔墨，即在这人类的两大悲剧：法西斯暴行和“文革”浩劫。凡是这两大劫难的亲身经历者，都在努力忘却它，又无法忘却它。文学家与史学家有各自不同的记载方式：史学家偏重于灾难的史实，文学家偏重于受难者的心灵。本书作者试图以一百个普通中国人在“文革”中的西宁历程的真实记录，显现那场旷古未闻的劫难的真相。</p><p>   口述文学版《一九八四》，也算是当代中国的一代奇书，冯骥才的史学良知与文学功底相得益彰，文学性与纪实性都相当完美，讲述者都带有天津话特色，在“过来人”平静又略带幽默的娓娓道来中极其惊心动魄，揭露了一个民族的黑暗历史，比恐怖小说还恐怖，这才是人性恶与残酷性的百科全书，是让年轻人看清社会真相的暗黑教育手册。</p><p>  此处剽窃自豆瓣</p></blockquote><h4 id="读后感-6"><a href="#读后感-6" class="headerlink" title="读后感"></a>读后感</h4><p>1949 年，《1984》出版问世。1950年乔治奥威尔辞世。他没有想到，和他书中预想的一样。十六年后在东方一个意识形态迥异国家会上演和书中一样的闹剧。这本书是冯骥才先生写的，记录了人类历史上最为惨痛的那场长达十年的灾难。 这本书和《切尔诺贝利的悲鸣》写作风格及其相似，都是以都是以采访纪实的方式分别记录了人类历史上两场灾难（文革浩劫和切尔诺贝利事故）中经历者们的遭遇，都承载着普通人的悲苦命运。</p><p>读这本书的时候，对书中真实记录的那些人的悲惨命运，几次都忍不住落下眼泪。原来神州大地上也经历过如地狱一般的浩劫。十年的文革浩劫扯碎了中华民族自诩上千年忠孝礼义信传统美德的丑陋外皮，彻彻底底地将人性的邪恶赤裸裸地展现出来。学生告密举报老师，亲朋邻里相互揭发，父子反目成仇，比比皆是疯狂，犹如地狱一般的社会。 不禁感叹，作为一个拥有着五千年悠长文明的古国，几千年前的历史都是历历在目，怎么越到近现代视野就越来越模糊了呢？</p><p>读这两本书有一个共感受：绝望无助、愤怒痛恨、压抑沉重的历史让人无法喘息。 历史的过错原本是一宗难得的财富，丢掉这些财富便会陷入新的无知和愚昧。而我们的责任就是将这段历史伴随着人类文明的结晶一代一代传递给未来的后人们，警告他们对自然法则、对生命抱有敬畏之心。 作为中华儿女，我们有责任也有义务铭记这段历史，将这段人类史上悲痛的灾难传递给未来的后辈们。</p><p>我们谴责日本忘记历史的时候，自己有没有反省过当年犯下同样的反人类罪行？ 建议那些喊着“不忘初心牢记使命”口号的人，不妨去重温一下这段历史吧。</p><h4 id="摘抄-6"><a href="#摘抄-6" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote></blockquote></li><li><blockquote><p>   “文革”是我们政治、文化、民族疯疾的总爆发，要理清它绝非一朝一夕之事；而时代 不因某一事件的结束而割断，昨天与今天是非利害的经纬横竖纠缠，究明这一切依然需要勇 气，更需要时间，也许只有后人才能完成。因此本书不奢望绘读者任何聪明的结论，只想让 这些实实在在的事实说话，在重新回顾“文革”经历者心灵的画面时，引起更深的思索。没 有一层深于一层的不浅尝辄止的思索，就无法接近真理性的答案。没有答案的历史是永无平 静的。</p></blockquote></li><li><blockquote><p>  二十世纪历史将以最沉重的笔墨，记载这人类的两大悲剧：法西斯暴行和“文革”浩 劫。凡是这两大劫难的亲身经历者，都在努力忘却它，又无法忘却它。</p></blockquote><blockquote><p>  我常常悲哀地感到，我们的民族过于健忘。“文革”不过十年，已经很少再见提及。那 些曾经笼罩人人脸上的阴影如今在哪里？也许由于上千年封建政治的高压，小百姓习惯用抹 掉记忆的方式对付苦难。但是，如此乐观未必是一个民族的优长，或许是种可爱的愚昧。历 史的过错原本是一宗难得的财富，丢掉这财富便会陷入新的盲目。</p></blockquote><blockquote></blockquote></li><li><blockquote><p>  若要对这数亿人经验过的生活做出宏观的概括，任何个人都 方不能及。我努力做的，只能在我所能接触到的人中间，进行心灵体验上所具独特性的选 择。至于经历本身的独特，无需我去寻找。在无比强大的社会破坏力面前，各种命运的奇迹 都会呈现，再大胆的想象也会相形见细。但我不想收集各种苦难的奇观，只想寻求受难者心 灵的真实。我有意记录普通人的经历，因为只有底层小百姓的真实才是生活本质的真实。只 有爱惜每一根无名小草，每一颗碧绿的生命，才能紧紧拥抱住整个草原，才能深深感受到它 的精神气质，它惊人的忍受力，它求生的渴望，它对美好的不懈追求，它深沉的忧虑，以及 它对大地永无猜疑、近似于愚者的赤诚。</p></blockquote></li><li><blockquote><p>  以我的感受，大人物的经历不管多悲惨，也不能和小百姓们相比。大人物的冤枉总容易解决，小百姓们如果没碰对了人，碰巧了机会，也许很难得到命运的晴天，就像梁山的李老师正好碰上我读过使他冤屈的故事那样。我想，至今天下还有多少人含冤未平，无论是活着还是已经死去的？</p><p>  人民的经历，才是时代的经历。</p></blockquote></li></ul><h3 id="9-《娱乐至死》"><a href="#9-《娱乐至死》" class="headerlink" title="9.《娱乐至死》"></a>9.《娱乐至死》</h3><h4 id="作者：-2"><a href="#作者：-2" class="headerlink" title="作者："></a>作者：</h4><ul><li>[美] 尼尔·波兹曼</li></ul><h4 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h4><blockquote><p>这本书表达了作者对印刷业衰落的叹惋和对全美沉迷电视娱乐的忧心。Neil Postman 认为，不同的媒介会影响公共话语（public discourse）的形态——印刷机统治下的美国，公共话语是思辨的；而在电视娱乐时代，观众被连续、琐碎、无关联的信息洪流冲击，根本无法思考，更别提发表自己的意见了。以新闻节目为例，主持人刚播报完某政治人物因为丑闻被弹劾，立刻就「好，现在来看下一条消息」（<em>Now … this</em>），开始播报某明星要在哪里开演唱会了。设想如果电视节目主持人让观众「停下来思考五分钟」，这是会打击收视率的。更可怕的是，这些碎片化的、反思考的电视节目（尤其是电视广告）不仅对成年人造成冲击，更深深地影响着下一代（看电视长大的一代），甚至是学校。</p><p>这书出版于 1985 年，当时互联网还没有发展起来。2006 年 YouTube 重新定义了电视（tube），2007 年 iPhone 开启了智能手机时代。2010 年之后出生的孩子（一零后？），是真正的移动互联网原住民，他们根本不需要坐到电视机前，而是伸手就可以摸到智能手机和平板电脑，沉浸到碎片化娱乐之中。若是 Neil Postman 老人家看到了 2018 年的互联网娱乐，怕是要气得从坟墓里爬出来吧。</p><p>此处引用自  <a href="https://wzyboy.im/post/1264.html" target="_blank" rel="noopener">wzyboy</a></p></blockquote><h4 id="读后感-7"><a href="#读后感-7" class="headerlink" title="读后感"></a>读后感</h4><p>可以结合作者的另一本书《童年的消逝》来读，作者对批判电视所带来的危害，在当今把电视换成抖音快手这类的短视频也好不过是。在我看来抖音快手短视频就是《娱乐至死》里所批判的电视的升级版。甚至短视频更进一步粉碎了使用者的注意力。所以我极度讨厌这些短视频，他们所带来的都是空荡荡的商业消费。但未来短视频会沦为真理部洗脑宣传一次来控制人民的工具。</p><p>我觉着那些是使用抖音的人都像在吃屎一样，首先字节跳动这种毫无底线的无耻流氓公司宣称 <strong>通讯录不是个人隐私</strong> 。虽然我从不使用今日头条旗下的任何一款产品和服务在此我只想骂一句粗话，草拟玛丽隔壁去年狗娘养的抖音短视频。这种狗娘养的公司比百度还恶毒，没想到在天朝居然那么多人在使用。呵呵，其实每次看到有人在刷抖音短视频就像看到他在吃屎一样，居然吃的那么香。</p><blockquote><p>   据澎湃6月20日报道，用户刘先生认为“今日头条”APP在《用户协议及隐私条款》中未明确将收集用户个人信息，却擅自上传并保存其通讯录，严重侵犯了用户隐私权，违反了信息收集的“合理、必要”原则，请求法院判令被告停止侵权、赔礼道歉并支付精神赔偿金1元。然而在法庭上，今日头条公司却辩称：通讯录并非是原告本人的信息，而是其社会网络成员的信息，不属于个人隐私，不但不应保密，反而需要向他人告示。 </p><p>  此处引用 <a href="https://www.ittime.com.cn/news/news_28229.shtml" target="_blank" rel="noopener">通讯录不属于个人隐私？</a></p></blockquote><h4 id="摘抄-7"><a href="#摘抄-7" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>  电视上会话的表现形式是形象而不是语言。</p></blockquote></li><li><blockquote><p>  电视需要的内容和其他媒体截然不同。电视无法表现政治哲学，电视的形式注定了它同政治哲学是水火不相容的。</p></blockquote></li><li><blockquote><p>  信息、内容，或者如果你愿意，可以称之为构成“今日新闻”的“素材”，在一个缺乏媒介的世界里是不存在的——是不能存在的。</p></blockquote></li><li><blockquote><p>  因为这样两种截然不同的媒介不可能传达同样的思想。随着印刷术影响的减退，政治、宗教、教育和任何其他构成公共事务的领域都要改变其内容，并且用最适用于电视的表达方式去重新定义。</p></blockquote></li><li><blockquote><p>  媒介的形式偏好某些特殊的内容，从而能最终控制文化。</p></blockquote></li><li><blockquote><p>  我们的文化正处于从以文字为中心向以形象为中心转换的过程中，思考一下摩西的训诫对我们也许是有益的。</p></blockquote></li><li><blockquote><p>  某个文化中交流的媒介对于这个文化精神重心和物质重心的形成有着决定性的影响。</p></blockquote></li><li><blockquote><p>  人们怎样看待时间和空间，怎样理解事物和过程，都会受到语言中的语法特征的重要影响</p></blockquote></li><li><blockquote><p>  和语言一样，每一种媒介都为思考、表达思想和抒发情感的方式提供了新的定位，从而创造出独特的话语符号。这就是麦克卢汉所说的“媒介即信息”。但</p></blockquote></li><li><blockquote><p>  分分秒秒的存在不是上帝的意图，也不是大自然的产物，而是人类运用自己创造出来的机械和自己对话的结果。</p></blockquote></li><li><blockquote><p>  因为在一个由分分秒秒组成的世界里，大自然的权威已经被取代了。</p></blockquote></li><li><blockquote><p>  用书面文字记录哲学观点，不是这些观点的终结，而是这些观点的起点</p></blockquote></li><li><blockquote><p>  我们的语言即媒介，我们的媒介即隐喻，我们的隐喻创造了我们的文化的内容。</p></blockquote></li><li><blockquote><p>  首先，我想证明，在印刷机统治下的美国，话语和现在有很大不同——清晰易懂，严肃而有理性；</p></blockquote></li><li><blockquote><p>  在学术界里，出版的文字被赋予的权威性和真实性远远超过口头语言。人们说的话比他们写下来的话要随意。书面文字是作者深思熟虑、反复修改的结果，甚至还经过了专家和编辑的检查。这样的文字更加便于核对或辩驳，并且具有客观的特征。</p><p>  但是，控制你的身体是最低限度的要求。你还必须学会注意书本上文字的形状。你必须看穿它们，这样你才能直接了解这些形状所代表的意思。如果你仅仅专注于文字的形状，那么你就是一个让人不能容忍的低效读者，会被人当作傻子。如果你已经学会了怎样不受外观的干扰去理解意义，那么你就应该采取一种超然而客观的态度，这包括你要能够区分文字的感官愉悦、魅力或奉承语气（如果有的话）和文字所表达的观点之间的逻辑。同时，你还必须能够根据语言的语气去判断作者对于所写内容和读者的态度。换句话说，你必须知道笑话和观点之间的区别。</p></blockquote></li><li><blockquote><p>  18世纪和19世纪的美国也许是有史以来最以铅字为中心的文化，我相信电视创造出来的认识论不仅劣于以铅字为基础的认识论，而且是危险和荒诞的。</p></blockquote></li><li><blockquote><p>  符号环境中的变化和自然环境中的变化一样，开始都是缓慢地累积，然后突然达到了物理学家所说的临界点。</p><p>  在这种情况下，电子媒介决定性地、不可逆转地改变了符号环境的性质。</p><p>  我说的只是以电视为中心的认识论污染了大众交流和相关活动，而不是说它污染了一切。</p></blockquote></li><li><blockquote><p>  电视给那些老弱病残以及在汽车旅馆里饱尝孤独寂寞的人带来了无尽的安慰和快乐。</p></blockquote></li><li><blockquote><p>  印刷书籍比任何其他方式都更有效地把人们从现时现地的统治中解放出来……铅字比实际发生的事实更有威力……存在就是存在于铅字之中：其他的一切都将渐渐地成为虚无。所谓学习就是书本的学习。”</p></blockquote></li><li><blockquote><p>  报纸是知识的源泉， 是现代人每一次对话的灵感来源。</p></blockquote></li><li><blockquote><p>  枪炮的发明使奴隶和贵族得以在战场上平等对峙；印刷术为各阶层的人们打开了同样的信息之门，邮差把知识一视同仁地送到茅屋和宫殿前。</p></blockquote></li><li><blockquote><p>  从一开始到19世纪，美国比任何一个社会都痴迷于铅字以及建立在铅字基础上的演讲术。</p></blockquote></li><li><blockquote><p>  理查德·霍夫施塔特[40]提醒我们，美国是一个由知识分子建立的国家，这些开国元勋都是智者、科学家、学养高深之人，他们中的很多人都精于古典学问，善于借助熟知的历史、政治和法律来解决当时紧迫的问题。</p></blockquote></li><li><blockquote><p>  在书本里，这个世界是严肃的，人们依据理性生活，通过富有逻辑的批评和其他方式不断地完善自己。</p></blockquote></li><li><blockquote><p>  对于他们来说，没有高深的文化程度，要想成为一个成熟的公民是不可能的，这就是为什么美国大多数州将选举年龄定为21岁，为什么杰弗逊认为普及教育是美国最大希望的原因。</p></blockquote></li><li><blockquote><p>  两个世纪以来，美国人用白纸黑字来表明态度、表达思想、制定法律、销售商品、创造文学和宣扬宗教。这一切都是通过印刷术实现的，也正是通过这样的方式，美国才得以跻身于世界优秀文明之林。</p></blockquote></li><li><blockquote><p>  通过生产大量无关的信息，它完全改变了我们所称的“信息—行动比”。 不管是在口头文化还是在印刷术文化中，信息的重要性都在于它可能促成某种行动。</p></blockquote></li><li><blockquote><p>  电报带给我们的是支离破碎的时间和被割裂的注意力。电报的主要力量来自它传播信息的能力，而不是收集信息、解释信息或分析信息。在这方面，电报和印刷术截然相反。</p></blockquote></li><li><blockquote><p>  书籍就是收集、细察和组织分析信息观点的绝好容器。写书、读书、讨论书的内容、判断书的价值（包括书的版面安排），都是需要花费大量时间的。写书是</p></blockquote></li><li><blockquote><p>  电报只适合于传播转瞬即逝的信息，因为会有更多更新的信息很快取代它们。这些信息后浪推前浪地进出于人们的意识，不需要也不容你稍加思索。</p></blockquote></li><li><blockquote><p>  描绘过的世界开始变得无法控制，甚至无法解释了。报纸上一行行有序而连贯的文字渐渐失去了帮助我们获得知识和了解这个世界的能力。</p></blockquote></li><li><blockquote><p>  这种巧合说明现代技术彻底改变了人们对于信息的态度：过去人们是为了解决生活中的问题而搜寻信息，现在是为了让无用的信息派上用场而制造问题。</p></blockquote></li><li><blockquote><p>  我们不再只把电视机放在某些特定的房间里；我们不再怀疑在电视上看到的一切，根本不会意识到电视提供给我们的特殊视角，甚至连“电视是如何影响我们的”这个问题也被我们抛到了九霄云外。</p></blockquote></li><li><blockquote><p>  我们不再只把电视机放在某些特定的房间里；我们不再怀疑在电视上看到的一切，根本不会意识到电视提供给我们的特殊视角，甚至连“电视是如何影响我们的”这个问题也被我们抛到了九霄云外。</p></blockquote></li><li><blockquote><p>  大脑和技术都是物质装置，思想和媒介都是使物质装置派上用场的东西。一旦技术使用了某种特殊的象征符号，在某种特殊的社会环境中找到了自己的位置，或融入到了经济和政治领域中，它就会变成媒介。换句话说，一种技术只是一台机器，媒介是这台机器创造的社会和文化环境。</p></blockquote></li><li><blockquote><p>  在我所指的那些地方，大多数人还没有电视机，拥有电视机的人也只有一台，他们只有一个电视台，他们没有全天24小时播放的电视节目，大多数节目都以推进政府的意识形态和政策为首要目的。</p></blockquote></li><li><blockquote><p>  我们看见的不仅是零散不全的新闻，而且是没有背景、没有结果、没有价值、没有任何严肃性的新闻，也就是说，新闻成了纯粹的娱乐。</p></blockquote></li><li><blockquote><p>  我必须指出，掩藏在电视新闻节目超现实外壳下的是反交流的理论，这种理论以一种抛弃逻辑、理性和秩序的话语为特点。在美学中，这种理论被称为“达达主义”；在哲学中，它被称为“虚无主义”；在精神病学中，它被称为“精神分裂症”；如果用舞台术语来说，它可以被称为“杂耍”。</p></blockquote></li><li><blockquote><p>  假信息并不意味着错误的信息，而是意味着使人产生误解的信息——没有依据、毫无关联、支离破碎或流于表面的信息——这些信息让人产生错觉，以为自己知道了很多事实，其实却离事实的真相越来越远。包装成一种娱乐形式时，它就不可避免地起到了蒙蔽作用。我前面说过，电视新闻节目提供给观众的是娱乐而不是信息，这种情况的严重性不仅在于我们被剥夺了真实的信息，还在于我们正在逐渐失去判断什么是信息的能力。无知是可以补救的，但如果我们把无知当成知识，我们该怎么做呢？</p></blockquote></li><li><blockquote><p>  我的意思是，电视是我们了解公众信息的样板。和早些时候的印刷机一样，电视已经获得了定义新闻存在形式的力量，而且它还决定了我们如何对新闻做出反应。</p></blockquote></li><li><blockquote><p>  通过用图像代替语言，图像广告使感染力成为消费者选择商品的依据，而不再是实践的检验。理性和广告早已背道而驰，我们几乎已经忘记它们之间曾经还存在着某种联系。</p></blockquote></li><li><blockquote><p>  我们要担心的是电视信息的过剩，而不是政府的限制；在公司国家美国传播的信息面前，我们根本无力保护自己，所以这场为自由而战的战斗要在和以往完全不同的阵地上进行。</p></blockquote></li><li><blockquote><p>  它想尽一切办法让我们不断地看电视，但是我们看到的是使信息简单化的一种媒介，它使信息变得没有内容、没有历史、没有语境，也就是说，信息被包装成为娱乐。在美国，我们从来没有缺少过娱乐自己的机会。</p></blockquote></li><li><blockquote><p>  总而言之，如果人民蜕化为被动的受众，而一切公共事务形同杂耍，那么这个民族就会发现自己危在旦夕，文化灭亡的命运就在劫难逃。</p></blockquote></li><li><blockquote><p>  我们的生活经历已经能够让我们认识监狱，并且知道在监狱大门即将关上的时候要奋力反抗。</p></blockquote></li><li><blockquote><p>  但是，如果我们没有听到痛苦的哭声呢？谁会拿起武器去反对娱乐？当严肃的话语变成了玩笑，我们该向谁抱怨，该用什么样的语气抱怨？对于一个因为大笑过度而体力衰竭的文化，我们能有什么救命良方？</p></blockquote></li><li><blockquote><p>  到了这个时候，如果你还不能意识到技术必然会带来社会变迁，还在坚持技术是中性的，仍然认为技术始终是文化的朋友，那么你实在是太愚蠢了。从很多例子中我们已经看出，通讯模式中的技术变化比交通模式中的技术变化更能影响人们的意识形态。把字母带入一种文化，会改变这种文化的认知习惯、社会关系、社会概念、历史和宗教。</p></blockquote></li><li><blockquote><p>  什么是信息？它有哪些不同形式？不同的形式会给我们带来什么不同的知识、智慧和学习方法？每一种形式会产生怎样的精神作用？信息和理性之间的关系是什么？什么样的信息最有利于思维？不同的信息形式是否有不同的道德倾向？信息过剩是什么意思？我们怎么知道存在信息过剩？崭新的信息来源、传播速度、背景和形式要求怎样重新定义重要的文化意义？</p></blockquote></li><li><blockquote><p>  我们正处于教育和灾难的竞赛之中，他不懈地著书强调理解媒介政治和媒介认识论的必要性。最后，他试图在《美丽新世界》中告诉我们，人们感到痛苦的不是他们用笑声代替了思考，而是他们不知道自己为什么笑以及为什么不再思考。</p></blockquote></li></ul><h3 id="10-《浅薄：互联网如何毒化了我们的大脑》"><a href="#10-《浅薄：互联网如何毒化了我们的大脑》" class="headerlink" title="10.《浅薄：互联网如何毒化了我们的大脑》"></a>10.《浅薄：互联网如何毒化了我们的大脑》</h3><h4 id="作者-6"><a href="#作者-6" class="headerlink" title="作者"></a>作者</h4><ul><li>[美] 尼古拉斯·卡尔</li></ul><h4 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h4><blockquote><p> 在我们跟计算机越来越密不可分的过程中，我们越来越多的人生体验通过电脑屏幕上闪烁摇曳、虚无缥缈的符号完成，最大的危险就是我们即将开始丧失我们的人性，牺牲人之所以区别于机器的本质属性。——尼古拉斯•卡尔“谷歌在把我们变傻吗？”当尼古拉斯•卡尔在发表于《大西洋月刊》上赫赫有名的那篇封面文章中提出这个问题的时候，他就开启了人们热切渴望的期盼源泉，让人急于弄清楚互联网是在如何改变我们的。卡尔同时也明确回答了我们这个时代面临的一个重要问题：在我们尽情享受互联网慷慨施舍的过程中，我们正在牺牲深度阅读和深度思考的能力吗？</p></blockquote><h4 id="读后感-8"><a href="#读后感-8" class="headerlink" title="读后感"></a>读后感</h4><p>感觉这本书写的并不好，在大二的时候我们学校图书馆里不小心被我找到了。我记得还是上毛概课的时候我就拿着这本书来读。PS：毛概课实在是太枯燥了，干听都听不进去。所以我就拿别的书来看了😂</p><p>这本书写的不如《娱乐至死》那样薅，没有一个中心论点。一会儿讲谷歌搜索是如何成功崛起的，解析来又接着讲记忆又是如何形成的。内容很杂乱而不如《娱乐至死》那样有一条很明确的论证路线，从信息传播的媒介来对当下电视机对读书多带来的冲击。</p><p>所以这本书不推荐，不如去读一下《娱乐至死》</p><h4 id="摘抄-8"><a href="#摘抄-8" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>  作者指出思维正在碎片化这一基本事实：“互联网多媒体技术融多种不同类型的信息于一屏，从而进一步加剧了内容的碎片化，也进一步分散了我们的注意力。</p></blockquote></li><li><blockquote><p>   “较之历史上所有可以与之相提并论的技术，互联网给我们带来的让人分神的内容实在是太多了。就在互联网向我们呈上信息盛宴的同时，它也把我们带回了彻头彻尾的精力分散的天然状态。” 碎片化使我们的思维无法再“深刻”下去，因为显然，我们不再拥有保持深刻所需要的注意力：“必将对我们的思维方式产生长远影响的一个最大的悖论是：互联网吸引我们的注意力，只是为了分散我们的注意力。”</p></blockquote></li><li><blockquote><p>  　以前我很容易就会沉浸在一本书或者一篇长文当中。观点的论证时而平铺直叙，时而急转直下，二者交织推进，把我的思绪紧紧抓住。即使是索然无味的长篇大论，我也能花上几个小时徜徉其间。但现在这种情形已经很少见了。现在看上两三页，注意力就开始游移不定，我就会感到心绪不宁，思路不清，于是开始找点别的事做。我感觉就像拼命把自己天马行空的思绪拉回到文本上来一样。过去那种自然而然的精读如今已经变成了费力挣扎的苦差事。”</p></blockquote></li><li><blockquote><p>  我当时就陷入沉思，在我们的教育体制内，哪种教材和考试能让小孩子具备这种快速反应下的手眼协调素质呢？我从来不反对我的孩子玩游戏，一个重要原因就是工业化的现代教育对高科技条件下所需“更原始的大脑功能”开发不足，玩游戏可以补充小学教育甚至大学教育在这一关键素质方面的不足。</p></blockquote></li><li><blockquote><p>  既然传媒即信息，媒介的技术性变革会决定性地改变人的思维方式。这件事会不会做过头，结果让媒介技术最终支配了人本身？</p></blockquote></li><li><blockquote><p>  卡尔认为，“信息过载”已经不是虚张声势的提醒，而是令人烦躁不安的事实。这个事实不但在吞噬着你我的注意力，更重要的是我们已经“失去了以前的大脑”</p></blockquote></li><li><blockquote><p>  从纸面转到屏幕，改变的不仅是我们的阅读方式，它还影响了我们投入阅读的专注程度和沉浸在阅读之中的深入程度。</p></blockquote></li><li><blockquote><p>  卡尔认为，古腾堡发明的活字印刷术唤醒了人们，深度阅读随之成了普遍流行的阅读习惯，在这种深度阅读活动中，“寂静是书中含义的一部分，寂静是读者思想的一部分”</p></blockquote></li><li><blockquote><p>  知识记忆的功能，使得人的大脑对博闻强记的依赖迅速减弱；此外，图书馆、书籍所培育出来的“宁静的阅读”和“深邃辽远的对话”，在社交媒体的喧嚣声中，也成为无法还原的田园景象。</p></blockquote></li><li><blockquote><p>  我们已经抛弃了孤独宁静、一心一意、全神贯注的智力传统，而这种智力规范正是书籍赠与我们的。我们已经把自己的命运交到了杂耍者的手上。我们正在彻底颠覆图书好不容易缔造出来的“深阅读”、独处阅读的氛围和神经系统。”</p></blockquote></li><li><blockquote><p>  现在看上两三页，注意力就开始游移不定，我就会感到心绪不宁，思路不清，于是开始找点别的事做。我感觉就像拼命把自己天马行空的思绪拉回到文本上来一样。过去那种自然而然的精读如今已经变成了费力挣扎的苦差事。</p></blockquote></li><li><blockquote><p>  信息过载”的感觉。在那些图书的静默不语中，有一种沉稳宁静的东西，为了等待合适的读者出现，把它们取走，它们愿意一等数年，甚至数十年。那些书用它们布满灰尘的模糊声音跟我窃窃私语：“不要着急，我们哪里也不去。”</p></blockquote></li><li><blockquote><p>  “一旦发现值得记下的内容，随时都可以将其写在适当的位置上”。抄写摘录精彩内容，然后定期进行背诵，有助于牢记不忘。摘录引用的段落可以看做从书页当中采撷的“各种花朵”，它们可以在记忆的页面中保存下来。</p></blockquote></li><li><blockquote><p>  “我们应该效仿蜜蜂。通过各种阅读采集而来的不管是什么东西，我们都应该分别收藏在不同的空间内，因为东西分别存放会更好。然后，我们应该勤勤恳恳地运用所有的聪明才智，把我们品尝过的各种各样的花粉混合起来，将其酿成甜美的蜂蜜。通过这样一种方式，即使外观表象还跟原来一样，其内在本质已经迥然不同于初始状态。</p></blockquote></li><li><blockquote><p>  极大地拓展了“人工记忆”的范围和可用程度。把信息装进自己脑袋的重要性似乎越来越低。在互联网上，无穷无尽的数据可以轻松检索，这项技术的出现不仅引起了我们对记诵的看法进一步的改变，也引起了我们对记忆本身看法的进一步改变。</p></blockquote></li><li><blockquote><p>  只要我们一上网，信息流就会奔涌而来，这不仅会给我们的工作记忆带来过重的负荷，而且还会导致大脑颞叶难以聚精会神地关注任何一件事。</p></blockquote></li><li><blockquote><p>  而且，因为神经通路具有可塑性，我们上网越多，对大脑适应精力分散状态的训练就越多 非常迅速、高效地处理信息，可是注意力不会持续太久。之所以有那么多人觉得即便远离计算机，我们也难以全神贯注，原因就在于此。我们的大脑变得善于遗忘而不善于记忆了。</p></blockquote></li><li><blockquote><p>  由于对网络的使用导致我们在生物记忆中保存信息的难度加大，我们被迫越来越依赖互联网上那个容量巨大、易于检索的人工记忆，哪怕它把我们变成了肤浅的思考者。</p></blockquote></li><li><blockquote><p>  学会如何思考 的真正含义就是要学会训练对思考方式和思考内容加以控制的能力。这就意味着，对于你选择关注的对象以及你如何从经验当中构建意义，你要有足够的意识和了解。”放弃这种控制，就会陷入“无穷无尽的得而复失造成的永恒痛苦”之中。</p></blockquote></li><li><blockquote><p>  网络上把在线数据对应的一个个比特连成一体的超链接完全不同于我们大脑当中的神经突触。网络链接只是个地址，只是些简单的软件标签，它只能引导浏览器载入另一个离散的信息页面。它们根本不具备我们的神经突触所具有的有机性和灵敏性。艾瑞·舒尔曼写道，大脑中的神经连接“并非仅仅提供对记忆的访问路径，从很多方面来讲，它们构成记忆”</p></blockquote></li><li><blockquote><p>  人类文明要保持勃勃生机，就必须在每一代人所有成员的头脑当中重建。记忆外包，文明消亡。</p></blockquote></li></ul><h3 id="11-《学会提问：-批判性思维指南》"><a href="#11-《学会提问：-批判性思维指南》" class="headerlink" title="11.《学会提问： 批判性思维指南》"></a>11.《学会提问： 批判性思维指南》</h3><h4 id="作者-7"><a href="#作者-7" class="headerlink" title="作者"></a>作者</h4><ul><li>[美]托尼·瓦格纳</li></ul><h4 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h4><blockquote><p> 本书作者应用批判性思维领域的最新研究成果，列举科学研究和日常生活中的大量实例，教授人们富有理性、逻辑性和批判性地提出、思考、判断和解决问题的方法。</p></blockquote><h4 id="读后感-9"><a href="#读后感-9" class="headerlink" title="读后感"></a>读后感</h4><p>这本书值得多读几遍，相关笔记去年读的时候写在了纸质日记本上，有空了再整理出来。</p><h4 id="摘抄-9"><a href="#摘抄-9" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>  当面临种种广告或推销时，最好的策略或许就是持怀疑的态度。</p></blockquote></li><li><blockquote><p>  广告公司不仅对我们的担忧和渴望了如指掌，而且他们以专业技能利用我们的担忧和渴望来谋取利益。</p></blockquote></li><li><blockquote><p>  广告人斥巨资用于制造我们新的渴望和新的担忧——并因此创造.</p></blockquote></li><li><blockquote><p>  即购买广告的产品来满足那些渴望或消除那些担忧，以此改善我们的生活。</p></blockquote></li><li><blockquote><p>  别人可以通过文字和图像令我们对从前并不渴望的某物产生渴望，这也许是令人不快的事，但这显然是事实。</p></blockquote></li><li><blockquote><p>  广告中的宣传之所以臭名昭著，不仅因为其模糊性，而且因其模棱两可、误导、夸张有时甚至是低级错误。</p></blockquote></li><li><blockquote><p>  需要记住的是，广告的设计总是为了服务于支付广告费的人，如果广告说得天花乱坠，更需要我们警惕这一点。</p></blockquote></li><li><blockquote><p>  值得强调的是，广告本来就不是用于论证购买产品的合理性的，广告是为了销售产品。</p></blockquote></li><li><blockquote><p>  利益相关方比利益无关方更值得质疑。 ·对信息来源的质疑一般有两类，一类是质疑信息来源的知识或专业技能，一类是质疑信息来源的诚实性、客观性和正确性。</p></blockquote></li><li><blockquote><p>  依然不是。只有在能引发你思考理由这个意义上，广告图片才“给你提供理由”去购买。在任何意义上，图片都不是也不可能是论证。</p></blockquote></li></ul><h3 id="12-《少有人走的路》"><a href="#12-《少有人走的路》" class="headerlink" title="12.《少有人走的路》"></a>12.《少有人走的路》</h3><h4 id="作者：-3"><a href="#作者：-3" class="headerlink" title="作者："></a>作者：</h4><ul><li>[美] M·斯科特·派克</li></ul><h4 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h4><h4 id="读后感-10"><a href="#读后感-10" class="headerlink" title="读后感"></a>读后感</h4><h4 id="摘抄-10"><a href="#摘抄-10" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>  罪恶感就像是一盏灯，有了罪恶感，人才能看清自己身上的“恶”，从而走向善；而逃避罪恶感，不愿意承受良心的谴责，心灵就会一片漆黑。这样的心灵不仅无法燃烧出生命的光芒，还会吹熄别人的灯，扼杀别人的生命力。</p></blockquote></li><li><blockquote><p>  来看心理医生的人大多数都是敢于面对自己内心的人，因为看心理医生的行动本身就证明他们觉得自己有问题，与正常的人不同，他们敢于质疑自己，敢于承认自己的不正常，最后才能变得正常。所以，寻求心理治疗的人是勇敢的人，也是令人敬佩的人。</p></blockquote></li><li><blockquote><p>  在没有正视自己的内心之前，每个人都害怕自己的思想及情感遭到窥视。</p></blockquote></li><li><blockquote><p>  自律是解决人生问题最主要的工具，也是消除人生痛苦最重要的方法。</p></blockquote></li></ul><h3 id="13-《上帝笑了-99-次：哲学悖论里的大思考-》"><a href="#13-《上帝笑了-99-次：哲学悖论里的大思考-》" class="headerlink" title="13.《上帝笑了 99 次：哲学悖论里的大思考 》"></a>13.《上帝笑了 99 次：哲学悖论里的大思考 》</h3><h4 id="作者-8"><a href="#作者-8" class="headerlink" title="作者"></a>作者</h4><ul><li>[英]彼得·凯弗</li></ul><h4 id="简介-12"><a href="#简介-12" class="headerlink" title="简介"></a>简介</h4><blockquote><p> 一只美洲羊驼会坠入爱河吗？机器人能变成人吗？怎样才能不赢得公主青睐？人类一思考，上帝就发笑。在99个奇妙、怪诞、滑稽的问题背后，其实是99个烧脑的哲学、道德、法律领域的经典悖论，也是99道极富挑战性的大思考测试。本书内容覆盖了大多数常见哲学话题，包括形而上学、逻辑学、伦理学、语言哲学、政治哲学、自我认知、人际关系、美学、存在主义等，还配有20多幅漫画插图。在锻炼思维之外，本书也能帮我们建立个性化的哲学知识体系。</p></blockquote><h4 id="读后感-11"><a href="#读后感-11" class="headerlink" title="读后感"></a>读后感</h4><p>这本书和《 如果沒有今天，明天会不会有昨天？ 》一样，里面都是一些思想实验，而这本书里有 99 个思想实验。不过读完后感觉没有《 如果沒有今天，明天会不会有昨天？ 》这本书思考论证的精彩。所以读完《 如果沒有今天，明天会不会有昨天？ 》这本书真的没有必要再看这本书了。</p><p>不过读这本书的时候思考清楚了一件事情 <code>也许无论整体结果如何，忠于原则的行为，都有其本身的道德价值。</code></p><h4 id="摘抄-11"><a href="#摘抄-11" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>  人的生命在经历一段时间后仍是同一条生命—你的价值观、记忆和意愿，你的个性、体征和能力，又是如何玄妙地结合为一个整体的呢？</p></blockquote></li><li><blockquote><p>  对人的尊重，应当包括把他们当作理性的主体来对待，让他们有权同意或不同意自身如何被利用。</p></blockquote></li><li><blockquote><p>  也许无论整体结果如何，忠于原则的行为，都有其本身的道德价值。</p></blockquote></li><li><blockquote><p>  我们的共同理性和共同利益，必将引导我们去看待、接受构成所有公平法则、利益和权利的东西。在无知之幕背后，我们认可了一个容许基本自由的社会，不以无谓的理由歧视个人，并在个人遇到困难时提供救济。这似乎是理性的选择。</p></blockquote></li></ul><h3 id="14-《疯狂的投资：跨越大西洋电缆的商业传奇》"><a href="#14-《疯狂的投资：跨越大西洋电缆的商业传奇》" class="headerlink" title="14.《疯狂的投资：跨越大西洋电缆的商业传奇》"></a>14.《疯狂的投资：跨越大西洋电缆的商业传奇》</h3><h4 id="作者-9"><a href="#作者-9" class="headerlink" title="作者"></a>作者</h4><ul><li>[美]约翰.S.戈登</li></ul><h4 id="简介-13"><a href="#简介-13" class="headerlink" title="简介"></a>简介</h4><p>这本书讲的内容几年前就听说过。高二下学期，在语文课课前十分钟演讲的时候，我们班的一个同学讲过。 赛勒斯·菲尔德铺设第一条跨越大西洋的电缆的故事，而这一条电缆为一个世纪后的互联网地球村打下了坚实的技术基础。 虽然写得有些流水账，虽然是一百多年前的故事，但读起来依然波澜壮阔，总之是一个不错的励志的商业传奇故事。</p><h3 id="15-《乌合之众》"><a href="#15-《乌合之众》" class="headerlink" title="15.《乌合之众》"></a>15.《乌合之众》</h3><h4 id="作者-10"><a href="#作者-10" class="headerlink" title="作者"></a>作者</h4><p>[法] 古斯塔夫·勒庞</p><p>这本书在 2017 年的时候读过一遍，今年暑假回家坐火车的时候拿来读了一路子。</p><h3 id="16-《独裁者手册》"><a href="#16-《独裁者手册》" class="headerlink" title="16.《独裁者手册》"></a>16.《独裁者手册》</h3><h4 id="作者-11"><a href="#作者-11" class="headerlink" title="作者"></a>作者</h4><ul><li><p>[美] 布鲁诺·德·梅斯奎塔</p></li><li><p>[美] 阿拉斯泰尔·史密斯</p></li></ul><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p> 今年年初的时候，在栋叔（软件那些事儿电台博主、绿帽子大学校长、钢管舞演员、滴滴车司机）电报群里见到他推荐的这本书《独裁者手册》。这是一本小册子，内容不多，静下心来 10 个小时就能读完了它。这本书最主要的还是从统治的三个维度来分析专制国家和民主国家的区别，以及一些企业上对管理层权力斗争的原则。介绍一个理解政治的三维视角，即名义选择人、实际选择人、致胜联盟。</p><p>另外读这本书的时候，那一个星期恰好全球最长寿独裁统治者，津巴布韦前总统罗伯特·穆加贝去世 ，这本书中有一个章节专门讲述穆加贝是如何独裁统治的😂。不得不提一句，穆加贝也是中国人民的老朋友好朋友哦😉。呵呵，果然是趣味相投的狐朋狗友，个个都是极权专制独裁暴政的代名词。</p><blockquote><p>   津巴布韦总统埃默森·姆南加古瓦当天通过自己的推特宣布了穆加贝去世的消息。1980年，随着津巴布韦宣告独立，穆加贝登上权力宝座，他在当地被视为独立运动的标志，但他当上总统后公开发表”津巴布韦是我的”“只有上帝才能把我拉下马”的言论，对津巴布韦进行了铁腕统治。据悉，穆加贝平时非常羡慕朝鲜的世袭统治。</p></blockquote><h4 id="摘抄-12"><a href="#摘抄-12" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>   在美国，名义选择人和实际选择人相当紧密地结合在一起。这就是为什么尽管你只是与他人可相互替代的无数选民中的一员，却仍感觉你的那一票很有影响—它有价值，也算数。</p></blockquote></li><li><blockquote><p>  <strong>独裁制：</strong>这个术语在我们这里的真正意思是，政府建立在极少数不可或缺者的基础上，而他们是从数量非常庞大的可相互替代者以及通常相对较少的一群有影响者当中产生出来的。</p><p>  <strong>民主制：</strong>政府建立在数量庞大的不可或缺者和可相互替代者的基础上；同时，有影响者的数量几乎与可相互替代者一样多。</p></blockquote></li><li><blockquote><p>   以不可或缺者、有影响者和可相互替代者这样的概念来看待各类组织的优点是，这些范畴使我们能克制自己，避免在各种政府形式之间武断地划线，宣称这个国家是“民主国家”，那个国家是“专制国家”，或这个国家是大共和国，那个国家是小共和国，也避免了一些历史上主要政治哲学家们持有的一维政治观。政府之间和组织之间更具重要意义和可观察到的行为差异取决于可相互替代者、有影响者和不可或缺者这三个集团的绝对和相对规模。</p></blockquote></li><li><blockquote><p>  任何一个有能力的领导人都希望掌握尽可能多的权力，并尽可能长久地掌握权力。设法利用可相互替代者、有影响者和不可或缺者来达到自己的目的，这就是统治的行为、艺术和科学。</p><p>  民主国家或任何一个致胜联盟很庞大的体系内，通过私人回报的方式来收买忠诚代价太大。钱会被极大摊薄。所以，依赖大型致胜联盟的、较民主的政府趋向于着重把钱花在能增进普遍福利的有效公共政策上，这很接近詹姆斯·麦迪逊倡导的理念。</p><p>  与此形成对照的是，独裁者、君主、军政府领导人以及大部分企业首席执行官只依赖一小撮不可或缺者。正如马基雅维利所言，他们通过大慷公家之慨、以私人回报的方式收买致胜联盟的忠诚，这种统治方式更有成效，尽管这意味着要牺牲广大纳税人或千百万小股民的利益。因此，小型致胜联盟助长了稳定、腐败、以私人物品为导向的体制。</p></blockquote></li><li><blockquote><p>   对一个统治者来说，与其拥有一张让人民可以喂饱自己的更大的饼，永远不如他能够决定谁吃这张饼。对领导人来说，最有效的资金分配方式是让很多人受穷，通过重新分配让挑选出来的支持者发财。</p></blockquote></li><li><blockquote><p>   一名成功的领导人总是把核心支持者的需要置于人民的需要之上。没有他的致胜联盟的支持，一名领导人什么都不是，很快就会被对手横扫出局。但如果领导人的统治权只依赖于少数人，让联盟满意是得花钱的。通常来说，联盟成员获得的酬劳以牺牲社会其他部分的利益为代价。没错，是有一些独裁者让人民生活过得更好而成了名人堂成员。大多数独裁者不这么做。那些不这么做的独裁者将坐在办公室里为了自己和联盟的利益将国家的经济搞得一蹶不振。最终形势发展到足够恶化的地步，导致一些人民开始厌倦身上的重负。他们也会对领导人的生存产生威胁。</p></blockquote></li><li><blockquote><p>  在一个民主国家，抗议相对便宜和简单。人民有集会的自由，事实上这是权利。他们也有很方便的协调组织手段。我们已从先前几章了解到，依赖大型联盟的政府创造了大量公共物品，包括统称为自由的一揽子特殊公共物品，包括新闻自由、言论自由和集会自由。这些自由权利使数量巨大的人民交换对于政府的看法、表达对任何不喜欢政策的反对意见变得容易得多</p><p>  独裁者有两种截然相反的方法应对革命的威胁。他可以提升民主，大大改善人民的待遇，使他们不再想着反叛。他也可以加强专制独裁，让人民的境遇变得更加悲惨，同时一举扼杀人民造反成功的机会。</p></blockquote></li><li><blockquote><p>  <img src="../img/176047.jpg" alt="img"></p></blockquote></li><li><blockquote><p>  尽管诸如言论自由、集会自由、新闻自由这样至关重要的自由权利很便宜就能提供，独裁者们却视之为瘟疫，避之唯恐不及。毫无疑问，民主领导人也巴不得避开这些自由权利，因为正是这些公共物品使得竞争对手组织起来推翻他们变得容易。但依赖大型联盟的领导人无法规避这些自由，因为如果他们无法保证很大数量的人们拥有自由言说、阅读、书写的权利、能够聚到一起自由探讨和辩论，他们将不可能聚集起一个致胜联盟。民主领导人必须倾听选民的声音，回应选民的期望，不然就有别人会上台来做。</p></blockquote></li></ul><h3 id="17-《肠子的小心思》"><a href="#17-《肠子的小心思》" class="headerlink" title="17.《肠子的小心思》"></a>17.《肠子的小心思》</h3><h4 id="作者-12"><a href="#作者-12" class="headerlink" title="作者"></a>作者</h4><ul><li>【德】朱莉娅·恩德斯</li></ul><h4 id="简介-14"><a href="#简介-14" class="headerlink" title="简介"></a>简介</h4><blockquote><p> 《肠子的小心思》是德国图书界的黑马，口嫌体正直的德国人，一面对粑粑说着“不要不要”，一面看得好污好欢乐。原来，德国人觉得理所当然的马桶竟是痔疮的罪魁祸首；如此现代化的今天，蹲坑这种看似原始的行为竟然还在全世界一半以上的地区保留着，而且这才是大便的正确解锁方式；跟肠子相关的事，不仅有趣，还密切关系到人体的健康状况，一个感觉不好的肠道会让我们感到沮丧，而一个健康的、营养良好的肠道会大大地改善我们的情绪……谁能想到这些奇葩欢乐的内容，竟是一位软萌妹子所写，还一举俘获36个国家和地区读者的心。让我们跟着这本新鲜出炉带着屎味的书，一起开启神奇的消化道之旅吧。</p></blockquote><h4 id="读后感-12"><a href="#读后感-12" class="headerlink" title="读后感"></a>读后感</h4><p>这本书用一个字来形容的话就是 <strong>萌</strong> ，是我读过所有科普书籍中最有趣，语言最为幽默的一本书。虽然书名是肠子的小心思，但它包含的内容不仅仅是肠子哦，不要被书名误导了。它是从口到菊花，整个消化系统讲了一遍😂。另外还穿插讲了婴儿刨腹产和自然分娩对婴儿肠道菌落以及免疫系统的影响😂。</p><h4 id="摘抄-13"><a href="#摘抄-13" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>  他们让实验对象吞下一些荧光试剂，然后用不同的姿势上厕所，同时接受X光照射。实验结果如下：一、没错，在蹲坑状态下，肠道确实变得笔直，排便通畅彻底；二、这世界上还真有这么为科学献身的人，吞下荧光剂不说，居然还能忍受拉荧光粑粑时让人全程X光跟拍！我不得不说，这两点都让人印象深刻。</p></blockquote></li><li><blockquote><p>  痔疮和肠道内憩室这样的肠道疾病，还有便秘，似乎只集中爆发于那些习惯用坐便器的国家。肌肉组织松弛并非罪魁祸首，原因另有所在，尤其是对于年轻人来说，很多人发病的原因是肠道受到的压力过大。有些人在压力大、精神紧张的情况下就会绷紧腹肌，有时绷了整整一天自己还对此毫不察觉，痔疮自然不愿意待在压力过大的地方，还是溜到身体外面轻松自在。同理，肠子内部的组织如果不堪压力也只好向外边跑，于是肠壁上冒出一个个灯泡状的外翻小瘤子，就形成了肠内憩室。</p></blockquote></li><li><blockquote><p>  一个朋友在法国度假时给我发了条短信：“法国真是变态，有小偷专门偷高速公路上的马桶，连着三个厕所里的马桶都被偷了！”我忍不住哈哈大笑，因为，一、他居然真的以为法国的蹲坑厕所是被小偷洗劫的结果；二、这让我回想起第一次在法国见到蹲坑时，地上的大洞把我吓得眼泪汪汪、左右为难：亲，在这个坑上面架个马桶就这么难吗？</p><p>  其实没那么夸张啦，坐在马桶上我们也可以达到蹲坑的顺畅排便效果——只要脚下垫个小板凳，上半身微微向前倾，找好角度——成了！就这么简单，现在你又可以在大便的时候读书、折纸或者专心发呆，妈妈再也不用担心你得痔疮了。</p></blockquote></li><li><blockquote><p>  当然不是每个阑尾都会发炎。如果阑尾正常工作的话，危险的病菌应该都会被消灭掉，只有那些好的细菌才会存活下来。换句话说，健康的阑尾里就应该只有精挑细选的优质好细菌啰。美国研究人员威廉·帕克（William Parker）和兰迪·布林格（Randy Bollinger）就是这么想的。他们在2007年提出这个理论，之后又通过实验验证了这个理论。当我们经历了一轮严重腹泻后，肚子里的很多“肠道居民”都会被连带着扫地出门，大肠壁上处处人去楼空，这对于新的菌群来说是抢占地盘的绝佳时机。我们当然不愿意谁抢着就归谁，万一住进来坏人怎么办呀。别怕！根据帕克和布林格的实验结果，这时阑尾会成为救世英雄，它会把自己圈养的菌群放出来，派往大肠各处保卫家园。</p></blockquote></li><li><blockquote><p>  大肠的最后一米负责精确调节体内水和盐分的平衡：残渣中的水分会被重新吸收，剩下的残渣会被“烘焙”成大便。在这里被吸收的水量相当可观，差不多有整整1升。要是少了这一步，我们每天要额外多喝整整一升的水呢。还有，因为大肠调节盐分的结果，我们的大便总是咸的。当然，我可没有鼓励你去尝尝的意思哦。😂</p></blockquote></li><li><blockquote><p>  正常的便便都是屎黄或者屎棕色的。就算我们吃的饭里没有这个颜色的食物，最后拉出来的也还是这个颜色。就好像它的好朋友小便也是，总是一个黄色的调调。这个黄色来自于身体每天都努力生产的重要产品—— 血液。身体每秒钟都有240万个血细胞诞生，但同时也有这么多的血细胞作废—— 血细胞中的红色素先会变成绿色，然后再变成黄色，这个颜色渐变的过程在你撞青了胳膊或者腿的时候就可以观察得到。黄色素的一小部分可以通过小便被排出体外，而大部分则是通过肝脏到达肠道，然后被细菌再加工成棕色。如果便便不是棕黄色的，那你就要引起重视了。</p></blockquote></li><li><blockquote><p>  肠神经注意到了这种不同寻常的情况，它们有点晕了：这是怎么个情况？还是先观察一段时间吧。就算在如此混乱的一天里，肠道还是坚持完成了工作，向我们发出了去厕所的信号，但是因为我们在路上一时不方便去厕所，所以便硬生生地忽视了它的信号，把便便堵在门口。而经常所谓的“一时不方便”，你不如就坦白承认了吧，其实根本就是因为你是“不是我家厕所不能忍星人”。此星球的人不是自己家的厕所一般都不太能坐得下去。最恐怖的是公共厕所，要拿出十二分的勇气才能进去，进去了以后先要花若干时间用厕纸把马桶圈一层一层地垫起来，就这样坐下去的时候基本上还要动用“水上漂”的轻功，坚决不能坐实。要是再硌硬点的连这个都不行。对于此星球的居民来说，旅游简直就是对肠子的惩罚，请你们在旅途中务必找一个你家厕所的代替品，让肠子安静舒心地干完大事。</p></blockquote></li><li><blockquote><p>  新生的小婴儿肚子里面还没几个细菌，理论上来说，给他们输不同血型的血时是不会有排异反应的。（因为小婴儿的血液里会有从妈妈那里得到的抗体，所以医院为了安全起见，一般都用和妈妈同一血型的血液进行输血。）一旦免疫系统和肠道菌群基本发育完成，人们就只能兼容同一种血液类型了。</p></blockquote></li><li><blockquote><p>  我们出生前还在妈妈的子宫里的时候，是完全无菌的。除了和妈妈的互动，9个月以来我们都处于与世隔绝的状态。我们摄取的是妈妈已经消化过了的食物，我们呼吸的氧气妈妈也提前过滤过了。妈妈通过血液把这些食物和氧气传送给我们，而她的血液已经经过了免疫系统的杀菌消毒。我们被羊膜包裹着，外面又套着肌肉发达的子宫，子宫颈又被牢牢密封着。我们就像在一个层层包裹的保险箱里，这里没有寄生虫，没有病毒，没有细菌，没有真菌，更不要说会有第二个人能碰到我们。我们比消毒过的手术台还要干净。</p><p>  这辈子我们再也不会有像在子宫里的时间，那样被保护着，但也是那样的孤独。一旦出生来到这个世界，我们便会立刻融入到熙熙攘攘的众生中去。在这个世界上，每一个大一点的生物都会有至少一种小生物去陪伴它、帮助它，作为回报，这个小生物可以寄居在它身上。一旦我们出生来到这个世界，也会自动遵守这个规律，因为我们的身体结构就是这样设计好了的。我们的细胞表面很适合细菌依附，它们就这样依附着我们，千百年来和我们一起共同进化。</p><p>  一旦保护膜不再密封，哪怕只开了个小口，细菌就立刻浩浩荡荡迁居过来了。我们刚才还是100%由人类细胞组成的，一瞬间就会被数不清的微生物占领，以至于最后我们浑身上下所有的细胞里，只有10%是人类细胞，而剩下的90%都是其他各种微生物的细胞。因为人类的细胞比这些小寄居客的细胞要大太多了，所以我们根本感觉不到自己已经完全被占领了。在我们第一次看妈妈温柔的眼神之前，妈妈子宫里的细菌们已经过来和我们一一打过招呼了。首先打招呼的是阴道里的保护菌，它们是这块圣地的守卫者。它们通过制造酸性物质将其他细菌全部驱赶干净，以确保通向子宫的圣路每向前走一步都更洁净。</p><p>  <img src="../img/PIC.png" alt></p></blockquote></li><li><blockquote><p>  皮肤菌群的自我管理可比产道菌群要松散得多，因为它太容易受到周围环境的影响。通过皮肤接触，这些皮肤上的细菌很可能很快也会出现在小宝宝的肠道里，病原体和其他轻量级危险分子都可以大摇大摆地通过这种方式去逗逗小宝宝的免疫系统，陪它练练手。剖腹产出生的宝宝，他们的肠道菌群需要几个月甚至更长的时间才能调整到正常状态，所以抵抗力相较于顺产的宝宝会弱一些。比如被医院里的细菌感染到的新生儿中，有3/4都是剖腹产出生的。除此之外，剖腹产出生的婴儿以后患过敏症或者哮喘的风险要比顺产的婴儿高不少。不过一项美国的研究表明，如果给剖腹产的新生儿口服一种特定的乳杆菌，可以把他们患过敏的概率降低。正常分娩的婴儿这种担心就要少多了，因为他们在出生的过程中已经在益生菌的圣水中浸泡过了。</p></blockquote></li></ul><h3 id="18-《民主的奇迹：-美国宪法制定的127天-》"><a href="#18-《民主的奇迹：-美国宪法制定的127天-》" class="headerlink" title="18.《民主的奇迹： 美国宪法制定的127天 》"></a>18.《民主的奇迹： 美国宪法制定的127天 》</h3><h4 id="作者-13"><a href="#作者-13" class="headerlink" title="作者"></a>作者</h4><ul><li>[美]凯瑟琳·德林克·鲍恩</li></ul><h4 id="简介-15"><a href="#简介-15" class="headerlink" title="简介"></a>简介</h4><h4 id="摘抄-14"><a href="#摘抄-14" class="headerlink" title="摘抄"></a>摘抄</h4><h3 id="19-《Kubernetes-指南第四版》"><a href="#19-《Kubernetes-指南第四版》" class="headerlink" title="19.《Kubernetes 指南第四版》"></a>19.《Kubernetes 指南第四版》</h3><h3 id="20-《程序员的自我修养：-链接、装载与库-》"><a href="#20-《程序员的自我修养：-链接、装载与库-》" class="headerlink" title="20.《程序员的自我修养： 链接、装载与库 》"></a>20.《程序员的自我修养： 链接、装载与库 》</h3><h4 id="作者：-4"><a href="#作者：-4" class="headerlink" title="作者："></a>作者：</h4><ul><li>俞甲子</li><li>石凡</li><li>潘爱民</li></ul><h3 id="21-《程序员的英语》"><a href="#21-《程序员的英语》" class="headerlink" title="21.《程序员的英语》"></a>21.《程序员的英语》</h3><h4 id="作者-14"><a href="#作者-14" class="headerlink" title="作者"></a>作者</h4><ul><li>[韩]朴栽浒</li><li>[韩]李海永</li></ul><p>这本书是在图灵社区兑换的，反正不要白不要。其实这本书徒有虚名，就是三十多篇阅读理解一样文章，然后拿来帮你分析和短句。就当拿来练练英语阅读理解海星。不过作者排版方面确实很用心。文章引用的链接都是使用的 Google 的短链接，这一点倒是比较方便读者查看浏览引用的那些文章，总之不建议读。</p><h3 id="22-《第二性》"><a href="#22-《第二性》" class="headerlink" title="22.《第二性》"></a>22.《第二性》</h3><h4 id="作者-15"><a href="#作者-15" class="headerlink" title="作者"></a>作者</h4><ul><li>[法] 西蒙娜·德·波伏娃</li></ul><h3 id="23-《过去与未来之间》"><a href="#23-《过去与未来之间》" class="headerlink" title="23.《过去与未来之间》"></a>23.《过去与未来之间》</h3><h4 id="作者-16"><a href="#作者-16" class="headerlink" title="作者"></a>作者</h4><ul><li>[德] 汉娜·阿伦特</li></ul><h3 id="24-《论革命》"><a href="#24-《论革命》" class="headerlink" title="24.《论革命》"></a>24.《论革命》</h3><h4 id="作者-17"><a href="#作者-17" class="headerlink" title="作者"></a>作者</h4><ul><li>[德] 汉娜·阿伦特</li></ul><h4 id="简介-16"><a href="#简介-16" class="headerlink" title="简介"></a>简介</h4><p><img src="../img/image-20191127190459402.png" alt="image-20191127190459402"></p><p>这本书是双十一的时候买的纸质版图书，因为搬家不方便所以毕业后就很少再买纸质书了。Kindle 商店里也有电子版，Kindle  Unlimited 会员可以免费借阅。</p><p>拿到书后大致读了半个小时，刚开始读的时候我觉着这本书和《民主的奇迹》一块看是不错滴。《民主的奇迹》这本书是讲述了美国宪法制定的 128 天的历程。在这当中的历程中对宪法指定的方方面面讲述的都很详细。而《论革命》这本书也讲到了美国宪法的一些方面，但要比《民主的奇迹》讲的更为广泛。不仅仅在书中对比了法国大根名和美国革命的本质，还涉及到一些制度权力等思想。</p><h4 id="摘抄-15"><a href="#摘抄-15" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><img src="../img/image-20191127190849806.png" alt="image-20191127190849806"></li><li><img src="../img/image-20191127190914310.png" alt="image-20191127190914310"></li><li><img src="../img/image-20191127190945249.png" alt="image-20191127190945249"></li><li><img src="../img/image-20191127191005006.png" alt="image-20191127191005006"></li><li><img src="../img/image-20191127191050123.png" alt="image-20191127191050123"></li><li><img src="../img/image-20191127191116424.png" alt="image-20191127191116424"></li></ul><ul><li><p><img src="../img/image-20191127191152146.png" alt="image-20191127191152146"></p></li><li><p><img src="../img/image-20191127191222289.png" alt="image-20191127191222289"></p></li><li><p><img src="../img/image-20191127191308757.png" alt="image-20191127191308757"></p></li><li><p><img src="../img/image-20191127191332749.png" alt="image-20191127191332749"></p></li><li><img src="../img/image-20191127191437853.png" alt="image-20191127191437853"></li></ul><h3 id="25-《极权主义的起源》"><a href="#25-《极权主义的起源》" class="headerlink" title="25.《极权主义的起源》"></a>25.《极权主义的起源》</h3><h4 id="作者-18"><a href="#作者-18" class="headerlink" title="作者"></a>作者</h4><ul><li>[德] 汉娜·阿伦特</li></ul><p>这本书纸质版已经绝版了，淘宝上只能买到影印版，正版的旧书价格至少在 250￥。月末的时候我姐给我买了一本送给我😍。</p><h4 id="简介-17"><a href="#简介-17" class="headerlink" title="简介"></a>简介</h4><blockquote><p> 有关极权主义的起源，阿伦特的分析最具特色之点在于：全面恐怖的极权主义之所以能够大行其道，它所针对的是切断了与他人联系的原子化的个人，“恐怖只有对那些互相隔离的人才能实施绝对统治。”这种“孤独”带来一系列的后果：不能与他人分享自己的感受和经验，从而丧失判断事物的基本常识，将反常视为正常；不能感到和他人呼吸在同一个天地之中，于是造成对于他人莫名其妙的仇恨，感到这个世界正在联合起来反对自己，同时也把自己放到反对一切人的位置上。在感到自身无根、缺少意义的焦虑时，一方面，丧失了对于自己的信心，失去对于自身行动的任何信心和力量；另一方面，由于某种虚无所造成的真空，十分容易被他人乘虚而入，灌输进“假大空”的意义，以某种反常的、不可思议的举动来证明自己。一个恶性循环就是这样形成了：极权政权想尽一切办法造成这种孤独和虚无；而孤独和虚无又在滋生极权因素和强化极权政府。在阿伦特的表述中，包含了极权政权和这种政权之下的人们互相之间不可分割的看法。 </p></blockquote><p>推荐大家读一读 <a href="https://www.chinesepen.org/blog/archives/90388" target="_blank" rel="noopener">崔卫平：后极权主义及其反抗</a>文章</p><h4 id="读后感-13"><a href="#读后感-13" class="headerlink" title="读后感"></a>读后感</h4><p>到目前为止我仅仅读完了三十多页的序言，不过读完序言也就对这本书有了大致的了解。这本书大概 500 多页，以我的读书进度大概需要两周的时间。所以要放到 2020 年再去写读后感和摘抄了。</p><h3 id="26-《童年的消逝》"><a href="#26-《童年的消逝》" class="headerlink" title="26.《童年的消逝》"></a>26.《童年的消逝》</h3><h4 id="作者-19"><a href="#作者-19" class="headerlink" title="作者"></a>作者</h4><ul><li>[美] 尼尔·波兹曼</li></ul><h4 id="简介-18"><a href="#简介-18" class="headerlink" title="简介"></a>简介</h4><p><img src="../img/image-20191127190608896.png" alt="image-20191127190608896"></p><blockquote><p>在《童年的消逝》里，波兹曼运用他对心理学、历史学、语义学和麦克卢汉学说的深刻见解以及常识，非常有说服力地阐述了一个触目惊心而且颇具独创的论题，即童年的诞生，是因为新的印刷媒介在儿童和成人之间强加了一些分界线，而在电视之类媒体的猛烈攻击下分界线变得越来越模糊，成人的性秘密和暴力问题转变为娱乐，新闻和广告定位在10岁孩子的智力水平。这也是一份内容翔实、令人震惊的警世书。</p></blockquote><p><img src="../img/image-20191127190621622.png" alt="image-20191127190621622"></p><h4 id="读后感-14"><a href="#读后感-14" class="headerlink" title="读后感"></a>读后感</h4><p>在书中作者通过历史论证了<code>童年的概念是文艺复兴的伟大发明之一</code>，也许是最具人性的一个发明。我感觉童年的诞生与印刷媒介之间的联系有些牵强了，或许是我知识水平不足，回头再多读几遍。</p><p>乔治•奥威尔曾在《一九八四》中预言人们将会遭受外来压迫的奴役，失去自由，我们的文化成为受制文化，赫胥黎则在《美丽新世界》中表达了另外一种忧虑，人们会渐渐爱上压迫，崇拜那些使他们丧失思考能力的工业技术。读完《娱乐至死》与《童年的消逝》 后我觉着未来能成为现实的是 1984 和娱乐至死相互交织的社会。尤其是对于某些摸着石头过河的国家来说，当前的现状也正是 1984 和娱乐至死共同存在的社会。不关心政治的人岁月静好地刷着抖音短视频，逛着淘宝看这电影娱乐消费觉着自己生活在岁月静好的美好社会。而遭遇过社会主义铁拳打击的人在对这个社会痛恨和绝望的同时也依靠着被真理部牢牢掌控的媒体所洗脑控制。</p><p>抱歉，扯得有点远了😝。其实我对抖音快手短视频有一种近乎疯狂的憎恨，在我看来，抖音记录的不是生活，而是空荡荡无知的内心。所以我一向抵制短视频，并对短视频文化憎恶痛恨。</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">在公交车和地铁上见到小学生刷短视频越来越多了。<br>小孩儿也变得和大人一样习惯了刷短视频，沉浸到碎片化娱乐之中。若是 Neil Postman 老人家看到了如今男女老少都碰着手机刷短视频的移动互联网时代，怕是要气得从坟墓里爬出来，棺材板都压不住了吧。<a href="https://twitter.com/hashtag/%E7%AB%A5%E5%B9%B4%E7%9A%84%E6%B6%88%E9%80%9D?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#童年的消逝</a> <a href="https://t.co/durMqylvkd" target="_blank" rel="noopener">https://t.co/durMqylvkd</a> <a href="https://t.co/V5g8q2AE6b" target="_blank" rel="noopener">pic.twitter.com/V5g8q2AE6b</a></p>&mdash; 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1199726295145484288?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">November 27, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>  <h4 id="摘抄-16"><a href="#摘抄-16" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>  童年作为一种社会结构和心理条件，与科学、单一民族的独立国家以及宗教自由一起，大约在16世纪产生，经过不断提炼和培育，延续到我们这个时代。</p><p>  它们大多是通过观察传播媒介如何影响社交过程而产生的一系列推测；尤其是印刷术如何创造了童年，电子媒介又如何使之“消逝”。</p></blockquote></li><li><blockquote><p>  不得不眼睁睁地看着儿童的天真无邪、可塑性和好奇心逐渐退化，然后扭曲成为伪成人的劣等面目，这是令人痛心和尴尬的，而且尤其可悲。</p></blockquote></li><li><blockquote><p>  因此，希腊人发明了“学校”这个概念是毫无疑问的。在希腊语中，“学校”一词的意思是“闲暇”。这反映了一种典型的雅典式的信仰：他们认为闲暇时，一个文明人自然会花时间思考和学习。</p></blockquote></li><li><blockquote><p>  放眼望去，人们不难发现，成人和儿童在行为举止、语言习惯、处世态度和需求欲望上，甚至身体的外表上，越来越难以分辨了。</p></blockquote></li><li><blockquote><p>  希腊人为我们预示了“童年”这个概念。我们常常理所当然地把许多观念的产生看作人类智力开化的结果。对于童年的诞生，我们应当感谢希腊人的贡献。他们虽然没有创造出童年，但是他们已经走得很近了，以至于在2000年以后，当童年产生时，我们便能识别它的希腊之源。</p></blockquote></li><li><blockquote><p>  那就是古代纸莎草纸和羊皮纸的来源变得稀少；若不是那样的话，那么就是严酷的生活现实不允许人们花费精力去生产这些东西。我们都知道，纸张是到了13世纪才出现在中世纪欧洲的。这时，欧洲人立即开始生产纸张。不过，他们不是用手和脚这样古老的方式造纸，而是用水能驱动的工厂来造纸。[17]中世纪一些优秀的大学纷纷建立，与之相呼应的是人们对识字又旧情复燃，这恰好跟引进纸张和生产纸张同时发生。</p></blockquote></li><li><blockquote><p>  罗马教会并不是没有看到工匠识字文化的好处，因为它是一种能够控制数量众多而且多元化的人口的工具，也就是说，它能控制数量众多而且多元化的人民的思想、组织和忠诚。也完全是符合教会的利益的。</p></blockquote></li><li><blockquote><p>  孤立的读者和他自己的眼睛。口腔无须再发声音，读者及其反应跟社会环境脱离开来，读者退回到自己的心灵世界。整个阅读的过程，作者和读者仿佛达成共谋，对抗社会参与和社会意识。简而言之，阅读成为反社会的行为。</p></blockquote></li><li><blockquote><p>  可以说，印刷给予我们自我，使我们以独特的个体来思索和谈话。而这种强化了的自我意识便是最终导致童年开花结果的种子</p></blockquote></li><li><blockquote><p>  哈罗德·英尼斯提出的原则：新的传播技术不仅给予我们新的考虑内容，而且给予我们新的思维方式。书籍的印刷形式创造了一种全新的组织内容的方式，从而推动了一种新的组织思想的方式。印刷书籍所具有的一成不变的线性特点——一句一句排列的序列性，它的分段，按字母顺序的索引，标准化的拼写和语法——导致一种詹姆斯·乔伊斯[29]戏称为“ABC式”的思维习惯，即一种跟排版结构非常相似的意识结构</p></blockquote></li><li><blockquote><p>  我们绝不能低估语言从耳朵转移到眼睛、从口语转移到排版这个过程对人类心理造成的撞击。能够看到自己的语言持久存在、反复印刷，而且以标准的形式出现，这使人类与语言产生了最深厚的关系。</p></blockquote></li><li><blockquote><p>  首先，印刷不仅创造了新的收集数据的方法和来源，而且极大地增加了大陆范围内科学家之间的交流。其次，标准化的印刷形式导致了统一的数学符号，包括用阿拉伯数字取代罗马数字。此外，标准化的印刷大半消除了文本中的模糊不清，并减少了图解、图表、表格和地图上的错误。印刷使直观教具现成可用，这样也使大自然显得更加千篇一律，因此更通俗易懂。</p><p>  自从有了印刷术，成年就变得需要努力才能挣来了。它变成了一个象征性的成就，但不是生物学意义上的成就。自从有了印刷术，未成年人必须通过学习识字、进入印刷排版的世界，才能变成成人。为了达到这个目的，他们必须接受教育。因此，欧洲文明重新创造了学校，从而使童年的概念也变成社会必需的了。</p></blockquote></li><li><blockquote><p>  书本和书本学习的世界几乎算不上我们超越动物本能的胜利；一个识字社会的要求使一种精雕细琢的羞耻感变得非常必要。若稍加引申，我们便可以说，由于印刷将信息和送信人分开，由于印刷创造了一个抽象思维的世界，由于印刷要求身体服从于头脑，由于印刷强调思考的美德，所以，印刷强化了人们对头脑和身体二元性的看法，从而助长了对身体的蔑视。印刷赋予我们的是脱离躯壳的头脑，但却留下了一个我们该如何控制身体的其余部分的问题。羞耻心正是这种控制得以实现的途径。</p></blockquote></li><li><blockquote><p>  电视向人们提供了一个相当原始而又不可抗拒的选择，因为它可以取代印刷文字的线性和序列逻辑的特征，所以往往使文字教育的严谨显得没有意义。</p><p>  电视侵蚀了童年和成年的分界线。这表现在三个方面，而它们都跟电视无法区分信息使用权密切相关：第一，理解电视的形式不需要任何训练；第二，无论对头脑还是行为，电视都没有复杂的要求；第三，电视不能分离观众。借助其他电子的、非印刷的各种媒介，电视又重新创造出14、15世纪就存在的传播条件。</p><p>  例如，希腊悲剧诗人索福克勒斯（Sophocles）对人们企图在电视上“略谈”乱伦会有何种看法？弗洛伊德对人们把心理分析当作杂耍剧又会做何感想？为什么人们本应在心理学家的沙发上和忏悔室里交流的话题，要恬不知耻、堂而皇之地成为公开讨论的话题？</p><p>  羞耻是野蛮行为得以控制的机制，如切斯特顿所认为，它的主要力量来自于围绕着各种行为的神秘感和敬畏感</p></blockquote></li><li><blockquote><p>  儿童之所以好奇，是因为他们还不知道将要知道的东西；成人之所以有权威，主要是因为他们是知识的主要来源。权威和好奇之间的微妙平衡，正是玛格丽特·米德的重要著作《文化与承诺：一项有关代沟问题的研究》的主题。在书中，她指出，我们正在进入一个日新月异、信息公开的世界。在这个世界中，成人已经不能扮演年轻人的导师的角色，因此导致了一种危机，她称之为“信仰危机”。“我相信这种信仰危机，”她写道，“可以归因于……现在长辈对年轻人的经历，没能比年轻人自己有更多的了解。</p><p>  但是我相信，很清楚的是，由于电子媒体肆无忌惮地揭示一切文化秘密，它已对成人的权威和儿童的好奇构成了严重的挑战。在某种程度上，好奇心是儿童的天性，但它的发展却有赖于人们日益清楚地了解通过秩序井然的问题来揭示各种秘密的重要性。已知的世界和未知的世界是通过好奇来连接的，但好奇大半发生在儿童世界，和成人世界是分离的，儿童必须通过提问寻求进入成人的世界。</p><p>  由于媒介将两个世界合二为一，保持秘密所产生的张力在谜底被揭开时势必减弱，所以好奇的演算方法也随之发生了变化。好奇被愤世嫉俗——或者更糟——被狂妄自大所取代。于是，我们的孩子不能依靠有权威的成人，而是依赖不知从哪里来的新闻来获取知识。我们的孩子还没有提问，就被给予一大堆的答案。简言之，我们身边没有儿童了。</p></blockquote></li><li><blockquote><p>  例如，还有购物这样的生存快乐。在儿童还很小的时候，电视就向他们揭示消费主义的快乐和购买几乎任何东西后所产生的满足感：从地板蜡到汽车。到牙买加或夏威夷旅行一次可以消除工作的疲劳；购买克莱斯勒汽车可以提高一个人的社会地位；使用某种洗涤剂有助于提高一个人的能力；使用某种漱口水。了解这些都是令人安慰的。这些都是美国文化给人们的承诺。它们正好迎合了成人在现实生活中的各种动机。儿童3岁时就已经被灌输这样的动机，因为电视欢迎大家一起来分享一切。我并不认为那些是一个成熟意义上的成人的动机。</p></blockquote></li><li><blockquote><p>  我们的孩子比以往任何时候都要消息灵通，究竟是什么意思？他们知道长辈知道的一切又意味着什么？这意味着他们已经变成成人，或者至少像成人一样。用我自己的一个比喻，这意味着当儿童有机会接触到从前密藏的成人信息的果实时，他们已经被逐出儿童这个乐园了。</p><p>  通过政府干预来控制电视，并由此控制可供大家享用的信息内容是可能做到的。其实，在世界上大多数国家，情况正是如此。但是，无论何时，无论何地，只要电视节目不受政府严格的限制，美国的模式就会被仿效。</p></blockquote></li><li><blockquote><p>  自制能力，对延迟的满足感的容忍度，具备抽象、有序思维这样高一级的能力，关注历史的延续性和未来的能力，高度评价说理和等级秩序的能力。由于电子媒介将识字能力推至文化的边缘，进而占据了文化的中心地位，各种不同的态度和性格特征开始受到重视，同时一个缩小了内涵的新的成人定义开始出现。</p></blockquote></li><li><blockquote><p>  电视不能把人的注意力集中到思想上来，因为思想是抽象的、有距离的、复杂的和有秩序的，而电视总是把人的注意力吸引到人物身上，因为人物是具体的、生动的和完整的。</p><p>  这意味着电视已经彻底改变了政治信息的符号形式。在电视时代，政治判断从对提议的知识评判转化为对整个人物形象的直观而情绪化的反映。在电视时代，人们赞成或不赞成这些政客，如同喜欢或不喜欢他们一样。电视重新定义了“正确的政治判断”，它把政治判断从一个逻辑判断转变成了一个审美判断。这是电视的催眠作用，它使人们的理智和情感变得迟钝了。</p><p>  一个节目[5]是一种娱乐，一个虚假和幻想的世界，经小心筹划后拼接在一起以期产生一系列具体的效果。这样可以让观众欢笑、哭泣或目瞪口呆，这就是新闻节目所做的事。</p></blockquote><blockquote></blockquote></li><li><blockquote><p>  也就是说，电视广告已经摒弃了商业主义的一个关键假设，即购买者和行销者都是根据自我利益，经过理性考虑之后达成交易。</p><p>  它们不向消费者提供各种各样的事实，它们提供的是偶像，这样成人和儿童都能以同等的感情投入，同时也避免了逻辑或核实的麻烦。</p><p>  在电视广告寓言里，邪恶的根源是“技术无知”（technological innocence），即对工业进步所带来的种种益处一无所知。这是造成现实生活中不幸福、羞辱和不和谐的主要根源。而且，人们绝不能自满——或者更糟——沾沾自喜。企图简单地生活，不关心技术进步，这样总是很危险的，因为这种人的天真幼稚在那些对技术警觉的人眼里是非常触目惊心的。而那些警觉的人可能是服务员、朋友、邻居或者一个光谱形象，如精灵，它不知从何而来地突然在你的厨房里显现，见证你的懒惰无知。</p><p>  “狂喜”在此是个关键的概念，因为广告寓言极其详细地描绘过形形色色的欣喜若狂，这在任何宗教文献里都不乏其例。在《有斑渍的玻璃器皿的寓言》（The Parable of the Spotted Glassware）里，一个丈夫和一个妻子都认为这种心醉神迷的表情只能用“美化”（beautification）这个词来形容。</p></blockquote></li><li><blockquote><p>  电视以视觉形象的形式而不是语言，来表达大多数的内容，所以，它势必放弃文字阐述，而使用叙事的模式。正因为如此，电视供人娱乐的能力几乎用之不竭。</p></blockquote></li><li><blockquote><p>  唯一具备这种能力的技术是电脑。为了设计电脑编程，人们基本上必须学习一种语言。这意味着人们必须掌握复杂的分析技能，类似于一个完全有文化的人需要具备的技能。这就要求进行特殊的训练。如果人人都需要了解电脑如何运作，如何将它们的世界观强加于我们，如何改变我们对判断的定义，也就是说，如果一个全球性的电脑文化被视为必需，那么，可以想见，年轻人的教育会变得非常重要，年轻人的文化必须与成人文化不同的想法也会被保存下来。</p></blockquote></li><li><blockquote><p>  而且，要保证孩子们努力学习，成为识字有文化的人，出奇地耗费时间，甚至代价昂贵。然而，最具反叛意义的是努力控制子女接触媒介的机会。事实上，要这么做有两种方法：一是限制子女暴露在媒介前的时间；二是仔细监督子女接触的媒介的内容，并持续为他们提供有关媒介内容的主题和价值方面的批评。要做到这两点绝非易事。而且，这么做，需要家长在抚养子女方面付出极大的关注，这是多数家长都不准备做的。</p></blockquote></li><li><blockquote><p>  虽然声称识字文化纯粹是一种恩赐，会让人觉得既天真也不准确，但是书写文字，然后是印刷文字，的确为人类文明带来了一种新的社会组织。它带来了逻辑、科学、教育和礼仪，诚然也带来了戈登森先生所掌管的技术。因此，我们可以说，识字的头脑为识字文化播下了毁灭的种子，因为识字的头脑创造了新的媒介，而这些媒介又使识字文化所依赖的“传统的技能”变得毫无意义。</p></blockquote></li></ul><h3 id="27-《永久记录》"><a href="#27-《永久记录》" class="headerlink" title="27.《永久记录》"></a>27.《永久记录》</h3><h4 id="作者-20"><a href="#作者-20" class="headerlink" title="作者"></a>作者</h4><ul><li>爱德华·斯诺登</li></ul><h4 id="简介-19"><a href="#简介-19" class="headerlink" title="简介"></a>简介</h4><blockquote><p>国安局的逻辑是，收集来的情资一定得储存起来，日后才能方便运用。但没人能预测这些情资何时能派上用场。这样的观念助长国安局的终极目标，那就是将收集、制造的情资永远储存下来，创造出一个完美的记忆库、一份永久的纪录档案。</p></blockquote><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p><img src="../img/image-20191127190747747.png" alt="image-20191127190747747"></p><p>看了斯诺登的推特说他的中文版自传被删除一些敏感的内容，并表示了强烈的抗议😂。真是讽刺，这就是历害国所谓的 <code>四个自信</code> 。呵呵，自信就是删帖封号搞言论审查，呸。对于咱这种叛逆心极强的屁民来说这本书当然要读啦。</p><p>正如斯诺登在书中描述的那样美国政府确实存在大规模监控，但美国人民是有能力反抗政府的是这种严重侵犯人权的行为滴。电子前哨基金会就是一个这样的存在，细数一下美国历史上的有关网络审查的法案，绝大多数无法通过的原因就是，在美国是有像电子前哨基金会以及自由软件基金会这样的而非营利性组织来对抗来自政府和商业公司的监控和审查的。</p><blockquote><p>电子前哨基金会（EFF）告诉联邦上诉法院，必须追究思科公司帮助中国侵犯人权的责任。思科帮助中国建造了防火长城系统，EFF称，思科知道它在美国开发的技术会被专制政府用于侵犯人权，但仍然有意识的帮助中国建造了这套系统。思科只是越来越多的帮助专制政府更有效实施人权侵犯的美欧科技公司之一，EFF认为应该追究这些公司在迫害行为中的责任。<br>此处引用 <a href="https://www.solidot.org/story?sid=46859Yaf" target="_blank" rel="noopener">EFF称必须追究思科帮助中国的责任</a></p></blockquote><blockquote><p>美国麻省地区法院法官 Denise Casper 裁决，美国政府无理由搜查国际游客的手机和笔记本电脑违反了宪法第四修正案。此案由 ACLU 和 EFF 代表 10 名美国居民和 1 名合法永久居民起诉美国政府，他们在入境时被无理由搜查了手机和笔记本电脑。根据这一裁决，美国海关官员现在在搜查游客的设备前需要提供怀疑的正当理由，而游客在跨境时将不用担心政府没有理由就搜查设备上的敏感个人信息。不过美国政府可以对这一裁决提起上诉。<br>此处引用<a href="https://www.solidot.org/story?sid=62589" target="_blank" rel="noopener">法官裁决无理由搜查手机违宪</a></p></blockquote><p>在美国的确存在如斯诺登所描述的大规模监控，但和某些摸着石头过河的国家相比简直就是小巫见大巫。国内社交平台删帖封号早已经是家常便饭，甚至这种人们已经默许了这种删帖封号的行为，早已经在自己心里进行自我审查，无可奈何地适应了删帖封号。但在美国不同的是，人家是有力量反对这种大规模监控的。甚至不惜一切代价阻止政府试图通过某些限制互联网自由的法律。</p><p>在美国，人民是有能力反对这种侵犯人权的大规模监控的，而历害国呢？你在国内听到过反对人脸识别的声音吗？呵呵呵，还对人脸识别、人工智能、实名认证、网络封锁等乐此不疲，拍手称快呢。人家美国人民不仅知道反抗政府来监控和审查自己，而且也知道隐私保护，尊重人权这是一种普世价值，任何政府都无权监控和审查互联网。</p><blockquote><p>Aaron死了以后，Aaron朋友和合作者，哈佛大学法学院教授Laurence Lessig，回忆说，他当年和仅15岁的Aaron 有过一次谈话。Aaron问他：“您刚才讲到网络审查和管制的这些弊病，那您有没有什么实际的方案来解决这些问题呢？”Lessig有点尴尬地说：“没有。我是个学者，我只负责做研究，解决问题不关我的事儿。”Aaron接着问：“您是个学者，所以解决问题不关你的事儿。那，您作为一个公民，又该如何呢？”</p></blockquote><p>人家美国十六七岁的青少年都在思考网络审查和监管的弊病，而历害国呢？</p><h4 id="摘抄-17"><a href="#摘抄-17" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>  唯有对于人民权利的尊重才能衡量一个国家的自由，而我相信这些权利实际上是国家权力的界线，明确界定一个政府到何种程度不得侵犯个人领域或个人自由，在美国革命时期所谓的“自由”，在网络革命时期所谓的“隐私”。</p></blockquote></li><li><blockquote><p>  这些人当中，包括三亿二千万美国同胞，他们日常生活的一举一动都遭到监视，不仅严重违反美国宪法，更是违背自由社会的基本价值。在暗地里，政府掌握全民监视的权力，这种权威就定义上而言，对无辜者的伤害远大于对犯罪者的伤害。</p><p>  在你产生反感、明白网际网络疯狂毒害我们这个时代之前，请谅解，对我来说，当我认识网际网络之时，那是很不一样的东西。网络既是朋友，也是父母，是一个无边界、无限制的社群，既是单一、也是无数的声音，一个已经有人垦殖但尚未遭到剥削的共同边境，各式各样的部落和睦相处，每个成员都能自由选择自己的姓名、历史和风俗习惯。每个人都戴着面具，然而这种多数匿名造就的文化所产生的事实多于造假，因为重点在于创造与合作，而不是商业与竞争。当然这之间也会有冲突，但善意与善念会胜过冲突——而这正是真正的先驱精神。</p></blockquote></li><li><blockquote><p>  便利性的承诺让大家关掉自己的个人网站，因为那需要不断、辛苦的维护，改换成脸书网页和Gmail帐号。所有权的表象让人容易搞错现实。很少人在当下即明白，我们所分享的一切都将不再属于我们。以前电子商务公司因为找不到让我们有兴趣购买的东西以致倒闭，其后继者现在找到可以贩售的新产品了。</p></blockquote></li><li><blockquote><p>父亲坚称，从他的童年到我的童年之间，美国已遗忘这个原则。美国这个国家已变成买新机器取代故障机器比找专家修理来得便宜，而且一定比自己去找零组件设法修理来得便宜。单凭这项事实便几乎保证会出现科技暴政，助纣为虐的不是科技本身，而是每天使用却不了解的所有人。拒绝让自己了解你所依赖的设备运作与维修，即是被动接受暴政及其条件：当你的设备正常运作时，你也正常运作，但是当你的设备故障，你也会故障。你拥有的物品反过来拥有了你。</p></blockquote></li><li><blockquote><p>这台电脑时常陪伴着我，像是我第二个手足或是初恋情人。它在我发展独立自我人格的时刻走进我的生命，让我了解到网络世界无限广阔。这种探索的过程相当刺激，令我有一阵子忽略其他家人与家庭生活。换个说法，我当时正经历叛逆的青春期，只不过这是科技引起的青春期。这令我产生巨大的变化，而各地所有接触电脑的人也都有着同样经历。</p></blockquote></li><li><blockquote><p>随着千禧到来，网络世界变得越来越中心化、集中化，政府与商业力量加速介入这个原本应是对等式的网络（P2P）。但幸好网络有段时期是由人民所拥有、管理并为其服务的，而这段短暂而美好的日子恰巧与我的青少年岁月重叠。网络的目的应该是启发人心，而不是追求赚钱。它的规则应由大家约定俗成且随时更动，而非采取全球一致、剥削性十足的服务性协议。一直到今日，我都认为一九九○年代网络是我经历过最愉悦、最成功的无政府状态。</p></blockquote></li><li><blockquote><p>但在千禧年过后，网络科技变得非常不同：所有记忆必须忠实、身分维持一致，意识形态也得正确。</p><p>所谓的“长大”代表的是你体会到：你的存在受制于成套的规范、仿真两可的规则以及毫无根据的常规。这些规定未经过你的同意便强加在你身上，而且随时随地都有可能改变，甚至在你违反规则时，你才意识到它们的存在。</p></blockquote></li><li><blockquote><p>而这也代表着，我们最终必须得面对自己，纵容屠杀与漤用权力并非专属于美国行政机关与情报单位，而是存在于美国所有民众的心中，包括我个人在内。</p><p>现在回过头来看，我的国家当时可以利用这个机会做出更多的改变。美国可以不要宣称恐怖主义是特定信仰，而是犯罪本身。美国可以利用这个难得时刻巩固强化民主价值、培养抵抗挫折的韧性，同时凝聚各国人民的向心力。 但美国当时却选择开战。</p></blockquote></li><li><blockquote><p>不过删除贴文的可能后果让我心烦意乱，那么做只会徒然强化网络生活一些最腐蚀人心的训诫：没人有犯错空间、凡是犯错者得一辈子为自己的错误负责。我在意的倒不是文字记录是否完美无缺，而是灵魂的完整性。我不想活在一个人人必须假装完美的世界，那样的世界没有我和朋友的容身之处。抹掉在网上的评论，等于抹煞我是谁、我从哪里来、我走了多远。否定年少时候的我，等于否定现在的我的合法性。</p></blockquote></li><li><blockquote><p>既然抹不掉网络上那些令我们丢脸羞愧的言行，我们能做的只有控制自己的反应，看是要为了这些过去自我折磨，还是接受过去带给我们教训，然后成长、前进。 那是我在赋闲蛰伏时期想到的第一件事，你或许称之为原则，尽管执行不易，我仍努力靠它过活。</p></blockquote></li><li><blockquote><p>我成长过程中被灌输的价值，我在网络世界邂逅的理想，全都捣碎在一起成了我现在的思想。我直到即将迈入三十岁之际才终于明白，我所信仰的，我以为自己深信不疑的，大多是年轻时候的印记。</p><p>有一段时间，特别是在我准备入伍阶段，我的世界观就像天真的电玩游戏那样二元对立，电玩世界中善与恶泾渭分明，而且不容怀疑。</p><p>民主绝不是创建在枪杆子上，但也许能靠光纤网络散播。</p></blockquote></li></ul><pre><code>&gt; 求学的时候，我必须背出美国宪法前言，这虽然还留存在我的记忆中，但现在多了网络自由先驱约翰．佩里．巴洛（John Perry Barlow）的《网络空间独立宣言》（A Declaration of the Independence of Cyberspace），同样也用了不言而喻且自我选定的复数名词：“我们要打造人人都能进入的世界，摒除因种族、经济实力、军事力量、家庭背景产生的特权与偏见。我们打造的这个世界，无论何人在何地都能表达自己的信念，即便是多么特立独行，不用担心会被迫噤声或强迫当顺民。”&gt;&gt; </code></pre><ul><li><blockquote><p>凭借Tor的通讯协定，网络流量从一个服务器到另一个服务器创造的路径随机反弹，目的在于取代使用者的身分。实际上没有任何一台服务器能辨识网络流量的来源信息。在天才的眼中，其中有一台服务器知道来源，那是整个服务器链的第一台，但却不知道网络流量去处。更简单来说，第一台链接到Tor网络的服务器称为闸道，知道你是传送要求的人，但因为它无法读取要求，因此对你寻求的信息一无所知。最后一台服务器称为出口，知道你所寻找的内容，却不知道你的身分。 这种分层方式为洋葱路由，因此Tor被称为洋葱路由器。</p><p>就我个人而言，Tor改变我的生命，给我免于被监测的自由，带我回到童年时期的自由。</p></blockquote></li><li><blockquote><p>在这本书出版时，该局能储存情资的时间或许已达数十年。国安局的逻辑是，收集来的情资一定得储存起来，日后才能方便运用。但没人能预测这些情资何时能派上用场。这样的观念助长国安局的终极目标，那就是将收集、制造的情资永远储存下来，创造出一个完美的记忆库、一份永久的纪录档案。</p></blockquote></li><li><blockquote><p>当我读着关于中国的机密资料时，我看到的是美国的倒影。换句话说，中国光明正大对人民做的监控行径，美国可能背地里也对其他国家这么做。</p></blockquote></li><li><blockquote><p>小布什总统在九一一事故后授权国安局展开无数监控，其中最具争议的是“总统监控计划”</p><p>PSP让国安局得以收集美国与境外的电话、网络通讯情资。最引人注意的是，PSP允许国安局不必取得外国情报监控法院（FISC）搜查令便能实施监控。FISC是成立于一九七八年的秘密联邦法院，负责审查情报单位提出的监控要求，借此防范反越南战争与民权运动期间非法监听情事再度上演。</p><p>《纽约时报》披露此消息后引起广大回响，加上美国公民自由联盟（ACLU）在公开法庭质疑PSP违反宪法，小布什政府于是宣称该计划将于二○○七年终止。</p></blockquote></li><li><blockquote><p>如果这些先进愿意赌上自己的工作、家庭与生命，那这背后必定存在比非法监听更严重的状况。</p></blockquote></li><li><blockquote><p>我们的法律通常落后科技至少一个世代，但如今对于通讯内容的保障却高于后设数据，这真是极大的讽刺。事实上，情报单位对于取得后设数据有着更高兴趣，因为这些活动记录能让他们见树又见林，一方面赋予他们分析大量数据的能力、得以拼凑出事物全貌，另一方面又给予他们窥探个人私生活的机会、得以推断这些人的行为模式。简言之，监视者透过后设数据能得知你的所有一切，除了你的大脑在想什么之外。</p></blockquote></li><li><blockquote><p>科技全然不受限制，不像医生必须遵守希波克拉布底誓词。自工业革命以来，学术界、业界、军方与政府的科技人才做出许多决定，这些决定立基于“我们能够做什么”，而非“我们应该做什么”。推动科技进步的人，不太会限制它的应用与使用。</p></blockquote></li><li><blockquote><p>回顾这段历史，不仅令我们更加确信美国情报体系在科技上头的主导优势，更让我们担忧这些技术对于民主统治带来的巨大威胁。距离那时普查已经过一世纪的时间，科技出现惊人进展，但人类的警觉或法律规范却仍远远落后。</p><p>待在日本的这段时间令我恍然大悟。在那时，我真正了解到这些新科技可能造成的危害。若我们这个世代不介入的话，那未来的情况只会更严重。我并不希望看到，当我们终于决定挺身而出时，一切抵抗却是徒劳无功，若真是如此的话，那将是一大悲剧。未来的一代可能得面对充满监控的环境，政府违法监控行为并非偶一为之、针对特定危险目标，而是持续性、无差别地扩及全国民众。这就像是：你说的话逃不过政府耳朵，你做的事逃不过政府法眼，而你的纪录档案永远留存在政府手里。 一旦政府拥有四处收集情报的能力，加上情资得以永久储存的系统，那他们便能随便找个人或团体陷害，反正资料库一定搜寻得到证据（如同我寻找机密档案一样），绝对能替他们安上合适罪名。</p><p>对我来说，政府漤用监控特权，代表的是一个可怕的未来。所有人都遭到完全监控的世界，将变成一个全由电脑自动执法的世界。毕竟，若一个AI装置能够追踪民众违法行径，怎可能让他逃过法律制裁。即使技术上可行，我们也不可能设定一个纵容犯罪的监控程序。</p></blockquote></li><li><blockquote><p>美国基本法的存在，令执法单位更难执行工作。这并不是瑕疵，而是民主的真谛。按照美国法律规定，执法单位理应保护所有国民。当执法单位漤权时，法院应约束并纠正他们的行为，毕竟他们是社会上唯一能够羁押、逮捕民众并使用武力（包括致命武器）的人。而其中最重要的约束是，执法单位不得监控国民在家活动，也不能在未取得搜查令的情况下收集个资。但法律对于公众场所的监控行为宽松许多，其中当然也包含多数人在街头与人行道的活动。</p></blockquote></li><li><blockquote><p>过去十年来，我们看到美国制造一系列的悲剧：阿富汗战争永无止尽、伊拉克政权不断更迭、关押恐怖分子的关塔那摩湾监狱人满为患，美国政府非常规引渡、拷问并发动无人机袭击杀害平民（包括美国民众在内）。而在美国境内，国土安全部严格审查一切事物，每日发布恐攻威胁层级（红色代表严重、橙色高度警戒、黄色则是威胁升高），而自《美国爱国者法案》实施后，公民自由逐渐遭到侵害，讽刺的是，这是我们过去自称誓死捍卫的权利。这些加总的伤害（掌权者违法乱纪）无比巨大且难以逆转，但我们却还在按喇叭、闪车灯举国欢腾庆祝。</p><p>但其实恐惧才是真正的恐怖主义，而乐于编造借口授权使用武力的政治体制则是最大帮凶。比起恐怖主义，美国政客更害怕示弱、背叛自己的政党，或是惹火捐款给他们的支持者（这些人对于承揽政府合约、取得中东石油利益充满兴趣）。因恐惧衍生的政治凌驾于恐惧之上，催生出各种“反恐”作为：无人能敌的美国慌了手脚，行动不受政策规范、公然违反法治精神。在九一一事件后，情报单位的指令向来是“绝不能再出差错”，但这根本是做不到的。过了十年后，我看得更加清楚了。这群政治菁英阶级反复以恐惧作为号召，对应的并非是任何特定威胁或担忧，而是试图操弄情感、将恐惧化为永久性危险，借此合理化政府长久提高警觉的作为、不容民众质疑正当性。</p></blockquote></li><li><blockquote><p>在真正富有正义的社会里，人民才是政府的头家。虽然不同城市的民众各有特定动机与目标，但这群人的共同点在于，他们都拒绝独裁主义、重申“人权与生俱来、不可剥夺”的人道原则。 在独裁的国家，国家拥有权利授与给人民。而在自由国家，人民拥有权利授与给国家。在前者，由于政府的允许，身为国民（subject）的人民才能拥有财产、受教、工作、宗教以及言论的权利。而在后者，人民拥有公民（citizen）身分，同意在一定时间内接受统治，但能定期透过选举等制度更换政府。我认为，独裁统治与自由民主间的差异，才是我们这个时代最主要的意识形态冲突来源，而不是东方与西方间的分歧（这是人为捏造并且充满偏见），或是基督教对决伊斯兰的宗教冲突。</p><p>独裁国家通常都不是法治政府，而是以统治者意见为主。统治者要求国民服从政府，同时对异议分子极具敌意。相反的，自由民主国家不会或很少做出这样的要求，反而是仰赖每位公民自愿担负起保护周遭所有人自由的责任，这是不分种族、肤色、信仰、能力、性倾向或性别的。任何集体保障并非取决于血统而是共识，最终导向平等主义的结果。虽然现实的民主经常无法达到理想状态，但我仍坚信，这是最能“让不同背景的人共同生活、在法律之前人人平等”的统治形式之一。 这种平等不仅由权利组成，更包含自由在内。事实上，民主国家的公民所珍惜的许多权利，在法律上都是以限制的方式来保障。透过限制政府权力创造出来的自由空间，使得这些权利得以存在。举例来说，美国民众之所以拥有言论“自由”，这是因为禁止政府不得制定限制该自由的法律；而新闻“自由”则是禁止政府不得制定法律限缩该自由。同样的，宗教“自由”是禁止政府不得制定确立国教的法律；而和平集会与抗议的“自由”，是禁止政府不得制定任何</p></blockquote></li><li><blockquote><p>说到底，你声称自己不在乎隐私，因为没有事情好隐瞒，这就像是在说，你不在乎言论自由，因为你没有意见。或是，你不在乎新闻自由，因为你不爱阅读。你不在乎宗教自由，因为你不相信神。或是，你不在乎和平集会自由，因为反社会的你天性懒散、害怕人群。以上种种自由，今日对你来说也许不重要，但这不代表明日对你不重要，或对你的邻居不重要，或是对于世界另一端的异议分子不重要。我用手机追踪这群抗议群众的动态，他们希望争取到一点点的自由，而我的国家却对于这些自由必欲除之而后快。</p></blockquote></li><li><blockquote><p>我们不能放任自己受到这样的利用，被利用来对抗未来。我们不能允许自己的资料被用来向我们推销绝对不可以出卖的东西，例如新闻。如果袖手不管，所看到的新闻将只是我们想要的新闻，或是当权者希望全民看到的新闻，而不是必要的坦白共同对话。不能放任我们所受到的全面监控，以之来“计算”我们的公民分数，或是“预测”我们的犯罪行为；我们会受什么教育，会找到什么工作，或是能否受教育或找工作；依据金融、法律和医疗纪录来歧视我们，更别说还有族群或种族，这些都是我们的资料的构成因素。至于个人最私密的资料，我们的基因信息：如果坐视这种信息被用来辨识我们，那么它也会被用来加害我们，甚至修改我们，按照试图控制全民的科技概念，重新塑造我们的人性本质。 当然，以上种种全部都已经发生了。</p></blockquote></li></ul><h3 id="28-《沃兹传：与苹果一起疯狂》"><a href="#28-《沃兹传：与苹果一起疯狂》" class="headerlink" title="28.《沃兹传：与苹果一起疯狂》"></a>28.《沃兹传：与苹果一起疯狂》</h3><h4 id="作者-21"><a href="#作者-21" class="headerlink" title="作者"></a>作者</h4><ul><li>[美] 史蒂夫•沃兹尼亚克（Steve Wozniak）</li><li>[美] 吉娜•史密斯(Gina Smith)</li></ul><h4 id="简介-20"><a href="#简介-20" class="headerlink" title="简介"></a>简介</h4><p>怎么说呢。我觉着我读的每一本书都与我有着千丝万缕的联系。这本书是我上大二的时候读的，那时候只知道苹果的创始人是乔布斯，而不知道另一位沃兹。那时候的确读了很多人的传记，像 Linus 的《只是为了好玩儿》、RMS 的《若为自由故》、互联网之子、 埃里克·斯蒂芬·雷蒙 、奔腾的代码、操作系统革命等。后来听了软件那些事儿上讲的 <a href="https://liuyandong.com/2018/01/20/136/" target="_blank" rel="noopener">苹果双核之史蒂夫•沃兹</a>  又对沃兹有了进一步的熟悉和了解。</p><h4 id="读后感-15"><a href="#读后感-15" class="headerlink" title="读后感"></a>读后感</h4><p>沃兹能取得这么大的成就和他小时候的而家庭教育密不可分。尤其是沃兹父亲工程师的品格深深影响到了沃兹的成长。一个从小就和电子打交道的男孩。</p><p>这本书里搜索 <code>电子</code> 二字的结果竟然有 179 个，可想而知沃兹成长过程中与电子世界是密不可分的。</p><p><img src="../img/image-20191126154018148.png" alt="电子"></p><p>十分建议家长们读一下这本书。应该向沃兹的父亲那样在生活的点点滴滴培养孩子的兴趣。使得小孩从小就知道自己未来要做一个什么样的人，并对这份职业保佑崇高的敬仰。不要再将我们这代人的悲剧发生在下一代人身上，以至于直到上大学选专业都不知道自己要做什么。还有一点就是从现实中给孩子找到乐趣，而不是为了哄孩子就让他们耍手机。</p><p>另外值得一提的是沃兹还是电子前哨基金会的创始人之一</p><blockquote><p> 电子前线基金会，由卡普尔、<a href="https://zh.wikipedia.org/w/index.php?title=约翰·吉尔摩&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">约翰·吉尔摩</a>和巴洛，正式成立于1990年7月10日。初始资金由卡普尔，<a href="https://zh.wikipedia.org/wiki/斯蒂夫·沃兹尼亚克" target="_blank" rel="noopener">斯蒂夫·沃兹尼亚克</a>和一个匿名人士提供</p><p>此处引用<a href="[https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E5%89%8D%E5%93%A8%E5%9F%BA%E9%87%91%E4%BC%9A](https://zh.wikipedia.org/wiki/电子前哨基金会">电子前哨基金会维基百科</a> )</p></blockquote><p>看完这本书想到沃兹是其中之一的创始人一点都不感到意外了，关于电子前哨基金会的事迹，以后我会多写点内容。</p><h4 id="摘抄-18"><a href="#摘抄-18" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>我写这些，是想表明我爸爸对诚信特别重视。他把最高的诚信和道德水平作为人生信仰。这是他教给我的最重要的东西，他总是告诉我，在法庭宣誓后撒谎掩饰罪行比杀人放火这样的恶行更为罪恶。这对我影响深远，直到今天，我也从不撒谎。即使是再小的事情我也绝不撒谎，除非你算上恶作剧。但我认为恶作剧并不算谎言，它们是娱乐、是搞笑，尽管两者的区别有时稍显微妙，但仍有质的区别。</p></blockquote></li></ul><ul><li><blockquote><p>爸爸还是我电子学的启蒙老师。噢，我能在日后的工程师生涯中取得如此多的成就，与他的耐心教导是分不开的。从我很小的时候开始——甚至在我四岁前，爸爸就把我领入了电子学的世界，向我描述、解释与电子有关的种种事情。</p></blockquote></li></ul><ul><li><blockquote><p>我们的世界并不是一个非黑即白的世界，这个世界是灰度的。作为一个发明家，你必需要用灰度的眼光来看世界。你必须思想开放，千万不要随大流。事实上，你应该忘记那些所谓的“公认准则”。你应该始终保持绝对客观，忘记你所听到的各种观点和声音，像科学家一样考察事实。当你探索时，不要太早有所偏向，不要太早下结论，否则你就会变得偏激，客观的探索也会因为寻找各种证明自己观点的证据而变味。谁想要花时间证明一个错误的观点？沉浸在自我膨胀中毫无意义也毫无价值。你并不需要为证明自己的观点找一个借口。</p></blockquote></li></ul><ul><li><blockquote><p>当时的我还太小，无从决定自己以后是不是要当一名工程师。想当工程师的念头是在几年后才萌发的。在还没接触科幻世界和发明家的故事之前，小小的我就被带入了爸爸的技术世界，已经模模糊糊地感受到了技术的重要性和魅力。这算是我后来职业选择的最初渊源吧。</p></blockquote></li></ul><ul><li><blockquote><p>爸爸教给我许多重要的东西，我最想跟你分享的是在我看来他教给我的最重要的一课——他训练我如何做一名工程师。这对我的一生影响深远，甚至比爸爸的诚信观对我的影响还深。这里说的“工程师”指的是真正的工程师，或者说是工程师中的工程师。我清楚地记得爸爸坚定地告诉我，工程师是世界上最高尚、最重要的职业，作为一名工程师，你可以用自己的智慧创造出新的仪器，让人们活得更幸福，让世界变得更美好。他告诉我，工程师的工作能改变世界，能改变许多人的生活。</p></blockquote></li></ul><h3 id="29-《公正：该如何做是好-》"><a href="#29-《公正：该如何做是好-》" class="headerlink" title="29. 《公正：该如何做是好?》"></a>29. 《公正：该如何做是好?》</h3><h4 id="作者-22"><a href="#作者-22" class="headerlink" title="作者"></a>作者</h4><p>[美]迈克尔·桑德尔</p><h4 id="简介-21"><a href="#简介-21" class="headerlink" title="简介"></a>简介</h4><p>大二的时候看过公开课，而这本书正是这门公开课所讲述的内容</p><h4 id="读后感-16"><a href="#读后感-16" class="headerlink" title="读后感"></a>读后感</h4><h4 id="摘抄-19"><a href="#摘抄-19" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>  那些维护和反对价格欺诈的论证，都围绕着三种观念展开：使福利最大化、尊重自由和促进德性。其中的每一种观念都引向了一种不同的思考公正的方式。</p><p>  维护自由市场的基本理由基于两种主张—一种有关福利，另一种有关自由。</p></blockquote></li></ul><h2 id="漫画"><a href="#漫画" class="headerlink" title="漫画"></a>漫画</h2><h3 id="1-《流浪神差》"><a href="#1-《流浪神差》" class="headerlink" title="1.《流浪神差》"></a>1.《流浪神差》</h3><h4 id="作者-23"><a href="#作者-23" class="headerlink" title="作者"></a>作者</h4><ul><li>[日]安达渡嘉</li></ul><h4 id="简介-22"><a href="#简介-22" class="headerlink" title="简介"></a>简介</h4><p>流浪神差又名野良神，是我真正意义上的入宅作。虽然我高中的时候也追过火影，但那时候并不是对二次元有多大的兴趣。那时候还是为火影的热血所吸引吧。高中的时候只知道死读书，没有时间和经历看喜欢的的动画和漫画。而大一的时候，有的是充裕的时间，包括整个大学期间也看了将近 300 部动漫作品。想要知道我看过那些的可以去看看我的番组计划  <a href="https://bgm.tv/anime/list/512178" target="_blank" rel="noopener">木子的番组计划</a> 。大一的时候看完的动画第一季和第二季，眼看着四年过去了，真希望这部作品能接着出第三季和第四季。今年十一月份的时候看的漫画，作者是两位妹子，前两年的时候因为身体原因停更了，去年的时候又开始连载了。</p><h3 id="2-《终将成为你》"><a href="#2-《终将成为你》" class="headerlink" title="2.《终将成为你》"></a>2.《终将成为你》</h3><h4 id="作者-24"><a href="#作者-24" class="headerlink" title="作者"></a>作者</h4><ul><li>[日]仲谷鳩</li></ul><h4 id="简介-23"><a href="#简介-23" class="headerlink" title="简介"></a>简介</h4><p>去年的时候看完的动画，今年每个月都等着更新看完了漫画，直到十月份才完结。是一部不错滴百合漫画，嘻嘻，我比较喜欢百合😂，单纯的女生之间超越友情的那份爱。我尊重理解并支持同性恋群体们❤。</p><h3 id="3-《-Happy-Sugar-Life-～幸福甜蜜生活～》"><a href="#3-《-Happy-Sugar-Life-～幸福甜蜜生活～》" class="headerlink" title="3.《 Happy Sugar Life ～幸福甜蜜生活～》"></a>3.《 Happy Sugar Life ～幸福甜蜜生活～》</h3><h4 id="作者-25"><a href="#作者-25" class="headerlink" title="作者"></a>作者</h4><ul><li>[日]鍵空とみやき</li></ul><h4 id="简介-24"><a href="#简介-24" class="headerlink" title="简介"></a>简介</h4><p>下班后回来躺床上花了三个小时一口气看完的动画，之后又在 Kindle Oasis 上看完了漫画。十一月三十号下午买的二手 Kindle Oasis 2，最大的动因就是在 Kindle Paperwhite 3 上已经无法满足我看漫画的需求了😂</p><h3 id="4-《-citrus-柑橘味香氣-》"><a href="#4-《-citrus-柑橘味香氣-》" class="headerlink" title="4.《 citrus 柑橘味香氣 》"></a>4.《 citrus 柑橘味香氣 》</h3><h4 id="作者-26"><a href="#作者-26" class="headerlink" title="作者"></a>作者</h4><ul><li>サブロウタ</li></ul><h4 id="简介-25"><a href="#简介-25" class="headerlink" title="简介"></a>简介</h4><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h2 id="2020-年阅读计划"><a href="#2020-年阅读计划" class="headerlink" title="2020 年阅读计划"></a>2020 年阅读计划</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>读懂<code>弗里德利希·奥古斯特·哈耶克</code> 和 <code>汉娜·阿伦特</code></li></ul><h3 id="阅读计划"><a href="#阅读计划" class="headerlink" title="阅读计划"></a>阅读计划</h3><ul><li>《开放社会与敌人》 第二遍</li><li>《通往奴役之路》第三遍</li><li>《极权主义的起源》第二遍</li><li>《 <em>Amusing Ourselves to Death</em> 》</li><li>《法律、立法与自由》</li><li>《自由宪章》</li><li>《致命的自负》</li><li>《自由秩序原理》</li><li>《科学的反革命》</li><li>《个人主义与经济秩序》</li><li>《资本主义与自由》</li><li>《轴心时代》</li><li>《自由与繁荣的过度》</li><li>《重申自由主义》</li><li>《秩序自由主义》</li><li>《宪政经济学》</li><li>《知识、自由与秩序》</li><li>《大国的崩溃：苏联解体的台前幕后》</li><li>《公正：该如何做是好》</li></ul><p>其中读第二遍或者第三遍的图书准备写几篇博客</p><h2 id="关于书籍"><a href="#关于书籍" class="headerlink" title="关于书籍"></a>关于书籍</h2><p>上面的书大部分 kindle 上有，因为我是  <em>Kindle Unlimited</em>  的会员，所以能免费借阅上面的书。有 kindle 的小伙伴推荐去订阅亚马逊的这个  <em>Kindle Unlimited</em>   会员，一年价格才 98块人民币，超值啊😂 支持一下正版嘛。</p><p>但有些书不得不看盗版，没办法，因为还在摸着石头过河的国家并没有出版自由和新闻自由，我也很无奈。</p><p>另外你会发现，我读过的书绝大多数都是外国作者写的，而且他们绝大多数也都是学术界很有名的经济学家，甚至有些都是诺贝尔经济学奖得主。我觉着这些获得诺奖的经济学家，他们或许都亲身目睹了共产主义运动在欧洲所带来的杀戮，见证了苏联的崛起和陨落，这些经历也让他们清楚地认识到共产主义的邪恶。启迪当下，他们的思想值得我们深读和研究。不像某些只会唱赞歌的人，比如胡某进的《 X领导的强大体制对XX意味着什么 》，写的书里面装的都是一堆屎，一看到书名就想吐的那种。读书最主要的目的是为了思辨，是为了思考，而不是教会我们如何唱赞歌。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><h4 id="读书是为了什么？"><a href="#读书是为了什么？" class="headerlink" title="读书是为了什么？"></a>读书是为了什么？</h4><p>我不会告诉你读书是快乐的，读书能带给你勇气之类的鸡汤话。而且我也讨厌这种觉着多读几本书就高人一等、读书是多么美好的事情这类的自豪感。我并不觉着读书多么快乐，因为我很少抱有这种非理性的期望。读书的过程需要你集中注意力和思考，而思考是费力的，读书的过程远不如你看场电影那么舒服。</p><blockquote><p>  <strong>独立之精神，自由之思想</strong>                                     ——陈寅恪</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;更新日志&quot;&gt;&lt;a href=&quot;#更新日志&quot;
        
      
    
    </summary>
    
    
      <category term="阅读" scheme="https://blog.502.li/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="读书笔记" scheme="https://blog.502.li/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="思考" scheme="https://blog.502.li/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>与互联网相关的基金会和组织</title>
    <link href="https://blog.502.li/archives/Internet-related-foundations-and-organizations.html"/>
    <id>https://blog.502.li/archives/Internet-related-foundations-and-organizations.html</id>
    <published>2019-11-02T04:00:00.000Z</published>
    <updated>2019-12-06T06:03:19.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要写这？"><a href="#为什么要写这？" class="headerlink" title="为什么要写这？"></a>为什么要写这？</h2><p>最近想写一系列的文章，来<code>考古挖掘</code>一些知名的开源软件/自由软件基金会和非营利性组织的发展、以及他们成功运作的方式。所以这篇文章大概是罗列出以后要写的文章，今天顺便统计了一些这些基金会的捐款收入和支出状况，对这些基金会有个大致的了解。</p><p>引用 NASA 的  purposes  致敬这些与互联网息息相关的组织   <strong>For the Benefit of All</strong></p><h2 id="基金会及维护的项目"><a href="#基金会及维护的项目" class="headerlink" title="基金会及维护的项目"></a>基金会及维护的项目</h2><table><thead><tr><th>name</th><th>wikipedia</th><th>hosts project / work / service</th></tr></thead><tbody><tr><td><a href="https://www.linuxfoundation.org/" target="_blank" rel="noopener">Linux 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/Linux_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://kernel.org" target="_blank" rel="noopener">kernel</a>  <a href="[https://nodejs.org">NodeJs</a>  <a href="https://xenproject.org/" target="_blank" rel="noopener">Xen</a>   <a href="https://www.dpdk.org/" target="_blank" rel="noopener">DPDK</a>  <a href="[https://etcd.io">etcd</a>  <a href="[https://jenkins.io">Jenkins</a>  <a href="[https://kubernetes.io">kubernetes</a> <a href="https://ceph.com/foundation/" target="_blank" rel="noopener">Ceph</a>  <a href="https://github.com/containernetworking/cni" target="_blank" rel="noopener">CNI</a>  <a href="https://www.fluentd.org/" target="_blank" rel="noopener">Fluentd</a>  <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a>  <a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a>  <a href="https://coredns.io/" target="_blank" rel="noopener">CoreDNS</a></td></tr><tr><td><a href="https://www.gnu.org" target="_blank" rel="noopener">FSF 自由软件基金会</a></td><td><a href="https://en.wikipedia.org/wiki/Free_Software_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.gnu.org/" target="_blank" rel="noopener">GNU</a> <a href="https://www.gnu.org/software/libc/" target="_blank" rel="noopener">libc</a> <a href="https://www.gnu.org/software/glib/" target="_blank" rel="noopener">glib</a> <a href="https://www.gnu.org/software/bash/" target="_blank" rel="noopener">bash</a> <a href="https://www.gnu.org/software/gzip/" target="_blank" rel="noopener">gzip</a> <a href="https://www.gnu.org/software/wget/" target="_blank" rel="noopener">wget</a>  <a href="https://www.gnu.org/software/gcc/" target="_blank" rel="noopener">gcc</a> <a href="https://www.gnu.org/software/grub/" target="_blank" rel="noopener">grub</a> <a href="https://www.gnu.org/software/sed/" target="_blank" rel="noopener">sed</a>  <a href="https://www.gnu.org/software/tar/" target="_blank" rel="noopener">tar</a>  <a href="https://www.gnu.org/software/grep/" target="_blank" rel="noopener">grep</a></td></tr><tr><td><a href="https://foundation.mozilla.org" target="_blank" rel="noopener">Mozilla 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/Mozilla_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="[https://www.mozilla.org">Firefox</a>  <a href="[https://www.thunderbird.net">Thunderbird</a></td></tr><tr><td><a href="https://wikimediafoundation.org/" target="_blank" rel="noopener">维基媒体基金会</a></td><td><a href="https://en.wikipedia.org/wiki/Wikimedia_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.mediawiki.org/wiki/MediaWiki" target="_blank" rel="noopener">MediaWiki</a></td></tr><tr><td><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/OpenSSL" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.openssl.org/source/" target="_blank" rel="noopener">OpenSSL</a></td></tr><tr><td><a href="https://www.spi-inc.org/" target="_blank" rel="noopener">SPI 组织</a></td><td><a href="https://en.wikipedia.org/wiki/Software_in_the_Public_Interest" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.debian.org/distrib/" target="_blank" rel="noopener">Debian</a>  <a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a>  <a href="https://openwrt.org/" target="_blank" rel="noopener">OpenWrt</a>  <a href="[https://www.postgresql.org">PostgreSQL</a>  <a href="https://www.libreoffice.org/" target="_blank" rel="noopener">LibreOffice</a> <a href="[https://jenkins.io">Jenkins</a>  <a href="https://www.archlinux.org/" target="_blank" rel="noopener">Arch Linux</a> <a href="https://www.spi-inc.org/projects/mingw" target="_blank" rel="noopener">MinGW</a> <a href="https://www.spi-inc.org/projects/x.org" target="_blank" rel="noopener">X.Org</a> <a href="https://www.spi-inc.org/projects/haskell" target="_blank" rel="noopener">haskell.org</a> <a href="https://www.spi-inc.org/projects/gallery" target="_blank" rel="noopener">Gallery</a> <a href="https://www.spi-inc.org/projects/openzfs" target="_blank" rel="noopener">OpenZFS</a></td></tr><tr><td><a href="https://www.eff.org/" target="_blank" rel="noopener">EFF 电子前哨基金会</a></td><td><a href="https://en.wikipedia.org/wiki/Electronic_Frontier_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.eff.org/https-everywhere" target="_blank" rel="noopener">HTTPS Everywhere</a>  <a href="https://www.eff.org/privacybadger" target="_blank" rel="noopener">Privacy Badger</a>  <a href="https://letsencrypt.org/about/" target="_blank" rel="noopener">Let’s Encrypt</a></td></tr><tr><td><a href="https://www.openstack.org/foundation/" target="_blank" rel="noopener">OpenStack 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/OpenStack" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.openstack.org/software/releases/stein/components/nova" target="_blank" rel="noopener">nova</a>  <a href="https://www.openstack.org/software/project-navigator/openstack-components/#openstack-services" target="_blank" rel="noopener">OpenStack </a></td></tr><tr><td><a href="https://www.cncf.io/" target="_blank" rel="noopener">CNCF 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/CNCF" target="_blank" rel="noopener">wikipedia</a></td><td><a href="http://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a></td></tr><tr><td><a href="https://www.cloudfoundry.org" target="_blank" rel="noopener">Cloud Foundry 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/Cloud_Foundry" target="_blank" rel="noopener">wikipedia</a></td><td></td></tr><tr><td><a href="https://www.apache.org/" target="_blank" rel="noopener">Apache 软件基金会</a></td><td><a href="https://en.wikipedia.org/wiki/The_Apache_Software_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.apache.org/" target="_blank" rel="noopener">Apache</a>  <a href="https://hadoop.apache.org/" target="_blank" rel="noopener">Hadoop</a>  <a href="http://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a>  <a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">Zookeeper</a>  <a href="http://hbase.apache.org/" target="_blank" rel="noopener">HBase</a>  <a href="http://maven.apache.org/" target="_blank" rel="noopener">Maven</a></td></tr><tr><td><a href="https://www.python.org/psf/" target="_blank" rel="noopener">Python 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/Python_Software_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="[https://www.python.org">Python</a></td></tr><tr><td><a href="https://www.gnome.org/foundation/" target="_blank" rel="noopener">GNOME 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/GNOME_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="[https://www.gnome.org">GNOME</a>  <a href="http://www.freedesktop.org/wiki/Software/systemd/" target="_blank" rel="noopener">systemd</a>  <a href="https://developer.gnome.org/glib/" target="_blank" rel="noopener">GLib</a>  <a href="http://www.gtk.org/" target="_blank" rel="noopener">GTK+</a>  <a href="http://www.freedesktop.org/wiki/Software/dbus/" target="_blank" rel="noopener">D-Bus</a>  <a href="https://www.kernel.org/" target="_blank" rel="noopener">Linux Kernel</a>  <a href="https://wiki.gnome.org/Projects/GDM" target="_blank" rel="noopener">GDM</a></td></tr><tr><td><a href="http://openwebfoundation.org/" target="_blank" rel="noopener">OWF 开放 web 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/Open_Web_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td></td></tr><tr><td><a href="https://www.opennetworking.org/" target="_blank" rel="noopener">ONF 开放网络基金会</a></td><td><a href="https://en.wikipedia.org/wiki/Open_Networking_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.opennetworking.org/onos/" target="_blank" rel="noopener">onos</a> <a href="https://www.opennetworking.org/omec/" target="_blank" rel="noopener">OMEC</a>  <a href></a></td></tr><tr><td><a href="https://www.freebsdfoundation.org/" target="_blank" rel="noopener">FreeBSD 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/FreeBSD_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.freebsd.org" target="_blank" rel="noopener">FreeBSD</a></td></tr><tr><td><a href="http://www.openbsdfoundation.org/" target="_blank" rel="noopener">OpenBSD 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/OpenBSD_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="http://www.openssh.com/" target="_blank" rel="noopener"> OpenSSH</a>  <a href="http://www.libressl.org/" target="_blank" rel="noopener">LibreSSL</a>  <a href="http://www.openbsd.org/" target="_blank" rel="noopener">OpenBSD</a></td></tr><tr><td><a href="http://golangfoundation.org/about/" target="_blank" rel="noopener">Golang 基金会</a></td><td><a href="https://#" target="_blank" rel="noopener">wikipedia</a></td><td></td></tr><tr><td><a href="https://opensource.org/" target="_blank" rel="noopener">OSI 开放源代码组织</a></td><td><a href="https://en.wikipedia.org/wiki/Open_Source_Initiative" target="_blank" rel="noopener">wikipedia</a></td><td></td></tr><tr><td><a href="https://www.linaro.org/" target="_blank" rel="noopener">Linaro 非营利性组织</a></td><td><a href="https://en.wikipedia.org/wiki/Linaro" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.linaro.org/downloads/" target="_blank" rel="noopener">Linaro Toolchain</a></td></tr><tr><td><a href="https://www.torproject.org/" target="_blank" rel="noopener">Tor 项目</a></td><td><a href="https://en.wikipedia.org/wiki/Tor_(anonymity_network" target="_blank" rel="noopener">wikipedia</a>)</td><td><a href="https://www.torproject.org/download/" target="_blank" rel="noopener">Tor </a></td></tr><tr><td><a href="https://freedom.press/" target="_blank" rel="noopener">FPF 新闻自由基金会</a></td><td><a href="https://en.wikipedia.org/wiki/Freedom_of_the_Press_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://securedrop.org/" target="_blank" rel="noopener">SecureDrop</a>  <a href="https://securethe.news/" target="_blank" rel="noopener">Secure the News</a>  <a href="https://freedom.press/news/archiving-alternative-press-threatened-wealthy-buyers/" target="_blank" rel="noopener">Archive the News</a> <a href="https://twitter.com/foiafeed" target="_blank" rel="noopener">FOIAFeed</a></td></tr><tr><td><a href="https://cpj.org" target="_blank" rel="noopener">OPJ 保护记者委员会</a></td><td><a href="https://en.wikipedia.org/wiki/Committee_to_Protect_Journalists" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://cpj.org/safety-kit/" target="_blank" rel="noopener">Safety Kit</a>  <a href="https://cpj.org/safety-advisories/" target="_blank" rel="noopener">Safety Advisories</a></td></tr><tr><td><a href="https://webfoundation.org/" target="_blank" rel="noopener">Web Foundation 万维网基金会</a></td><td><a href="https://en.wikipedia.org/wiki/World_Wide_Web_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://webfoundation.org/our-work/projects/alliance-for-affordable-internet/" target="_blank" rel="noopener">Alliance for Affordable Internet</a>  <a href="https://webfoundation.org/our-work/projects/open-data-barometer/" target="_blank" rel="noopener">Open Data Barometer</a>  <a href="https://webfoundation.org/our-work/projects/womens-rights-online/" target="_blank" rel="noopener">Women’s Rights Online</a> <a href="https://webfoundation.org/our-work/projects/the-web-index/" target="_blank" rel="noopener">The Web Index</a></td></tr><tr><td><a href="https://epic.org/" target="_blank" rel="noopener">EPIC 电子隐私信息中心</a></td><td><a href="https://en.wikipedia.org/wiki/Electronic_Privacy_Information_Center" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://epic.org/privacy/litigation/" target="_blank" rel="noopener">Litigation Docket</a> <a href="https://epic.org/campaigns/" target="_blank" rel="noopener">Privacy Campaigns</a> <a href="https://epic.org/privacy/surveillance/spotlight/" target="_blank" rel="noopener">Spotlight on Surveillance</a></td></tr><tr><td><a href="https://sfconservancy.org/" target="_blank" rel="noopener">SFC 软件自由保护组织</a></td><td><a href="https://en.wikipedia.org/wiki/Software_Freedom_Conservancy" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://busybox.net/" target="_blank" rel="noopener">BusyBox</a>  <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>  <a href="https://phpmyadmin.net/" target="_blank" rel="noopener">phpMyAdmin</a>  <a href="http://qemu.org/" target="_blank" rel="noopener">QEMU</a>  <a href="https://www.samba.org/samba/" target="_blank" rel="noopener">Samba</a>  <a href="http://www.winehq.org/" target="_blank" rel="noopener">Wine</a> <a href></a></td></tr><tr><td><a href="https://www.softwarefreedom.org/" target="_blank" rel="noopener">SFLC 软件自由法律中心</a></td><td><a href="https://en.wikipedia.org/wiki/Software_Freedom_Law_Center" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.softwarefreedom.org/services/" target="_blank" rel="noopener">services</a></td></tr><tr><td><a href="https://archive.org/" target="_blank" rel="noopener">Internet Archive 互联网档案馆</a></td><td><a href="https://en.wikipedia.org/wiki/Internet_Archive" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://archive.org/projects/" target="_blank" rel="noopener">Building Libraries Together</a>  <a href="https://openlibrary.org/" target="_blank" rel="noopener">Open Library</a>  <a href="https://archive.org/details/301works" target="_blank" rel="noopener">301Works.org</a>  <a href="https://archive.org/web/sflan.php" target="_blank" rel="noopener">Open Community Networks</a></td></tr><tr><td><a href="https://www.x.org/wiki/" target="_blank" rel="noopener">X.Org 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/X.Org_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://www.x.org" target="_blank" rel="noopener">X.Org project</a></td></tr><tr><td><a href="https://riscv.org/" target="_blank" rel="noopener">RISC-V 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/RISC-V" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://riscv.org/" target="_blank" rel="noopener">RISC-V</a></td></tr><tr><td><a href="https://creativecommons.org/" target="_blank" rel="noopener">Creative Commons</a></td><td><a href="https://en.wikipedia.org/wiki/Creative_Commons" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://creativecommons.org/about/" target="_blank" rel="noopener">about</a></td></tr><tr><td><a href="https://www.eclipse.org/org/foundation/" target="_blank" rel="noopener">Eclipse 基金会</a></td><td><a href="https://en.wikipedia.org/wiki/Eclipse_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://projects.eclipse.org/" target="_blank" rel="noopener">Eclipse</a></td></tr><tr><td><a href="https://www.documentfoundation.org/" target="_blank" rel="noopener">TDF 文档基金会</a></td><td><a href="https://en.wikipedia.org/wiki/The_Document_Foundation" target="_blank" rel="noopener">wikipedia</a></td><td><a href="http://www.libreoffice.org/" target="_blank" rel="noopener">LibreOffice</a></td></tr><tr><td><a href="https://www.abetterinternet.org/" target="_blank" rel="noopener">ISRG 互联网安全研究小组</a></td><td><a href="https://en.wikipedia.org/wiki/Internet_Security_Research_Group" target="_blank" rel="noopener">wikipedia</a></td><td><a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a></td></tr></tbody></table><h2 id="基金会-2017-年收入支出报告"><a href="#基金会-2017-年收入支出报告" class="headerlink" title="基金会 2017 年收入支出报告"></a>基金会 2017 年收入支出报告</h2><h3 id="按总收入排名"><a href="#按总收入排名" class="headerlink" title="按总收入排名"></a>按总收入排名</h3><table><thead><tr><th>基金会名称</th><th style="text-align:center">年总收入 $</th><th style="text-align:center">年总支出 $</th><th style="text-align:center">年净收入 $</th></tr></thead><tbody><tr><td><a href="https://wikimediafoundation.org/" target="_blank" rel="noopener">维基媒体基金会</a></td><td style="text-align:center">$89,973,967</td><td style="text-align:center">$69,076,192</td><td style="text-align:center">$20,897,775</td></tr><tr><td><a href="https://www.linuxfoundation.org/" target="_blank" rel="noopener">Linux   基金会</a></td><td style="text-align:center">$81,616,265</td><td style="text-align:center">$68,997,604</td><td style="text-align:center">$12,618,661</td></tr><tr><td><a href="https://www.openstack.org/foundation/" target="_blank" rel="noopener">OpenStack   基金会</a></td><td style="text-align:center">$22,829,442</td><td style="text-align:center">$29,047,402</td><td style="text-align:center">-$6,217,960)</td></tr><tr><td><a href="https://foundation.mozilla.org/" target="_blank" rel="noopener">Mozilla   基金会</a></td><td style="text-align:center">$20,586,446</td><td style="text-align:center">$24,206,401</td><td style="text-align:center">-$3,619,955)</td></tr><tr><td><a href="https://archive.org/" target="_blank" rel="noopener">Internet   Archive 互联网档案馆</a></td><td style="text-align:center">$17,811,981</td><td style="text-align:center">$18,468,621</td><td style="text-align:center">-$656,640)</td></tr><tr><td><a href="https://www.eff.org/" target="_blank" rel="noopener">EFF   电子前哨基金会</a></td><td style="text-align:center">$17,392,426</td><td style="text-align:center">$11,398,529</td><td style="text-align:center">$5,993,897</td></tr><tr><td><a href="https://cpj.org/" target="_blank" rel="noopener">CPJ   保护记者委员会</a></td><td style="text-align:center">$9,625,276</td><td style="text-align:center">$7,345,573</td><td style="text-align:center">$2,279,703</td></tr><tr><td><a href="https://www.opennetworking.org/" target="_blank" rel="noopener">ONF   开放网络基金会</a></td><td style="text-align:center">$7,722,940</td><td style="text-align:center">$6,525,599</td><td style="text-align:center">$1,197,341</td></tr><tr><td><a href="https://freedom.press/" target="_blank" rel="noopener">FPF   新闻自由基金会</a></td><td style="text-align:center">$5,949,008</td><td style="text-align:center">$2,960,503</td><td style="text-align:center">$2,988,505</td></tr><tr><td><a href="https://www.torproject.org/" target="_blank" rel="noopener">Tor   项目</a></td><td style="text-align:center">$4,130,882</td><td style="text-align:center">$4,078,419</td><td style="text-align:center">$52,463</td></tr><tr><td><a href="https://webfoundation.org/" target="_blank" rel="noopener">Web   Foundation 万维网基金会</a></td><td style="text-align:center">$3,579,820</td><td style="text-align:center">$3,966,177</td><td style="text-align:center">-$386,357</td></tr><tr><td><a href="https://www.python.org/psf/" target="_blank" rel="noopener">Python   基金会</a></td><td style="text-align:center">$2,870,521</td><td style="text-align:center">$2,475,335</td><td style="text-align:center">$395,186</td></tr><tr><td><a href="https://www.abetterinternet.org/" target="_blank" rel="noopener">ISRG   互联网安全研究小组</a></td><td style="text-align:center">$2,732,486</td><td style="text-align:center">$2,599,681</td><td style="text-align:center">$132,805</td></tr><tr><td><a href="https://sfconservancy.org/" target="_blank" rel="noopener">SFC   软件自由保护组织</a></td><td style="text-align:center">$2,125,670</td><td style="text-align:center">$1,500,209</td><td style="text-align:center">$625,461</td></tr><tr><td><a href="https://epic.org/" target="_blank" rel="noopener">EPIC   电子隐私信息中心</a></td><td style="text-align:center">$1,715,419</td><td style="text-align:center">$1,523,199</td><td style="text-align:center">$192,220</td></tr><tr><td><a href="https://creativecommons.org/" target="_blank" rel="noopener">Creative   Commons</a></td><td style="text-align:center">$1,639,408</td><td style="text-align:center">$3,600,414</td><td style="text-align:center">-$1,961,006</td></tr><tr><td><a href="https://www.gnu.org/" target="_blank" rel="noopener">FSF   自由软件基金会</a></td><td style="text-align:center">$1,373,574</td><td style="text-align:center">$1,233,394</td><td style="text-align:center">$140,180</td></tr><tr><td><a href="https://www.softwarefreedom.org/" target="_blank" rel="noopener">SFLC   软件自由法律中心</a></td><td style="text-align:center">$1,237,816</td><td style="text-align:center">$1,359,324</td><td style="text-align:center">-$121,508</td></tr><tr><td><a href="https://www.freebsdfoundation.org/" target="_blank" rel="noopener">FreeBSD   基金会</a></td><td style="text-align:center">$1,101,562</td><td style="text-align:center">$993,701</td><td style="text-align:center">$107,861</td></tr><tr><td><a href="https://www.apache.org/" target="_blank" rel="noopener">Apache   软件基金会</a></td><td style="text-align:center">$917,715</td><td style="text-align:center">$1,205,831</td><td style="text-align:center">-$288,116</td></tr><tr><td><a href="https://riscv.org/" target="_blank" rel="noopener">RISC-V   基金会</a></td><td style="text-align:center">$636,438</td><td style="text-align:center">$456,755</td><td style="text-align:center">$179,683</td></tr><tr><td><a href="https://www.spi-inc.org/" target="_blank" rel="noopener">SPI   组织</a></td><td style="text-align:center">$635,312</td><td style="text-align:center">$612,941</td><td style="text-align:center">$22,371</td></tr><tr><td><a href="https://www.gnome.org/foundation/" target="_blank" rel="noopener">GNOME   基金会</a></td><td style="text-align:center">$291,955</td><td style="text-align:center">$329,955</td><td style="text-align:center">-$38,000</td></tr><tr><td><a href="https://opensource.org/" target="_blank" rel="noopener">OSI   开放源代码组织</a></td><td style="text-align:center">$209,500</td><td style="text-align:center">$187,884</td><td style="text-align:center">$21,616</td></tr></tbody></table><h3 id="按净收入排名"><a href="#按净收入排名" class="headerlink" title="按净收入排名"></a>按净收入排名</h3><table><thead><tr><th>基金会名称</th><th style="text-align:center">年总收入 $</th><th style="text-align:center">年总支出 $</th><th style="text-align:center">年净收入 $</th></tr></thead><tbody><tr><td><a href="https://wikimediafoundation.org/" target="_blank" rel="noopener">维基媒体基金会</a></td><td style="text-align:center">$89,973,967</td><td style="text-align:center">$69,076,192</td><td style="text-align:center">$20,897,775</td></tr><tr><td><a href="https://www.linuxfoundation.org/" target="_blank" rel="noopener">Linux   基金会</a></td><td style="text-align:center">$81,616,265</td><td style="text-align:center">$68,997,604</td><td style="text-align:center">$12,618,661</td></tr><tr><td><a href="https://www.eff.org/" target="_blank" rel="noopener">EFF   电子前哨基金会</a></td><td style="text-align:center">$17,392,426</td><td style="text-align:center">$11,398,529</td><td style="text-align:center">$5,993,897</td></tr><tr><td><a href="https://freedom.press/" target="_blank" rel="noopener">FPF   新闻自由基金会</a></td><td style="text-align:center">$5,949,008</td><td style="text-align:center">$2,960,503</td><td style="text-align:center">$2,988,505</td></tr><tr><td><a href="https://cpj.org/" target="_blank" rel="noopener">CPJ   保护记者委员会</a></td><td style="text-align:center">$9,625,276</td><td style="text-align:center">$7,345,573</td><td style="text-align:center">$2,279,703</td></tr><tr><td><a href="https://www.opennetworking.org/" target="_blank" rel="noopener">ONF   开放网络基金会</a></td><td style="text-align:center">$7,722,940</td><td style="text-align:center">$6,525,599</td><td style="text-align:center">$1,197,341</td></tr><tr><td><a href="https://sfconservancy.org/" target="_blank" rel="noopener">SFC   软件自由保护组织</a></td><td style="text-align:center">$2,125,670</td><td style="text-align:center">$1,500,209</td><td style="text-align:center">$625,461</td></tr><tr><td><a href="https://www.python.org/psf/" target="_blank" rel="noopener">Python   基金会</a></td><td style="text-align:center">$2,870,521</td><td style="text-align:center">$2,475,335</td><td style="text-align:center">$395,186</td></tr><tr><td><a href="https://epic.org/" target="_blank" rel="noopener">EPIC   电子隐私信息中心</a></td><td style="text-align:center">$1,715,419</td><td style="text-align:center">$1,523,199</td><td style="text-align:center">$192,220</td></tr><tr><td><a href="https://riscv.org/" target="_blank" rel="noopener">RISC-V   基金会</a></td><td style="text-align:center">$636,438</td><td style="text-align:center">$456,755</td><td style="text-align:center">$179,683</td></tr><tr><td><a href="https://www.gnu.org/" target="_blank" rel="noopener">FSF   自由软件基金会</a></td><td style="text-align:center">$1,373,574</td><td style="text-align:center">$1,233,394</td><td style="text-align:center">$140,180</td></tr><tr><td><a href="https://www.abetterinternet.org/" target="_blank" rel="noopener">ISRG   互联网安全研究小组</a></td><td style="text-align:center">$2,732,486</td><td style="text-align:center">$2,599,681</td><td style="text-align:center">$132,805</td></tr><tr><td><a href="https://www.freebsdfoundation.org/" target="_blank" rel="noopener">FreeBSD   基金会</a></td><td style="text-align:center">$1,101,562</td><td style="text-align:center">$993,701</td><td style="text-align:center">$107,861</td></tr><tr><td><a href="https://www.torproject.org/" target="_blank" rel="noopener">Tor   项目</a></td><td style="text-align:center">$4,130,882</td><td style="text-align:center">$4,078,419</td><td style="text-align:center">$52,463</td></tr><tr><td><a href="https://www.spi-inc.org/" target="_blank" rel="noopener">SPI   组织</a></td><td style="text-align:center">$635,312</td><td style="text-align:center">$612,941</td><td style="text-align:center">$22,371</td></tr><tr><td><a href="https://opensource.org/" target="_blank" rel="noopener">OSI   开放源代码组织</a></td><td style="text-align:center">$209,500</td><td style="text-align:center">$187,884</td><td style="text-align:center">$21,616</td></tr><tr><td><a href="https://www.gnome.org/foundation/" target="_blank" rel="noopener">GNOME   基金会</a></td><td style="text-align:center">$291,955</td><td style="text-align:center">$329,955</td><td style="text-align:center">-$38,000</td></tr><tr><td><a href="https://www.softwarefreedom.org/" target="_blank" rel="noopener">SFLC   软件自由法律中心</a></td><td style="text-align:center">$1,237,816</td><td style="text-align:center">$1,359,324</td><td style="text-align:center">-$121,508</td></tr><tr><td><a href="https://www.apache.org/" target="_blank" rel="noopener">Apache   软件基金会</a></td><td style="text-align:center">$917,715</td><td style="text-align:center">$1,205,831</td><td style="text-align:center">-$288,116</td></tr><tr><td><a href="https://webfoundation.org/" target="_blank" rel="noopener">Web   Foundation 万维网基金会</a></td><td style="text-align:center">$3,579,820</td><td style="text-align:center">$3,966,177</td><td style="text-align:center">-$386,357</td></tr><tr><td><a href="https://archive.org/" target="_blank" rel="noopener">Internet   Archive 互联网档案馆</a></td><td style="text-align:center">$17,811,981</td><td style="text-align:center">$18,468,621</td><td style="text-align:center">-$656,640</td></tr><tr><td><a href="https://creativecommons.org/" target="_blank" rel="noopener">Creative   Commons</a></td><td style="text-align:center">$1,639,408</td><td style="text-align:center">$3,600,414</td><td style="text-align:center">-$1,961,006</td></tr><tr><td><a href="https://foundation.mozilla.org/" target="_blank" rel="noopener">Mozilla   基金会</a></td><td style="text-align:center">$20,586,446</td><td style="text-align:center">$24,206,401</td><td style="text-align:center">-$3,619,955</td></tr><tr><td><a href="https://www.openstack.org/foundation/" target="_blank" rel="noopener">OpenStack   基金会</a></td><td style="text-align:center">$22,829,442</td><td style="text-align:center">$29,047,402</td><td style="text-align:center">-$6,217,960</td></tr></tbody></table><h3 id="无序"><a href="#无序" class="headerlink" title="无序"></a>无序</h3><table><thead><tr><th>name</th><th style="text-align:center">2017 年总收入 $</th><th style="text-align:center">2017 年总支出 $</th><th style="text-align:center">2017 年净收入 $</th></tr></thead><tbody><tr><td><a href="https://www.linuxfoundation.org/" target="_blank" rel="noopener">Linux 基金会</a></td><td style="text-align:center">$81,616,265</td><td style="text-align:center">$68,997,604</td><td style="text-align:center">$12,618,661</td></tr><tr><td><a href="https://www.gnu.org" target="_blank" rel="noopener">FSF 自由软件基金会</a></td><td style="text-align:center">$1,373,574</td><td style="text-align:center">$1,233,394</td><td style="text-align:center">$140,180</td></tr><tr><td><a href="https://foundation.mozilla.org" target="_blank" rel="noopener">Mozilla 基金会</a></td><td style="text-align:center">$20,586,446</td><td style="text-align:center">$24,206,401</td><td style="text-align:center">-$3,619,955</td></tr><tr><td><a href="https://wikimediafoundation.org/" target="_blank" rel="noopener">维基媒体基金会</a></td><td style="text-align:center">$89,973,967</td><td style="text-align:center">$69,076,192</td><td style="text-align:center">$20,897,775</td></tr><tr><td><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL 基金会</a></td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td><a href="https://www.spi-inc.org/" target="_blank" rel="noopener">SPI 组织</a></td><td style="text-align:center">$635,312</td><td style="text-align:center">$612,941</td><td style="text-align:center">$22,371</td></tr><tr><td><a href="https://www.eff.org/" target="_blank" rel="noopener">EFF 电子前哨基金会</a></td><td style="text-align:center">$17,392,426</td><td style="text-align:center">$11,398,529</td><td style="text-align:center">$5,993,897</td></tr><tr><td><a href="https://www.openstack.org/foundation/" target="_blank" rel="noopener">OpenStack 基金会</a></td><td style="text-align:center">$22,829,442</td><td style="text-align:center">$29,047,402</td><td style="text-align:center">-$6,217,960 (2016)</td></tr><tr><td><a href="https://www.cncf.io/" target="_blank" rel="noopener">CNCF 基金会</a></td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td><a href="https://www.cloudfoundry.org" target="_blank" rel="noopener">Cloud Foundry 基金会</a></td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td><a href="https://www.apache.org/" target="_blank" rel="noopener">Apache 软件基金会</a></td><td style="text-align:center">$917,715</td><td style="text-align:center">$1,205,831</td><td style="text-align:center">-$288,116</td></tr><tr><td><a href="https://www.python.org/psf/" target="_blank" rel="noopener">Python 基金会</a></td><td style="text-align:center">$2,870,521</td><td style="text-align:center">$2,475,335</td><td style="text-align:center">$395,186</td></tr><tr><td><a href="https://www.gnome.org/foundation/" target="_blank" rel="noopener">GNOME 基金会</a></td><td style="text-align:center">$291,955</td><td style="text-align:center">$329,955</td><td style="text-align:center">-$38,000</td></tr><tr><td><a href="http://openwebfoundation.org/" target="_blank" rel="noopener">OWF 开放 web 基金会</a></td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td><a href="https://www.opennetworking.org/" target="_blank" rel="noopener">ONF 开放网络基金会</a></td><td style="text-align:center">$7,722,940</td><td style="text-align:center">$6,525,599</td><td style="text-align:center">$1,197,341</td></tr><tr><td><a href="https://www.freebsdfoundation.org/" target="_blank" rel="noopener">FreeBSD 基金会</a></td><td style="text-align:center">$1,101,562</td><td style="text-align:center">$993,701</td><td style="text-align:center">$107,861</td></tr><tr><td><a href="http://www.openbsdfoundation.org/" target="_blank" rel="noopener">OpenBSD 基金会</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td><a href="http://golangfoundation.org/about/" target="_blank" rel="noopener">Golang 基金会</a></td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td><a href="https://opensource.org/" target="_blank" rel="noopener">OSI 开放源代码组织</a></td><td style="text-align:center">$209,500</td><td style="text-align:center">$187,884</td><td style="text-align:center">$21,616</td></tr><tr><td><a href="https://www.linaro.org/" target="_blank" rel="noopener">Linaro 非营利性组织</a></td><td style="text-align:center">UK</td><td style="text-align:center">UK</td><td style="text-align:center">UK</td></tr><tr><td><a href="https://www.torproject.org/" target="_blank" rel="noopener">Tor 项目</a></td><td style="text-align:center">$4,130,882</td><td style="text-align:center">$4,078,419</td><td style="text-align:center">$52,463</td></tr><tr><td><a href="https://freedom.press/" target="_blank" rel="noopener">FPF 新闻自由基金会</a></td><td style="text-align:center">$5,949,008</td><td style="text-align:center">$2,960,503</td><td style="text-align:center">$2,988,505</td></tr><tr><td><a href="https://cpj.org" target="_blank" rel="noopener">CPJ 保护记者委员会</a></td><td style="text-align:center">$9,625,276</td><td style="text-align:center">$7,345,573</td><td style="text-align:center">$2,279,703</td></tr><tr><td><a href="https://webfoundation.org/" target="_blank" rel="noopener">Web Foundation 万维网基金会</a></td><td style="text-align:center">$3,579,820</td><td style="text-align:center">$3,966,177</td><td style="text-align:center">-$386,357</td></tr><tr><td><a href="https://epic.org/" target="_blank" rel="noopener">EPIC 电子隐私信息中心</a></td><td style="text-align:center">$1,715,419</td><td style="text-align:center">$1,523,199</td><td style="text-align:center">$192,220</td></tr><tr><td><a href="https://sfconservancy.org/" target="_blank" rel="noopener">SFC 软件自由保护组织</a></td><td style="text-align:center">$2,125,670</td><td style="text-align:center">$1,500,209</td><td style="text-align:center">$625,461</td></tr><tr><td><a href="https://www.softwarefreedom.org/" target="_blank" rel="noopener">SFLC 软件自由法律中心</a></td><td style="text-align:center">$1,237,816</td><td style="text-align:center">$1,359,324</td><td style="text-align:center">-$121,508</td></tr><tr><td><a href="https://archive.org/" target="_blank" rel="noopener">Internet Archive 互联网档案馆</a></td><td style="text-align:center">$17,811,981</td><td style="text-align:center">$18,468,621</td><td style="text-align:center">-$656,640</td></tr><tr><td><a href="https://www.x.org/wiki/" target="_blank" rel="noopener">X.Org 基金会</a></td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td><a href="https://riscv.org/" target="_blank" rel="noopener">RISC-V 基金会</a></td><td style="text-align:center">$636,438</td><td style="text-align:center">$456,755</td><td style="text-align:center">$179,683</td></tr><tr><td><a href="https://creativecommons.org/" target="_blank" rel="noopener">Creative Commons</a></td><td style="text-align:center">$1,639,408</td><td style="text-align:center">$3,600,414</td><td style="text-align:center">-$1,961,006</td></tr><tr><td><a href="https://www.eclipse.org/org/foundation/" target="_blank" rel="noopener">Eclipse 基金会</a></td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td><a href="https://www.documentfoundation.org/" target="_blank" rel="noopener">TDF 文档基金会</a></td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td><a href="https://www.abetterinternet.org/" target="_blank" rel="noopener">ISRG 互联网安全研究小组</a></td><td style="text-align:center">$2,732,486</td><td style="text-align:center">$2,599,681</td><td style="text-align:center">$132,805</td></tr></tbody></table><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><ul><li><p><a href="https://projects.propublica.org/nonprofits/organizations/460503801" target="_blank" rel="noopener">The Linux Foundation - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/42888848" target="_blank" rel="noopener">Free Software Foundation Inc - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/200097189" target="_blank" rel="noopener">Mozilla Foundation - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/200049703" target="_blank" rel="noopener">Wikimedia Foundation Inc - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/113390208" target="_blank" rel="noopener">Software In The Public Interest Inc - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/460618689" target="_blank" rel="noopener">Openstack Foundation - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/470825376" target="_blank" rel="noopener">Apache Software Foundation - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/43594598" target="_blank" rel="noopener">Python Software Foundation - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/43572618" target="_blank" rel="noopener">Gnome Foundation Inc - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/273327530" target="_blank" rel="noopener">Open Networking Foundation - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/841545163" target="_blank" rel="noopener">The Freebsd Foundation - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/912037395" target="_blank" rel="noopener">Open Source Initiative - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/208096820" target="_blank" rel="noopener">Tor Project Inc - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/460967274" target="_blank" rel="noopener">Freedom Of The Press Foundation - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/133081500" target="_blank" rel="noopener">Committee To Protect Journalists Inc - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/262852431" target="_blank" rel="noopener">World Wide Web Foundation - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/370794792" target="_blank" rel="noopener">Epic - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/522225921" target="_blank" rel="noopener">Electronic Privacy Information Center - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/260707261" target="_blank" rel="noopener">Epic Foundation Inc - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/412203632" target="_blank" rel="noopener">Software Freedom Conservancy Inc - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/412165986" target="_blank" rel="noopener">Software Freedom Law Center Inc - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/943242767" target="_blank" rel="noopener">Internet Archive - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/474893089" target="_blank" rel="noopener">Risc V Foundation - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/43585301" target="_blank" rel="noopener">Creative Commons Corporation - Nonprofit Explorer - ProPublica</a></p></li><li><p><a href="https://projects.propublica.org/nonprofits/organizations/463344200" target="_blank" rel="noopener">Internet Security Research Group - Nonprofit Explorer - ProPublica</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;为什么要写这？&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="internet" scheme="https://blog.502.li/tags/internet/"/>
    
      <category term="开源" scheme="https://blog.502.li/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>业务上线前检查清单</title>
    <link href="https://blog.502.li/archives/checklist.html"/>
    <id>https://blog.502.li/archives/checklist.html</id>
    <published>2019-10-29T04:00:00.000Z</published>
    <updated>2019-12-06T06:03:19.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拉清单？😂"><a href="#拉清单？😂" class="headerlink" title="拉清单？😂"></a>拉清单？😂</h2><blockquote><p>实际上那些错误执行者，他也是有一本账的，这个帐是记在那儿的。一旦他出事了，这个帐全给你拉出来了。别看你今天闹得欢，小心今后拉清单，这都得应验的。不要干这种事情。头上三尺有神明，一定要有敬畏之心。 </p><p>此处引用自  《将改革进行到底》 系列纪录片</p></blockquote><p>所以在我们应用上线之前一定要对生产环境有敬畏之心，切记不可马虎大意，不然会会酿出巨大的线上事故，造成巨大的经济损失。因此我们在上线之前要层层把关，<code>拉一个清单</code>出来，把一些该做的事项认真检查完毕后再按规矩上线。这样我们的业务上线后才能万无一失，让老板和领导都安心省事儿。</p><h2 id="1-硬件环境检查"><a href="#1-硬件环境检查" class="headerlink" title="1.硬件环境检查"></a>1.硬件环境检查</h2><ol><li><p>网络设备、分配公网IP、边界路由器</p></li><li><p>安全设备、硬件防火墙、负载均衡器、堡垒机</p></li><li><p>主机硬件资源(磁盘、内存、CPU、带宽)是否满足业务需求</p></li><li><p>边界完整性检查、访问控制检查</p></li><li><p>检查域名解析是否正确、SSL 证书有效期</p></li></ol><h2 id="2-系统安全检查"><a href="#2-系统安全检查" class="headerlink" title="2.系统安全检查"></a>2.系统安全检查</h2><ol><li><p>检查是否禁止 ssh 密码登录、是否禁止root用户远程登录</p></li><li><p>修改 ssh 默认端口号、添加 ssh 防火墙白名单规则</p></li><li><p>添加 ssh 远程登录IP白名单、禁止白名单以外IP登录</p></li><li><p>防火墙默认规则、确保过滤所有传入端口、只开放服务端口</p></li><li><p>开启系统权限审计日志、认证登录日志</p></li><li><p>日志收集与监控服务运行状态</p></li><li><p>检查进程运行用户的权限</p></li><li><p>外部安全扫描(nmap扫描端口)</p></li><li><p>系统运行服务检查</p></li><li><p>检查 SSH 与 PGP 的私钥</p></li><li><p>文件系统完整性检查</p></li><li><p>检查系统安全更新</p></li><li><p>检查时钟是否同步为北京时间</p></li><li><p>检查是否需要开启swap，预防业务高峰时期内存不足引起OOM</p></li></ol><h2 id="3-应用服务器安全检查"><a href="#3-应用服务器安全检查" class="headerlink" title="3.应用服务器安全检查"></a>3.应用服务器安全检查</h2><ol><li><p>统一设置40X错误页面、禁止输出服务器状态信息</p></li><li><p>检查Tomcat后台管理弱口令或禁用Tomcat后台默认应用</p></li><li><p>Web服务器配置文件检查、避免端口或域名冲突</p></li><li><p>删除 Tomcat 默认安装的应用</p></li><li><p>设置禁止列出目录，防止直接访问目录时由于找不到默认页面，而列出目录下的文件的情况</p></li><li><p>确保生产环境与开发环境所需的依赖一致</p></li></ol><blockquote><p>搞企业先扫描，扫描器商业好；默密码都知道 ，社工库找一找；</p><p>邮箱号先列好，九头蛇跑一跑 ；搞不定放大招，发邮件凭伪造；</p><p>没邮箱搞网站 ，二级域皆可爆；老漏洞没修好，新漏洞刷一票 ；</p><p>干研发 Git 找，源代码全都要；CDN 可以跳， 防火墙可以撬；</p><p>堡垒机可以秒，云防护可以秒 ；是企业都可搞 </p><p>此处引用自  <a href="https://fanqxu.com/" target="_blank" rel="noopener">考えるF4n9X</a> </p></blockquote><h2 id="4-数据库安全检查"><a href="#4-数据库安全检查" class="headerlink" title="4.数据库安全检查"></a>4.数据库安全检查</h2><ol><li><p>确保数据库连接的正确性</p></li><li><p>检查连接数据库用户的权限、开启数据库连接用户审计</p></li><li><p>上线前数据库做一次备份</p></li><li><p>检查数据库监听地址和端口、禁止监听外网IP地址</p></li></ol><h2 id="5-代码控制"><a href="#5-代码控制" class="headerlink" title="5.代码控制"></a>5.代码控制</h2><ol><li><p>使用sonar进行代码质量检测</p></li><li><p>备份旧数据、做好回滚准备</p></li><li><p>jar包版本检查、检查内部jar包引用</p></li><li><p>检查 webshell 漏洞、SQL 注入漏洞等</p></li></ol><h2 id="6-监控和日志收集"><a href="#6-监控和日志收集" class="headerlink" title="6.监控和日志收集"></a>6.监控和日志收集</h2><ol><li><p>确保监控和日志收集的数据正确</p></li><li><p>确保异常监控警报可以触发并做好处理措施</p></li></ol><h2 id="7-监控"><a href="#7-监控" class="headerlink" title="7.监控"></a>7.监控</h2><ol><li>确保监控服务正常运行</li><li>确保监控指标采集正常</li><li>确保监控报警系统面对突发事故时能准时准确地通知到相应人员</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;拉清单？😂&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="linux" scheme="https://blog.502.li/tags/linux/"/>
    
      <category term="运维" scheme="https://blog.502.li/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Linux 内核读书笔记</title>
    <link href="https://blog.502.li/archives/kernel-note-book.html"/>
    <id>https://blog.502.li/archives/kernel-note-book.html</id>
    <published>2019-10-20T04:00:00.000Z</published>
    <updated>2019-12-06T06:03:19.234Z</updated>
    
    <content type="html"><![CDATA[<ol><li>在ps命令的输出中很容易识别内核线程，其名称都置于方括号内</li><li>linux内核把虚拟地址空间划分为两个部分：核心态和用户状态。两种状态的关键差别在于对高于TASK_SIZE的内存区域的访问</li><li>伙伴系统。 系统中的空闲内存块总是两两分组，每组中的两个内存块称作伙伴。伙伴的分配可以是彼此独立 的。但如果两个伙伴都是空闲的，内核会将其合并为一个更大的内存块，作为下一层次上某个内存块 的伙伴。</li><li>字符设备：提供连续的数据流，应用程序可以顺序读取，通常不支持随机存取。相反，此类 设备支持按字节/字符来读写数据。举例来说，调制解调器是典型的字符设备。</li><li><p>块设备：应用程序可以随机访问设备数据，程序可自行确定读取数据的位置。硬盘是典型的 块设备，应用程序可以寻址磁盘上的任何位置，并由此读取数据。此外，数据的读写只能以块（通常 是512B）的倍数进行。与字符设备不同，块设备并不支持基于字符的寻址。 编写块设备的驱动程序比字符设备要复杂得多，因为内核为提高系统性能广泛地使用了缓存 机制。</p></li><li><p>Linux使用了源于BSD的套接字抽象。 套接字可以看作应用程序、文件接口、内核的网络实现之间的代理</p></li><li><p>进程可以分为实时进程和非实时进程，硬实时进程有严格的时间限制，某些任务必须在指定的时限内完成。硬实时进程的关键特征是，它 们必须在可保证的时间范围内得到处理。Linux不支持硬实时处理。 软实时进程是硬实时进程的一种弱化形式。</p></li><li>抢占式多任务处理（preemptive multitasking)，各个进程都分配到一定的时间段 可以执行。时间段到期后，内核会从进程收回控制权，让一个不同的进程运行，而不考虑前一进程所 执行的上一个任务。被抢占进程的运行时环境，即所有CPU寄存器的内容和页表，都会保存起来，因 此其执行结果不会丢失。在该进程恢复执行时，其进程环境可以完全恢复。时间片的长度会根据进程</li><li>完全公平调度器（completely fair scheduler）在内核版本2.6.23开发期间合并进来。新的代码再 一次完全放弃了 原有的设计原则，例如，前一个调度器中为确保用户交互任务响应快速，需要许多启 发式原则。该调度器的关键特性是，它试图尽可能地模仿理想情况下的公平调度。此外，它不仅可以 调度单个进程，还能够处理更一般性的调度实体（scheduling entity）。例如，该调度器分配可用时间时， 可以首先在不同用户之间分配，接下来在各个用户的进程之间分配。</li><li>进程运行的状态：<br>10.1. 运行：该进程此刻正在执行。<br>10.2. 等待：进程能够运行，但没有得到许可，因为CPU分配给另一个进程。调度器可以在下一次 任务切换时选择该进程。<br>10.3. 睡眠：进程正在睡眠无法运行，因为它在等待一个外部事件。调度器无法在下一次任务切换 时选择该进程</li><li>僵尸进程的资源已经释放但在进程表中仍存在对应的表项</li><li>僵尸是如何产生的？其原因在于UNIX操作系统下进程创建和销毁的方式。在两种事件发生时， 程序将终止运行。第一，程序必须由另一个进程或一个用户杀死（通常是通过发送SIGTERM或SIGKILL 信号来完成，这等价于正常地终止进程）；进程的父进程在子进程终止时必须调用或已经调用wait4 （读做wait for）系统调用。 这相当于向内核证实父进程已经确认子进程的终结。该系统调用使得内核 可以释放为子进程保留的资源。 只有在第一个条件发生（程序终止）而第二个条件不成立的情况下（wait4），才会出现“僵尸” 状态。在进程终止之后，其数据尚未从进程表删除之前，进程总是暂时处于“僵尸”状态。有时候（例 如，如果父进程编程极其糟糕，没有发出wait调用），僵尸进程可能稳定地寄身于进程表中，直至下 一次系统重启。</li><li>内核抢占（kernel preemption）的选项添加到内核。 该选项支持 在紧急情况下切换到另一个进程，甚至当前是处于核心态执行系统调用（中断处理期间是不行的） 。 尽管内核会试图尽快执行系统调用，但对于依赖恒定数据流的应用程序来说，系统调用所需的时间仍 然太长了。内核抢占可以减少这样的等待时间，因而保证“更平滑的”程序执行。但该特性的代价是 增加内核的复杂度，因为接下来有许多数据结构需要针对并发访问进行保护，即使在单处理器系统上 也是如此。</li><li><p>Linux内核涉及进程和程序的所有算法都围绕一个名为task_struct的数据结构建立，该结构定 义在include/sched.h中。</p></li><li><p>Linux提供资源限制（resource limit，rlimit）机制，对进程使用系统资源施加某些限制。该机制利 用了task_struct中的rlim数组，数组项类型为struct rlimit。<br>打开文件的数目（RLIMIT_NOFILE，默认限制在1 024）。  每用户的大进程数（RLIMIT_NPROC），定义为max_threads/2。max_threads是一个全局变 量，指定了在把八分之一可用内存用于管理线程信息的情况下，可以创建的线程数目。在计 算时，提前给定了20个线程的小可能内存用量。</p></li><li>典型的UNIX进程包括：由二进制代码组成的应用程序、单线程（计算机沿单一路径通过代码， 不会有其他路径同时运行）、分配给应用程序的一组资源（如内存、文件等）。<br>16.1. fork生成当前进程的一个相同副本，该副本称之为子进程。原进程的所有资源都以适当的方 式复制到子进程，因此 该系统调用之后，原来的进程就有了两个独立的实例。这两个实例的 联系包括：同一组打开文件、同样的工作目录、内存中同样的数据（两个进程各有一份副本）， 等等。此外二者别无关联。<br>16.2. exec从一个可执行的二进制文件加载另一个应用程序，来代替当前运行的进程。加载了一个新程序。因为exec并不创建新进程，所以必须首先使用fork复制一个旧的程序， 然后调用exec在系统上创建另一个应用程序。<br>16.3. clone的工作原理基本上与fork相同，但新进程不是独立于父进程的， 而可以与其共享某些资源。写时复制，直至新进程对内存页执行写操作才会复制内存页面，这比在 执行fork时盲目地立即复制所有内存页要更高效。父子进程内存页之间的联系，只有对内核才是可见的，对应用 程序是透明的可以指定需要共享和复制的资源种类，例如，父进程的内存数据、打开文 件或安装的信号处理程序。 clone用于实现线程，但仅仅该系统调用不足以做到这一点，还需要用户空间库才能提供完整的 实现。线程库的例子，有Linuxthreads和Next Generation Posix Threads等</li><li>进程总是会分配一个号码用于在其命名空间中唯一地标识它们。简称PID。用fork或clone产生的每个进程都由内核自动地分配了一个新的唯一的PID值</li><li>task_struct数据结构提供了两个链表表头，用于实现进程家族关系</li><li>内核线程是直接由内核本身启动的进程。内核线程实际上是将内核函数委托给独立的进程，与系 统中其他进程“并行”执行（实际上，也并行于内核自身的执行）。<br>19.1. 内核线程经常称之为（内核）守 护进程。它们用于执行下列任务。<br>19.2. 周期性地将修改的内存页与页来源块设备同步（例如，使用mmap的文件映射）。<br>19.3. 如果内存页很少使用，则写入交换区。<br>19.4. 管理延时动作（deferred action）。<br>19.5. 实现文件系统的事务日志。</li><li>基本上，有两种类型的内核线程：<br>20.1.线程启动后一直等待，直至内核请求线程执行某一特定操作。<br>20.2.线程启动后按周期性间隔运行，检测特定资源的使用，在用量超出或低于预置的限制值时采取行动。内核使用这类线程用于连续监测任务。<br>调用kernel_thread函数可启动一个内核线程。其定义是特定于体系结构的，但原型总是相同的。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;ol&gt;
&lt;li&gt;在ps命令的输出中很容易识别内核线程，其名称都
        
      
    
    </summary>
    
    
      <category term="linux" scheme="https://blog.502.li/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 生态相关的博客文章汇总</title>
    <link href="https://blog.502.li/archives/knative-post.html"/>
    <id>https://blog.502.li/archives/knative-post.html</id>
    <published>2019-10-15T04:00:00.000Z</published>
    <updated>2019-12-06T06:03:19.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="独立博客列表"><a href="#独立博客列表" class="headerlink" title="独立博客列表"></a>独立博客列表</h2><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><table><thead><tr><th></th></tr></thead><tbody><tr><td><a href="http://gaocegege.com/Blog/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/katib-new" target="_blank" rel="noopener">云原生自动机器学习系统 kubeflow/katib 的设计与实现</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/kubernetes/operator-test" target="_blank" rel="noopener">Kubernetes Operator 测试面面观</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/kubernetes/kubecon-china-2019-reacp" target="_blank" rel="noopener">KubeCon China 2019 Recap</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/kubernetes/kubecon-china-2019" target="_blank" rel="noopener">KubeCon China 2019 机器学习相关 Talk 导览</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/kubernetes/kubebuilder-2" target="_blank" rel="noopener">Kubebuilder 新版本 Scaffolding 之我见</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/kubernetes/kubebuilder" target="_blank" rel="noopener">利用 kubebuilder 优化 Kubernetes Operator 开发体验</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/kfp" target="_blank" rel="noopener">Kubeflow Pipelines: 面向机器学习场景的流水线系统的使用与实现</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/kubernetes/operator" target="_blank" rel="noopener">Kubernetes CRD Operator 实现指南</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/%E9%9A%8F%E7%AC%94/gsoc-mentor" target="_blank" rel="noopener">Google Summer of Code, A Mentor’s Perspective</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/katib" target="_blank" rel="noopener">Katib: Kubernetes native 的超参数训练系统</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/kubeflow" target="_blank" rel="noopener">Kubeflow 安利：在 Kubernetes 上进行机器学习</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/kubernetes/kubernetes-localup" target="_blank" rel="noopener">Kubernetes hack/local-up-cluster.sh 无法启动 DNS 的问题溯源</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/%E9%9A%8F%E7%AC%94/killy" target="_blank" rel="noopener">Go Hack 17: Killy 日记</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/kubernetes-scheduler" target="_blank" rel="noopener">浅入了解容器编排框架调度器之 Kubernetes</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/%E5%AE%89%E5%88%A9/unikernel-book" target="_blank" rel="noopener">Unikernel：从不入门到入门</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/%E5%AE%89%E5%88%A9/micro-services" target="_blank" rel="noopener">微服务：从不入门到入门</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/%E9%9A%8F%E7%AC%94/apply-gsoc" target="_blank" rel="noopener">Google Summer of Code 学生申请指南</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/%E9%9A%8F%E7%AC%94/linuxcon" target="_blank" rel="noopener">LinuxCon Recap</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/%E9%9A%8F%E7%AC%94/gsoc2017" target="_blank" rel="noopener">Google Summer of Code(GSoC) 2017 纪实</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/moby/moby" target="_blank" rel="noopener">Moby 与 Docker 的关系</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/blog/duoshuo-disqus" target="_blank" rel="noopener">再议评论服务：从多说到 Disqus</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/%E9%98%85%E8%AF%BB/sre-0" target="_blank" rel="noopener">Google SRE 阅读笔记(1)-监控</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/csp/xen-kvm" target="_blank" rel="noopener">CSP课堂笔记之Hypervisor</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/csp/unikernel" target="_blank" rel="noopener">CSP课堂笔记之UniKernel</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/native-client" target="_blank" rel="noopener">Google Native Client论文阅读随笔</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/docker/dockercraft" target="_blank" rel="noopener">Dockercraft代码导读</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/docker-rambles" target="_blank" rel="noopener">Docker与Hyper</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/docker/dapper" target="_blank" rel="noopener">Build Docker Image的另一种选择</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/kubernetes/deploy-manager-with-kubernetes" target="_blank" rel="noopener">deploy manager中与kubernetes交互部分的代码阅读记录</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/distributed%20system/try-consul" target="_blank" rel="noopener">跨docker machine搭建Consul</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/kubernetes/spring-boot-in-kubernetes" target="_blank" rel="noopener">在Kubernetes中的Spring Boot项目部署</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/distributed%20system/ds-lab1" target="_blank" rel="noopener">MIT分布式系统Lab1分享</a></td></tr><tr><td><a href="http://gaocegege.com/Blog/programming-language/racket" target="_blank" rel="noopener">Racket里的特性</a></td></tr></tbody></table><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><table><thead><tr><th></th></tr></thead><tbody><tr><td><a href="https://www.aleiwu.com/post/kubecon-shanghai-2019/" target="_blank" rel="noopener">KubeCon 2019 上海 CRD 相关 Session 小记 Jul 27</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/tidb-operator-design/" target="_blank" rel="noopener">文稿分享记录：TiDB Operator 设计与实现 Jul 27</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/kubectl-debug-intro/" target="_blank" rel="noopener">简化 Pod 故障诊断: kubectl-debug 介绍 Jul 27</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/configmap-rollout-followup/" target="_blank" rel="noopener">Kubernetes 中的 ConfigMap 配置更新(续) May 15</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/alertmanager/" target="_blank" rel="noopener">搞搞 Prometheus: Alertmanager Apr 21</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/aliyun-exporter-bp/" target="_blank" rel="noopener">编写 Prometheus Exporter: 以阿里云 Exporter 为例 Apr 14</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/jsonnet-grafana/" target="_blank" rel="noopener">Jsonnet 简明教程与应用 Apr 7</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/kubectl-guru/" target="_blank" rel="noopener">Kubectl 效率提升指北 Mar 31</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/prometheus-operator/" target="_blank" rel="noopener">搞搞 Prometheus：Prometheus Operator Mar 24</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/tidb-opeartor-webhook/" target="_blank" rel="noopener">Kubernetes 中如何保证优雅地停止 Pod Mar 17</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/cncf-runtime-landscape/" target="_blank" rel="noopener">白话 Kubernetes Runtime Mar 6</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/configmap-hotreload/" target="_blank" rel="noopener">Kubernetes Pod 中的 ConfigMap 配置更新 Feb 24</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/prometheus-bp/" target="_blank" rel="noopener">Prometheus 不完全避坑指南 Feb 16</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/interview-experience/" target="_blank" rel="noopener">写在19年初的后端社招面试经历(两年经验): 蚂蚁 头条 PingCAP Jan 28</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/grafana-loki/" target="_blank" rel="noopener">云原生下的日志新玩法: Grafana loki 源码解析 Dec 14</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/linux-memory-monitring/" target="_blank" rel="noopener">Linux Slab 导致的内存使用率误报警 Nov 27</a></td></tr><tr><td><a href="https://www.aleiwu.com/post/vimur.cn/" target="_blank" rel="noopener">基于 Kafka 与 Debezium 构建实时数据管道 Sep 6</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;独立博客列表&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://blog.502.li/tags/kubernetes/"/>
    
      <category term="k8s" scheme="https://blog.502.li/tags/k8s/"/>
    
      <category term="blog" scheme="https://blog.502.li/tags/blog/"/>
    
  </entry>
  
</feed>
