<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子</title>
  
  <subtitle>时光痕迹</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.502.li/"/>
  <updated>2020-01-02T14:44:08.529Z</updated>
  <id>https://blog.502.li/</id>
  
  <author>
    <name>木子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VPS 安全加固之用户登陆后向 telegram 发送登录信息</title>
    <link href="https://blog.502.li/archives/linux-login-alarm-telegram.html"/>
    <id>https://blog.502.li/archives/linux-login-alarm-telegram.html</id>
    <published>2020-01-02T05:00:00.000Z</published>
    <updated>2020-01-02T14:44:08.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="弄啥咧"><a href="#弄啥咧" class="headerlink" title="弄啥咧"></a>弄啥咧</h2><ul><li>汝担心自己服务器挂了吗？</li><li>汝担心服务器被爆破脱裤？</li><li>汝担心非法用户登录服务器😂</li><li>汝的服务器使用口令登录，而且还是 123456 的那种😂</li></ul><p>虽然，咱拿到 VPS 第一件事儿就是禁止密码登录，禁止 root 登录，仅仅允许普通用户使用密钥登录。理论上来讲，只要我的私钥不泄露，想要爆破登录上去，不可能、不可能、不可能😂。AES-256 密钥的机密强度，即便是穷尽最强的超算来破解，也得需要几十年。</p><p>那么，有什么办法当用户登录到服务器上时发送个警报信息到咱手机上，来确认是咱本人或者是咱授权的用户登录。发送信息到咱手机，且及时能收到的话，常见的就这三种：</p><h3 id="通过-email"><a href="#通过-email" class="headerlink" title="通过 email"></a>通过 email</h3><p>email 发送确实可以，但有些限制，比如 GCP 就 ban 掉了 GCE 的 25 端口，常规手段就无法发送邮件了。而且，Linux 命令行下配置 Email 的发送客户端实在是令人头疼。遂就弃坑啦😂，折腾起来不方便。</p><h3 id="通过手机"><a href="#通过手机" class="headerlink" title="通过手机"></a>通过手机</h3><p>之前我是使用 twiio 的短信服务来发送信息的，通过 twiio 的 api 很简单地就能发送，不想 email 那样配来陪去地，使用一条 curl 命令就能完成发送短信到手机。不过 twiio 很有限制，免费用户会有 10$ 的额度，而且需要绑定信用卡，也比较麻烦，遂卒😂</p><h3 id="通过-telegram-bot"><a href="#通过-telegram-bot" class="headerlink" title="通过 telegram bot"></a>通过 telegram bot</h3><p>主角上场啦，就是咱们大名鼎鼎的电报机器人啦。不得不说 telegram 真心很好用啊，聊天功能比微信QQ这种狗屎玩意儿高到不知道哪里去了。反正我很讨厌恶心使用微信和QQ，这种毒瘤软件。功能臃肿无比而且最基本的消息同步功能做的跟狗屎一样烂。呵呵，也就这样烂狗屎软件却垄断了国内聊天软件。而 telegram 只把聊天功能做到优秀，其开放的电报机器人更是催生出了无数有趣且实用的机器人。而且啊，你用 telegram bot 不需要实名认证、也不需要你上传身份证。</p><p>通过 telegram 的 api ，使用 bot 你可以很轻松地向自己发送消息，比微信QQ 那种狗屎玩意好用的多。</p><blockquote><p>  需要注意的是，如果是 IOS 用户的话，通过 IOS 的通知消息推送机制，可以不挂梯子就能正常收到 telegram 的通知。包括其他需要挂梯子的应用也是，比如 Google voice。</p></blockquote><h2 id="怎么弄"><a href="#怎么弄" class="headerlink" title="怎么弄"></a>怎么弄</h2><h3 id="首先有个-telegram-账号"><a href="#首先有个-telegram-账号" class="headerlink" title="首先有个 telegram 账号"></a>首先有个 telegram 账号</h3><p>网上教程很多，在此不赘述。推荐某宝买个 Google Voice 来注册，千万千万不要使用 +86 手机号注册，注册完成之后墙裂建议在 app 或者桌面端 的<code>settings</code> ==&gt; <code>Privacy and  Security</code> 那些设置选项里全部设置为 <code>Nobody</code> 。另外再开启 <code>Local Passcode</code> 以及 <code>Two-setp verification</code> 。千千万万别拿着 +86 的手机号到处冲塔，你快很被安排上的。</p><p><img src="../img/image-20200102212730956.png" alt="image-20200102212730956"></p><h3 id="注册-bot"><a href="#注册-bot" class="headerlink" title="注册 bot"></a>注册 bot</h3><h4 id="1-打开与-BotFather-的对话框"><a href="#1-打开与-BotFather-的对话框" class="headerlink" title="1.打开与 @BotFather 的对话框"></a>1.打开与 @BotFather 的对话框</h4><p><img src="../img/image-20200102213100935.png" alt="image-20200102213100935"></p><h4 id="2-发送-start-开始会话"><a href="#2-发送-start-开始会话" class="headerlink" title="2.发送/start 开始会话"></a>2.发送/start 开始会话</h4><p><img src="../img/image-20200102213250311.png" alt="image-20200102213250311"></p><h4 id="3-发送-newbot"><a href="#3-发送-newbot" class="headerlink" title="3.发送/newbot"></a>3.发送/newbot</h4><p><img src="../img/image-20200102213314119.png" alt="image-20200102213314119"></p><blockquote><p>  Alright, a new bot. How are we going to call it? Please choose a name for your bot.</p></blockquote><h4 id="4-发送-Bot-的名字（昵称）"><a href="#4-发送-Bot-的名字（昵称）" class="headerlink" title="4.发送 Bot 的名字（昵称）"></a>4.发送 Bot 的名字（昵称）</h4><blockquote><p>  Good. Now let’s choose a username for your bot. It must end in <code>bot</code>. Like this, for example: TetrisBot or tetris_bot.</p></blockquote><p><img src="../img/image-20200102213405851.png" alt="image-20200102213405851"></p><p>bot 的名字有要求，最好以 <code>xxx_bot</code> 来命名 比如 <code>linuxlogin_bot</code></p><h4 id="5-得到-Bot-的-token，用于标识这个-Bot"><a href="#5-得到-Bot-的-token，用于标识这个-Bot" class="headerlink" title="5.得到 Bot 的 token，用于标识这个 Bot"></a>5.得到 Bot 的 token，用于标识这个 Bot</h4><p><img src="../img/image-20200102214900940.png" alt="image-20200102214900940"></p><blockquote><p>  Done! Congratulations on your new bot. You will find it at t.me/linuxlogin_bot. You can now add a description, about section and profile picture for your bot, see /help for a list of commands. By the way, when you’ve finished creating your cool bot, ping our Bot Support if you want a better username for it. Just make sure the bot is fully operational before you do this.</p><p>  Use this token to access the HTTP API:</p><p>  1067765083:AAFjONxxx-F2Y6IRSxxxxxVAAgRxxx89MXpk</p><p>  Keep your token secure and store it safely, it can be used by anyone to control your bot.</p><p>  For a description of the Bot API, see this page: <a href="https://core.telegram.org/bots/api" target="_blank" rel="noopener">https://core.telegram.org/bots/api</a></p></blockquote><p>由上面得到的<code>1067765083:AAFjONxxx-F2Y6x89MXpk</code> 格式的字符串为该 bot 的 token，发送信息需要这个 token ，要保存好，不要泄露出去。</p><h4 id="6-得到自己的-chat-ID"><a href="#6-得到自己的-chat-ID" class="headerlink" title="6.得到自己的 chat ID"></a>6.得到自己的 chat ID</h4><p>telegram 中每个用户、频道、群组都会有一个 chat ID ，而 telegram bot 的 chat ID 就是你自己，也就是说，bot 机器人想你发送信息是通过你的 ID 来标识的，也可以将 bot 加入到频道或者群组中，向群组中发送信息。</p><p>通过 <code>@getidsbot</code> 这个机器人来获取自己的 ID，ID 一般都是 6 开头的。</p><p><img src="../img/image-20200102220002156.png" alt="image-20200102220002156"></p><h4 id="7-和-bot-对话"><a href="#7-和-bot-对话" class="headerlink" title="7. 和 bot 对话"></a>7. 和 bot 对话</h4><p>这一步非常重要，当 bot 新建完成之后就点击你的 bot 链接，然后在点击下面的 start 按钮。你不点击 start 开始和 bot 会话的话，bot 是无法想你发送信息的。我就在这个坑里爬了很久😂</p><p><img src="../img/image-20200102215325530.png" alt="image-20200102215325530"></p><h4 id="7-构造-GET-请求"><a href="#7-构造-GET-请求" class="headerlink" title="7.构造 GET 请求"></a>7.构造 GET 请求</h4><p>可以参考 telegram bot api 的官方文档<a href="https://core.telegram.org/bots/api" target="_blank" rel="noopener">Telegram Bot API</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot（ 这里加上你的token ）/sendMessage?chat_id=66666666 &amp;text=message</span><br></pre></td></tr></table></figure><ul><li>例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot1067796083:AAFjONLJ9-F2Y6IRSmQoBVAAgRhd589MXpk/sendMessage?chat_id=613640483&amp;text=message</span><br></pre></td></tr></table></figure><p>把这段 <code>url</code> 复制粘贴到浏览器测试一下即可，或者通过 <code>curl</code> &amp; <code>wge</code>t 命令也可以。看看你的 telegram 能否正常接受消息。如果出现的话，恭喜你成功了第一步😂</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"ok"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"result"</span>: &#123;</span><br><span class="line">    <span class="attr">"message_id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"from"</span>: &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">13</span>,</span><br><span class="line">      <span class="attr">"is_bot"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"first_name"</span>: <span class="string">"linuxloginbot"</span>,</span><br><span class="line">      <span class="attr">"username"</span>: <span class="string">"linuxlogin_bot"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"chat"</span>: &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">13</span>,</span><br><span class="line">      <span class="attr">"first_name"</span>: <span class="string">"木子"</span>,</span><br><span class="line">      <span class="attr">"username"</span>: <span class="string">"muzi_ii"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"private"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"date"</span>: <span class="number">1577973988</span>,</span><br><span class="line">    <span class="attr">"text"</span>: <span class="string">"message"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../img/image-20200102220642854.png" alt="image-20200102220642854"></p><h4 id="8-用户登陆后执行脚本"><a href="#8-用户登陆后执行脚本" class="headerlink" title="8.用户登陆后执行脚本"></a>8.用户登陆后执行脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># filename: 00-ssh-login-alarm-telegram.sh</span></span><br><span class="line"><span class="comment"># date: 2019-12-18</span></span><br><span class="line"><span class="comment"># for: ssh login alarm to telegram</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># token 和 id 修改为自己的</span></span><br><span class="line">token=97xxx718:AAExExPY9zxxxxxQ0L7iA2MCGYRQ</span><br><span class="line">id=613420483</span><br><span class="line"></span><br><span class="line">message=$(hostname &amp;&amp; TZ=UTC-8 date &amp;&amp; who &amp;&amp; w | awk  <span class="string">'BEGIN&#123;OFS="\t"&#125;&#123;print $1,$8&#125;'</span>)</span><br><span class="line"></span><br><span class="line">curl -s <span class="string">"https://api.telegram.org/bot<span class="variable">$&#123;token&#125;</span>/sendMessage?chat_id=<span class="variable">$&#123;id&#125;</span>"</span> --data-binary <span class="string">"&amp;text=<span class="variable">$&#123;message&#125;</span>"</span></span><br></pre></td></tr></table></figure><ul><li>将该脚本放到 <code>/etc/profile.d/</code> 目录下，并 把该脚本的权限设置为<code>555</code> ，即任何用户都可执行。</li><li><code>/etc/profile.d/</code> 下的脚本文件会在用户登录成功后自动执行，如还需要其他的操作追加在脚本里即可。</li><li>message 需要传递的数据根据自身需求设定即可，通过 <code>&amp;&amp;</code>  将多个命令的执行结果传递到 message 变量。<code>hostname</code> 获取主机名，以区分多台服务器；<code>TZ=UTC-8 date</code> 来获取登录时刻的北京时间；<code>who</code> 用来获取当前用户和 IP 等信息；<code>w</code> 命令用于获取当前用户登陆后执行的命令。</li></ul><h4 id="大功告成啦"><a href="#大功告成啦" class="headerlink" title="大功告成啦"></a>大功告成啦</h4><p>ssh 退出登录，测试一下😋</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Oracle</span><br><span class="line">Thu Jan  2 22:23:33 UTC 2020</span><br><span class="line">ubuntu   pts/0        2020-01-02 09:23 (5.129.16.28)</span><br><span class="line">09:23:33 load</span><br><span class="line">USER WHAT</span><br><span class="line">ubuntu -bash</span><br></pre></td></tr></table></figure><p><img src="../img/image-20200102222349027.png" alt="image-20200102222349027"></p><h2 id="解锁其他功能？"><a href="#解锁其他功能？" class="headerlink" title="解锁其他功能？"></a>解锁其他功能？</h2><h3 id="监控某个端口是否存活"><a href="#监控某个端口是否存活" class="headerlink" title="监控某个端口是否存活"></a>监控某个端口是否存活</h3><p>这个适用于宿舍，比如，我的笔记本使用 frpc 和服务器端的 frps 保持长连接，如果我的笔记本被盗或者网络挂了，那么服务端的端口会 down 掉的，通过监控这个端口来判断笔记本的状态。只要笔记本和 frps 断掉就发送警报信息到 telegram。</p><h3 id="发送-nginx-当日访问量最高的链接"><a href="#发送-nginx-当日访问量最高的链接" class="headerlink" title="发送 nginx 当日访问量最高的链接"></a>发送 nginx 当日访问量最高的链接</h3><p>因为不喜欢 Google Analytics 来在自己的博客上收集读者们的隐私数据，所以就自己手搓脚本，通过 nginx 日志来获取博客访问数据。简单粗暴😂</p><h3 id="发送服务器监控信息"><a href="#发送服务器监控信息" class="headerlink" title="发送服务器监控信息"></a>发送服务器监控信息</h3><p>服务器磁盘满了；服务器被日了；服务器被 down 掉了……</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;弄啥咧&quot;&gt;&lt;a href=&quot;#弄啥咧&quot;
        
      
    
    </summary>
    
    
      <category term="linux" scheme="https://blog.502.li/tags/linux/"/>
    
      <category term="telegram" scheme="https://blog.502.li/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile 搓镜像的小技巧</title>
    <link href="https://blog.502.li/archives/dockerfile-tips.html"/>
    <id>https://blog.502.li/archives/dockerfile-tips.html</id>
    <published>2020-01-02T05:00:00.000Z</published>
    <updated>2020-01-02T14:44:08.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dockerfile-最佳实践"><a href="#Dockerfile-最佳实践" class="headerlink" title="Dockerfile 最佳实践"></a>Dockerfile 最佳实践</h2><p>关于 Dockerfile 最佳实践的博客，网上已经有很多很多啦，咱在这里就不赘述啦。在这里分享几个搓镜像的小技巧，尤其是针对于咱大陆的用户😂。</p><ul><li><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/" target="_blank" rel="noopener">Best practices for writing Dockerfiles</a> 推荐看一下官方博客上写的</li><li><a href="https://yeasy.gitbooks.io/docker_practice/appendix/best_practices.html#dockerfile-最佳实践" target="_blank" rel="noopener">Dockerfile 最佳实践</a> </li><li><a href="https://github.com/docker-library" target="_blank" rel="noopener">docker-library</a>/<strong><a href="https://github.com/docker-library/docs" target="_blank" rel="noopener">docs</a></strong> 官方示例</li></ul><h2 id="几个搓镜像的小技巧"><a href="#几个搓镜像的小技巧" class="headerlink" title="几个搓镜像的小技巧"></a>几个搓镜像的小技巧</h2><h4 id="构建上下文"><a href="#构建上下文" class="headerlink" title="构建上下文"></a>构建上下文</h4><p>执行 <code>docker build</code> 命令时，当前的工作目录被称为构建上下文。默认情况下，Dockerfile 就位于该路径下。也可以通过 -f 参数来指定 dockerfile ，但 docker 客户端会将当前工作目录下的所有文件发送到 docker 守护进程进行构建。所以来说，当执行 docker build 进行构建镜像时，当前目录一定要 <code>干净</code> ，切记不要在家里录下创建一个 <code>Dockerfile</code>  紧接着 <code>docker build</code> 一把梭 😂。</p><p>正确做法是为项目建立一个文件夹，把构建镜像时所需要的资源放在这个文件夹下。比如这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir project</span><br><span class="line"><span class="built_in">cd</span> !$</span><br><span class="line">vi Dockerfile</span><br><span class="line"><span class="comment"># 编写 Dockerfile</span></span><br></pre></td></tr></table></figure><blockquote><p>tips：也可以通过 <code>.dockerignore</code> 文件来忽略不需要的文件发送到 docker 守护进程</p></blockquote><h4 id="基础镜像"><a href="#基础镜像" class="headerlink" title="基础镜像"></a>基础镜像</h4><p>使用体积较小的基础镜像，比如 <code>alpine</code> 或者  <code>debian:buster-slim</code>，像 openjdk 可以选用<code>openjdk:xxx-slim</code> ，由于 openjdk 是基于 debian 的基础镜像构建的，所以向 debian 基础镜像一样，后面带个 <code>slim</code> 就是基于 <code>debian:xxx-slim</code> 镜像构建的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">debian                      buster-slim         e1af56d072b8        4 days ago          69.2MB</span><br><span class="line">alpine                      latest              cc0abc535e36        8 days ago          5.59MB</span><br></pre></td></tr></table></figure><p>不过需要注意的是，alpine 的 c 库是 <code>musl libc</code> ，而不是正统的 <code>glibc</code> ，另外对于一些依赖 <code>glibc</code> 的大型项目，像 openjdk 、tomcat、rabbitmq 等都不建议使用 alpine 基础镜像，因为 <code>musl libc</code> 可能会导致 jvm 一些奇怪的问题。这也是为什么 tomcat 官方没有给出基础镜像是 alpine 的 Dockerfile 的原因。</p><h4 id="国内软件源"><a href="#国内软件源" class="headerlink" title="国内软件源"></a>国内软件源</h4><p>使用默认的软件源安装构建时所需的依赖，对于绝大多数基础镜像来说，在国内网络环境构建时的速度较慢，可以通过修改软件源的方式更换为国内的软件源镜像站。目前国内稳定可靠的镜像站主要有，华为云、阿里云、腾讯云、163等。对于咱的网络环境，华为云的镜像站速度最快，平均 10MB/s，峰值可达到 20MB/s，极大的能加快构建镜像的速度。可以参考我曾经写过的一篇 <a href="https://blog.502.li/archives/mirrors-test.html">国内软件源镜像站伪评测</a></p><ul><li>对于  alpine 基础镜像修改软件源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"http://mirrors.huaweicloud.com/alpine/latest-stable/main/"</span> &gt; /etc/apk/repositories ;\</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://mirrors.huaweicloud.com/alpine/latest-stable/community/"</span> &gt;&gt; /etc/apk/repositories ;\</span><br><span class="line">apk update ;\</span><br></pre></td></tr></table></figure><ul><li>debian 基础镜像修改默认原件源码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/deb.debian.org/mirrors.huaweicloud.com/g'</span> /etc/apt/sources.list ;\</span><br><span class="line">sed -i <span class="string">'s|security.debian.org/debian-security|mirrors.huaweicloud.com/debian-security|g'</span> /etc/apt/sources.list ;\</span><br><span class="line">apt update ;\</span><br></pre></td></tr></table></figure><ul><li>Ubuntu 基础镜像修改默认原件源码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/archive.ubuntu.com/mirrors.huaweicloud.com/g'</span> /etc/apt/sources.list</span><br><span class="line">apt update ;\</span><br></pre></td></tr></table></figure><ul><li>对于 CentOS ??? 大哥，你确定要用 220MB 大小的基础镜像？</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos                      latest              0f3e07c0138f        3 months ago        220MB</span><br></pre></td></tr></table></figure><p>建议这些命令就放在 RUN 指令的第一条，update 以下软件源，之后再 install 相应的依赖。</p><h4 id="时区设置"><a href="#时区设置" class="headerlink" title="时区设置"></a>时区设置</h4><p>由于绝大多数基础镜像都是默认采用 UTC 的时区，与北京时间相差 8 个小时，这将会导致容器内的时间与北京时间不一致，因而会对一些应用造成一些影响，还会影响容器内日志和监控的数据。因此对于东八区的用户，最好在构建镜像的时候设定一下容器内的时区，一以免以后因为时区遇到一些 bug😂。可以通过环境变量设置容器内的时区。在启动的时候可以通过设置环境变量<code>-e TZ=Asia/Shanghai</code> 来设定容器内的时区。</p><h5 id="alpine"><a href="#alpine" class="headerlink" title="alpine"></a>alpine</h5><ul><li>但对于 alpine 基础镜像无法通过 <code>TZ</code> 环境变量的方式设定时区，需要安装 <code>tzdata</code> 来配置时区。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/docke/alpine<span class="comment"># docker run --rm -it -e TZ=Asia/Shanghai alpine date</span></span><br><span class="line">Thu Jan  2 03:37:44 UTC 2020</span><br></pre></td></tr></table></figure><ul><li>对于 alpine 基础镜像，可以在 RUN 指令后面追加上以下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apk add --no-cache tzdata ;\</span><br><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime ;\</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone ;\</span><br><span class="line">apk del tzdata ;\</span><br></pre></td></tr></table></figure><ul><li>通过 tzdate 设定时区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/docke/alpine<span class="comment"># docker build -t alpine:tz2 .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/2 : FROM alpine</span><br><span class="line"> ---&gt; cc0abc535e36</span><br><span class="line">Step 2/2 : RUN <span class="built_in">set</span> -xue ;    <span class="built_in">echo</span> <span class="string">"http://mirrors.huaweicloud.com/alpine/latest-stable/main/"</span> &gt; /etc/apk/repositories ;    <span class="built_in">echo</span> <span class="string">"http://mirrors.huaweicloud.com/alpine/latest-stable/community/"</span> &gt;&gt; /etc/apk/repositories ;    apk update ;    apk add --no-cache tzdata ;    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime ;    <span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone ;    apk del tzdata</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 982041a34dbf</span><br><span class="line">+ <span class="built_in">echo</span> http://mirrors.huaweicloud.com/alpine/latest-stable/main/</span><br><span class="line">+ <span class="built_in">echo</span> http://mirrors.huaweicloud.com/alpine/latest-stable/community/</span><br><span class="line">+ apk update</span><br><span class="line">fetch http://mirrors.huaweicloud.com/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://mirrors.huaweicloud.com/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">v3.11.2-11-gd5cdcefa20 [http://mirrors.huaweicloud.com/alpine/latest-stable/main/]</span><br><span class="line">v3.11.2-14-g973431591e [http://mirrors.huaweicloud.com/alpine/latest-stable/community/]</span><br><span class="line">OK: 11261 distinct packages available</span><br><span class="line">+ apk add --no-cache tzdata</span><br><span class="line">fetch http://mirrors.huaweicloud.com/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://mirrors.huaweicloud.com/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(1/1) Installing tzdata (2019c-r0)</span><br><span class="line">Executing busybox-1.31.1-r8.trigger</span><br><span class="line">OK: 9 MiB <span class="keyword">in</span> 15 packages</span><br><span class="line">+ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">+ <span class="built_in">echo</span> Asia/Shanghai</span><br><span class="line">+ apk del tzdata</span><br><span class="line">(1/1) Purging tzdata (2019c-r0)</span><br><span class="line">Executing busybox-1.31.1-r8.trigger</span><br><span class="line">OK: 6 MiB <span class="keyword">in</span> 14 packages</span><br><span class="line">Removing intermediate container 982041a34dbf</span><br><span class="line"> ---&gt; 3ec89f3e824d</span><br><span class="line">Successfully built 3ec89f3e824d</span><br><span class="line">Successfully tagged alpine:tz2</span><br><span class="line">root@ubuntu:~/docke/alpine<span class="comment"># docker run --rm -it alpine:tz2 date</span></span><br><span class="line">Thu Jan  2 11:12:23 CST 2020</span><br></pre></td></tr></table></figure><h5 id="debian"><a href="#debian" class="headerlink" title="debian"></a>debian</h5><ul><li>通过启动时设定环境变量指定时区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/docke/alpine<span class="comment"># docker run --rm -it -e TZ=Asia/Shanghai debian date</span></span><br><span class="line">Thu Jan  2 11:38:56 CST 2020</span><br></pre></td></tr></table></figure><ul><li>也可以再构建镜像的时候复制时区文件设定容器内时区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime ;\</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Asia/shanghai"</span> &gt; /etc/timezone ;\</span><br></pre></td></tr></table></figure><h5 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h5><ul><li>通过启动时设定环境变量指定时区，发射失败😂，只能通过时区文件来设定时区了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/docke/alpine<span class="comment"># docker run --rm -it -e TZ=Asia/Shanghai debian date</span></span><br><span class="line">Thu Jan  2 11:38:56 CST 2020</span><br><span class="line"></span><br><span class="line">root@ubuntu:~/docke/alpine<span class="comment"># ^debian^ubuntu</span></span><br><span class="line">docker run --rm -it -e TZ=Asia/Shanghai ubuntu date</span><br><span class="line">Thu Jan  2 03:44:13 Asia 2020</span><br></pre></td></tr></table></figure><blockquote><p>在这里有个命令执行的小技巧，通过脱字符 <code>^</code> 来替换上一条命令中的 debian 为 ubuntu 然后执行相同的命令😂</p></blockquote><ul><li>通过时区文件来设定时区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt </span><br><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime ;\</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Asia/shanghai"</span> &gt; /etc/timezone ;\</span><br></pre></td></tr></table></figure><h4 id="尽量使用-URL-添加源码"><a href="#尽量使用-URL-添加源码" class="headerlink" title="尽量使用 URL 添加源码"></a>尽量使用 URL 添加源码</h4><p>如果不采用分阶段构建，对于一些需要在容器内进行编译的项目，最好通过 git 或者 wegt 的方式将源码打入到镜像内，而非采用 ADD 或者 COPY ，因为源码编译完成之后，源码就不需要可以删掉了，而通过 ADD 或者 COPY 添加进去的源码已经用在下一层镜像中了，是删不掉滴啦。也就是说 <code>git &amp; wget source</code> 然后 <code>build</code> ，最后 <code>rm -rf source/</code> 这三部放在一条 RUN 指令中，这样就能避免源码添加到镜像中而增大镜像体积啦。</p><p>下面以 FastDFS 的 Dockerfile 为例</p><ul><li>项目官方的 <a href="https://github.com/happyfish100/fastdfs/blob/52ac538a71fc9753c9dbcd4c75f581e9402f39a5/docker/dockerfile_local/Dockerfile" target="_blank" rel="noopener">Dockerfile</a></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centos 7</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="comment"># 添加配置文件</span></span><br><span class="line"><span class="comment"># add profiles</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/client.conf /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/http.conf /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/mime.types /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/storage.conf /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/tracker.conf /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> fastdfs.sh /home</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/nginx.conf /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/mod_fastdfs.conf /etc/fdfs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加源文件</span></span><br><span class="line"><span class="comment"># add source code</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="built_in">source</span>/libfastcommon.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="built_in">source</span>/fastdfs.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="built_in">source</span>/fastdfs-nginx-module.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="built_in">source</span>/nginx-1.15.4.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim -y \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  mkdir /home/dfs   \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/  \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  <span class="built_in">cd</span> libfastcommon/   \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  ./make.sh &amp;&amp; ./make.sh install  \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  <span class="built_in">cd</span> ../  \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  <span class="built_in">cd</span> fastdfs/   \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  ./make.sh &amp;&amp; ./make.sh install  \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  <span class="built_in">cd</span> ../  \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  <span class="built_in">cd</span> nginx-1.15.4/  \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  ./configure --add-module=/usr/<span class="built_in">local</span>/src/fastdfs-nginx-module/src/   \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  make &amp;&amp; make install  \</span></span><br><span class="line"><span class="bash">  &amp;&amp;  chmod +x /home/fastdfs.sh</span></span><br><span class="line"><span class="comment"># export config</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /etc/fdfs</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">22122</span> <span class="number">23000</span> <span class="number">8888</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/home/fastdfs.sh"</span>]</span></span><br></pre></td></tr></table></figure><ul><li>经过本人优化后的 <a href="https://github.com/happyfish100/fastdfs/issues/327" target="_blank" rel="noopener">Dockerfile</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.10</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">set</span> -x \</span><br><span class="line">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"http://mirrors.huaweicloud.com/alpine/latest-stable/main/"</span> &gt; /etc/apk/repositories \</span><br><span class="line">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"http://mirrors.huaweicloud.com/alpine/latest-stable/community/"</span> &gt;&gt; /etc/apk/repositories \</span><br><span class="line">    &amp;&amp; apk update \</span><br><span class="line">    &amp;&amp; apk add --no-cache --virtual .build-deps gcc libc-dev make perl-dev openssl-dev pcre-dev zlib-dev git \</span><br><span class="line">    &amp;&amp; mkdir -p /usr/<span class="built_in">local</span>/src \</span><br><span class="line">    &amp;&amp; <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src \</span><br><span class="line">    &amp;&amp; git <span class="built_in">clone</span> https://github.com/happyfish100/libfastcommon.git --depth 1 \</span><br><span class="line">    &amp;&amp; git <span class="built_in">clone</span> https://github.com/happyfish100/fastdfs.git --depth 1    \</span><br><span class="line">    &amp;&amp; git <span class="built_in">clone</span> https://github.com/happyfish100/fastdfs-nginx-module.git --depth 1  \</span><br><span class="line">    &amp;&amp; wget http://nginx.org/download/nginx-1.15.4.tar.gz \</span><br><span class="line">    &amp;&amp; tar -xf nginx-1.15.4.tar.gz \</span><br><span class="line">    &amp;&amp; <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/libfastcommon \</span><br><span class="line">    &amp;&amp; ./make.sh \</span><br><span class="line">    &amp;&amp; ./make.sh install \</span><br><span class="line">    &amp;&amp; <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/fastdfs/ \</span><br><span class="line">    &amp;&amp; ./make.sh \</span><br><span class="line">    &amp;&amp; ./make.sh install \</span><br><span class="line">    &amp;&amp; <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/nginx-1.15.4/ \</span><br><span class="line">    &amp;&amp; ./configure --add-module=/usr/<span class="built_in">local</span>/src/fastdfs-nginx-module/src/ \</span><br><span class="line">    &amp;&amp; make &amp;&amp; make install \</span><br><span class="line">    &amp;&amp; apk del .build-deps \</span><br><span class="line">    &amp;&amp; apk add --no-cache pcre-dev bash \</span><br><span class="line">    &amp;&amp; mkdir -p /home/dfs  \</span><br><span class="line">    &amp;&amp; mv /usr/<span class="built_in">local</span>/src/fastdfs/docker/dockerfile_network/fastdfs.sh /home \</span><br><span class="line">    &amp;&amp; mv /usr/<span class="built_in">local</span>/src/fastdfs/docker/dockerfile_network/conf/* /etc/fdfs \</span><br><span class="line">    &amp;&amp; chmod +x /home/fastdfs.sh \</span><br><span class="line">    &amp;&amp; rm -rf /usr/<span class="built_in">local</span>/src*</span><br><span class="line">VOLUME /home/dfs</span><br><span class="line">EXPOSE 22122 23000 8888 8080</span><br><span class="line">CMD [<span class="string">"/home/fastdfs.sh"</span>]</span><br></pre></td></tr></table></figure><ul><li>构建之后的对比</li></ul><p>使用项目默认的 Dockerfile 进行构建的话，镜像大小接近 500MB 😂，而经过一些的优化，将所有的 RUN 指令合并为一条，最终构建出来的镜像大小为 30MB 😂。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">fastdfs             alpine              e855bd197dbe        10 seconds ago      29.3MB</span><br><span class="line">fastdfs             debian              e05ca1616604        20 minutes ago      103MB</span><br><span class="line">fastdfs             centos              c1488537c23c        30 minutes ago      483MB</span><br></pre></td></tr></table></figure><h4 id="使用虚拟编译环境"><a href="#使用虚拟编译环境" class="headerlink" title="使用虚拟编译环境"></a>使用虚拟编译环境</h4><p>对于只在编译过程中使用到的依赖，我们可以将这些依赖安装在虚拟环境中，编译完成之后可以一并删除这些依赖，比如 alpine 中可以使用 <code>apk add --no-cache --virtual .build-deps</code>  ，后面加上需要安装的相关依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add --no-cache --virtual .build-deps gcc libc-dev make perl-dev openssl-dev pcre-dev zlib-dev git</span><br></pre></td></tr></table></figure><p>构建完成之后可以使用 <code>apk del .build-deps</code> 命令，一并将这些编译依赖全部删除。需要注意的是，<code>.build-deps</code> 后面接的是编译时以来的软件包，并不是所有的编译依赖都可以删除，不要把运行时的依赖包接在后面，最好单独 add 一下。</p><h4 id="最小化层数"><a href="#最小化层数" class="headerlink" title="最小化层数"></a>最小化层数</h4><p>docker 在 1.10 以后，只有 <code>RUN、COPY 和 ADD</code> 指令会创建层，其他指令会创建临时的中间镜像，但是不会直接增加构建的镜像大小了。前文提到了建议使用 git 或者 wget 的方式来将文件打入到镜像当中，但如果我们必须要使用 COPY 或者 ADD 指令呢？</p><p>还是拿 FastDFS 为例:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centos 7</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="comment"># 添加配置文件</span></span><br><span class="line"><span class="comment"># add profiles</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/client.conf /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/http.conf /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/mime.types /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/storage.conf /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/tracker.conf /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> fastdfs.sh /home</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/nginx.conf /etc/fdfs/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> conf/mod_fastdfs.conf /etc/fdfs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加源文件</span></span><br><span class="line"><span class="comment"># add source code</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="built_in">source</span>/libfastcommon.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="built_in">source</span>/fastdfs.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="built_in">source</span>/fastdfs-nginx-module.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="built_in">source</span>/nginx-1.15.4.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br></pre></td></tr></table></figure><p>多个文件需要添加到容器中不同的路径，每个文件使用一条 ADD 指令的话就会增加一层镜像，这样戏曲就多了 12 层镜像😂。其实大可不必，我们可以将这些文件全部打包为一个文件为 <code>src.tar.gz</code> 然后通过 ADD 的方式把文件添加到当中去，然后在 RUN 指令后使用 <code>mv</code> 命令把文件移动到指定的位置。这样仅仅一条 ADD 和RUN 指令取代掉了 12 个 ADD 指令😂</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.10</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src.tar.gz /usr/<span class="built_in">local</span>/src.tar.gz</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -xe \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add --no-cache --virtual .build-deps gcc libc-dev make perl-dev openssl-dev pcre-dev zlib-dev tzdata \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xvf /usr/<span class="built_in">local</span>/src.tar.gz -C /usr/<span class="built_in">local</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mv /usr/<span class="built_in">local</span>/src/conf/fastdfs.sh /home/fastdfs/ \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mv /usr/<span class="built_in">local</span>/src/conf/* /etc/fdfs \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod +x /home/fastdfs/fastdfs.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /usr/<span class="built_in">local</span>/src/* /var/cache/apk/* /tmp/* /var/tmp/* <span class="variable">$HOME</span>/.cache</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /var/fdfs</span></span><br></pre></td></tr></table></figure><p>其他最小化层数无非就是把构建项目的整个步骤弄成一条 RUN 指令，不过多条命令合并可以使用 <code>&amp;&amp;</code> 或者 <code>;</code> 这两者都可以，不过据我在 docker hub 上的所见所闻，使用 <code>;</code> 的居多，尤其是官方的 <code>Dockerfile</code> 。</p><h2 id="docker-镜像分析工具"><a href="#docker-镜像分析工具" class="headerlink" title="docker 镜像分析工具"></a>docker 镜像分析工具</h2><p>推荐阅读 <a href="https://www.qikqiak.com/post/docker-image-explore-tool-dive/" target="_blank" rel="noopener">Docker 镜像分析工具 Dive(附视频)</a> ，我就不赘述啦，其实是懒😂</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Dockerfile-最佳实践&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="docker" scheme="https://blog.502.li/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>2019 review</title>
    <link href="https://blog.502.li/archives/2019-review.html"/>
    <id>https://blog.502.li/archives/2019-review.html</id>
    <published>2019-12-31T05:00:00.000Z</published>
    <updated>2020-01-02T14:44:08.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><p>之前是么有打算写个总结啥的，但作为博客正式开通的第一年，还是要认真总结一下想法。不过这篇博客也就花了半个多小时才仓促写完，心中的想法如果要写完的话估计要花二三十个小时，今天就简简单单地写一点吧。明天就 2020 年了，作为 90 后的我们这一代也开始奔四了。</p><p>离开学校，直到 2019 届大一学生开学时，带着小学弟去杜甫草堂玩儿。买门票的时候才意识到自己已经不再是学生了，无法享受到学生优惠了。离开学校这个牢笼，没有了限制，眼界也比以往大了很多。思考了很多事情，国庆前后写了一篇三万字左右的《毕业后的一点思考》。虽然已经不再是学生，但现在的生活节奏就像学生时代一样。早上八点起床，九点上班，下午五点半下班，回到住的地方看书学习，这种生活节凑几乎和学校一模一样。</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">2019 年 review：<a href="https://t.co/epBFjZevbQ" target="_blank" rel="noopener">https://t.co/epBFjZevbQ</a><br>- 读了四十一本书<br>- 水了五十篇博客<br>- 写了五十八万字<br>- 看了六百集影视<br><br>感谢辅导员帮给找到第一份工作的机会；<br>感谢我司 955 工作制让我有这么多属于自己的时间；<br>感谢自己尽早退群删号走人，远离毫无意义的群聊扯淡撕逼，把更多的时间和精力留给自己；</p>&mdash; 502.li (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1211992923216080897?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 31, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h3 id="读完四十一本书"><a href="#读完四十一本书" class="headerlink" title="读完四十一本书"></a>读完四十一本书</h3><h4 id="2019年读书笔记和思考"><a href="#2019年读书笔记和思考" class="headerlink" title="2019年读书笔记和思考"></a><a href="https://blog.502.li/archives/2019-reading-notes.html">2019年读书笔记和思考</a></h4><p>1.《1984》</p><p>2.《如果沒有今天，明天会不会有昨天？》</p><p>3.《开放社会与敌人》</p><p>4.《历史决定论的贫困》</p><p>5.《通往奴役之路》</p><p>6.《末日时在做什么？有没有空？可以来拯救吗？》</p><p>7.《切尔诺贝利的悲鸣》</p><p>8.《一百个人的十年》</p><p>9.《娱乐至死》</p><p>10.《浅薄：互联网如何毒化了我们的大脑》</p><p>11.《学会提问：批判性思维指南》</p><p>12.《少有人走的路》</p><p>13.《上帝笑了99次：哲学悖论里的大思考》</p><p>14.《疯狂的投资：跨越大西洋电缆的商业传奇》</p><p>15.《乌合之众》</p><p>16.《独裁者手册》</p><p>17.《肠子的小心思》</p><p>18.《民主的奇迹：美国宪法制定的127天》</p><p>19.《Kubernetes指南第四版》</p><p>20.《程序员的自我修养：链接、装载与库》</p><p>21.《程序员的英语》</p><p>22.《第二性》</p><p>23.《过去与未来之间》</p><p>24.《论革命》</p><p>25.《极权主义的起源》</p><p>26.《童年的消逝》</p><p>27.《永久记录》</p><p>28.《沃兹传：与苹果一起疯狂》</p><p>29.《公正：该如何做是好?》</p><p>30.《技术垄断:文化向技术投降》</p><p>31.《自由与繁荣的国度》</p><p>32.《苏联的最后一天》</p><p>33.《流浪神差》</p><p>34.《终将成为你》</p><p>35.《HappySugarLife～幸福甜蜜生活～》</p><p>36.《citrus 柑橘味香氣》</p><ul><li>以及五本真理部审查的书，在这里就不列出了</li></ul><h3 id="水了五十篇博客"><a href="#水了五十篇博客" class="headerlink" title="水了五十篇博客"></a>水了五十篇博客</h3><ul><li>所有的文章一共 84 篇，其中 34 篇是草(wa)稿(keng)</li><li>我的博客 markdown 源码文件在 <a href="https://github.com/muzi502/blog" target="_blank" rel="noopener">muzi502/blog</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">╭─root@Oracle /var/www/hexo/<span class="built_in">source</span> ‹master›</span><br><span class="line">╰─<span class="comment"># find . -name "*.md" | wc</span></span><br><span class="line">     84      84    3217</span><br><span class="line">╭─root@Oracle /var/www/hexo/<span class="built_in">source</span> ‹master›</span><br><span class="line">╰─<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── _posts</span><br><span class="line">│   ├── 2018-07-04-python-cnni.md</span><br><span class="line">│   ├── 2018-09-12-justic.md</span><br><span class="line">│   ├── 2018-10-20-kernel-note-book.md</span><br><span class="line">│   ├── 2018-11-20-domain-email.md</span><br><span class="line">│   ├── 2018-12-20-buffon.md</span><br><span class="line">│   ├── 2019-02-14-software-museum.md</span><br><span class="line">│   ├── 2019-03-03-Code-It<span class="_">-s</span>-Trivial.md</span><br><span class="line">│   ├── 2019-03-15-RMS.md</span><br><span class="line">│   ├── 2019-03-20-android-taibackup.md</span><br><span class="line">│   ├── 2019-04-02-play-with-docker.md</span><br><span class="line">│   ├── 2019-04-05-networktools.md</span><br><span class="line">│   ├── 2019-04-12-moto-z-play-AOSIP.md</span><br><span class="line">│   ├── 2019-04-14-privacy-protections.md</span><br><span class="line">│   ├── 2019-04-15-used-devices.md</span><br><span class="line">│   ├── 2019-04-24-android-tasker.md</span><br><span class="line">│   ├── 2019-04-27-android-tools.md</span><br><span class="line">│   ├── 2019-04-29-animal.md</span><br><span class="line">│   ├── 2019-05-02-ops36.md</span><br><span class="line">│   ├── 2019-05-03-oracle-rips-redhat.md</span><br><span class="line">│   ├── 2019-05-13-zabbix-compose.md</span><br><span class="line">│   ├── 2019-05-16-install-k8s-ubuntu18-04.md</span><br><span class="line">│   ├── 2019-05-18-CentOS7-install-k8s.md</span><br><span class="line">│   ├── 2019-05-22-gitlab-install.md</span><br><span class="line">│   ├── 2019-05-25-fuch-rush-app-dir.md</span><br><span class="line">│   ├── 2019-06-18-dashboard.md</span><br><span class="line">│   ├── 2019-06-24-get-someone-info.md</span><br><span class="line">│   ├── 2019-06-30-oh-my-pink.md</span><br><span class="line">│   ├── 2019-07-01-Asking-the-right-questions.md</span><br><span class="line">│   ├── 2019-07-12-amd-yes.md</span><br><span class="line">│   ├── 2019-08-08-centos7-offline-install-docker.md</span><br><span class="line">│   ├── 2019-08-15-How-to-choose-the-right-version-of-kubernetes.md</span><br><span class="line">│   ├── 2019-08-18-mirrors-test.md</span><br><span class="line">│   ├── 2019-08-23-debian-gateway.md</span><br><span class="line">│   ├── 2019-08-28-esxi-vmbase.md</span><br><span class="line">│   ├── 2019-09-20-The-Dictator’s-Handbook.md</span><br><span class="line">│   ├── 2019-09-21-esxi-openwrt.md</span><br><span class="line">│   ├── 2019-09-22-ovf-to-ova.md</span><br><span class="line">│   ├── 2019-09-23-esp8266-pc-switch.md</span><br><span class="line">│   ├── 2019-09-24-reading.md</span><br><span class="line">│   ├── 2019-09-25-docker-deploy-fastdfs.md</span><br><span class="line">│   ├── 2019-09-28-fastdfs-lua-redis.md</span><br><span class="line">│   ├── 2019-09-29-frps-prot-monitor.md</span><br><span class="line">│   ├── 2019-10-08-wndr3700v4-openwrt.md</span><br><span class="line">│   ├── 2019-10-10-ffmepg-rtsp.md</span><br><span class="line">│   ├── 2019-10-13-life-sciences.md</span><br><span class="line">│   ├── 2019-10-14-A-History-of-Protecting-Freedom-Where-Law-and-Technology-Collide.md</span><br><span class="line">│   ├── 2019-10-29-checklist.md</span><br><span class="line">│   ├── 2019-10-30-Internet-related-foundations-and-organizations.md</span><br><span class="line">│   ├── 2019-11-21-blog-typecho-to-hexo.md</span><br><span class="line">│   ├── 2019-11-30-amusing-ourselves-to-death-reading-notes.md</span><br><span class="line">│   ├── 2019-12-01-Kindle-Oasis2-vs-Paperwhite3.md</span><br><span class="line">│   ├── 2019-12-04-kubernetes-QA.md</span><br><span class="line">│   ├── 2019-12-10-Kubernetes-Introduction-for-VMware-Users-zh.md</span><br><span class="line">│   ├── 2019-12-19-dockone-post-index-archives.md</span><br><span class="line">│   ├── 2019-12-27-pc-e5v3-e3v3-amd2600.md</span><br><span class="line">│   ├── 2019-12-30-2019-reading-notes.md</span><br><span class="line">│   └── 2019-12-31-container-linux-os.md</span><br><span class="line">├── about.md</span><br><span class="line">├── avatar.png</span><br><span class="line">├── booklist.md</span><br><span class="line">├── draft</span><br><span class="line">│   ├── 11-frp.md</span><br><span class="line">│   ├── 2019-06-07-k8s.md</span><br><span class="line">│   ├── 2019-06-09-Chernobyl.md</span><br><span class="line">│   ├── 2019-09-30-thinking-in-2019.md</span><br><span class="line">│   ├── 2019-10-50x.md</span><br><span class="line">│   ├── 2019-11-15-govc-cli.md</span><br><span class="line">│   ├── 2019-11-20-the-histort-of-eff.md</span><br><span class="line">│   ├── 2019-12-18-linux-login-alarm-telegram.md</span><br><span class="line">│   ├── 2019-12-20-happy-with-shell.md</span><br><span class="line">│   ├── 2019-12-30-eff-2019-review.md</span><br><span class="line">│   ├── 2020-01-01.md</span><br><span class="line">│   ├── 7-bin.md</span><br><span class="line">│   ├── eff.org</span><br><span class="line">│   │   ├── 1-exhibit.a.md</span><br><span class="line">│   │   ├── 2-exhibit.b.complaint.md</span><br><span class="line">│   │   ├── 2019-11-13-federal-court-rules-suspicionless-searches-travelers-phones-and-laptops.md</span><br><span class="line">│   │   ├── 3-exhibit.d.complaint.md</span><br><span class="line">│   │   ├── eff-final-2018.md</span><br><span class="line">│   │   ├── eff-take-on-cases.md</span><br><span class="line">│   │   ├── eff.moto.md</span><br><span class="line">│   │   └── img</span><br><span class="line">│   │       └── border-act-3.jpg</span><br><span class="line">│   ├── en</span><br><span class="line">│   │   ├── 03-english.md</span><br><span class="line">│   │   ├── 12-en.md</span><br><span class="line">│   │   ├── 1997-1.md</span><br><span class="line">│   │   └── 1997-2.md</span><br><span class="line">│   └── index.html</span><br><span class="line">├── favicon.ico</span><br><span class="line">├── img/</span><br><span class="line">├── link</span><br><span class="line">│   └── index.md</span><br><span class="line">├── robot.txt</span><br><span class="line">└── tags</span><br><span class="line">    └── index.md</span><br><span class="line"></span><br><span class="line">8 directories, 287 files</span><br></pre></td></tr></table></figure><ul><li>发表的文章五十二篇，其中有两篇是去年的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@Oracle /var/www/hexo/source/_posts ‹master›</span><br><span class="line">╰─# ls | grep 2019 | wc</span><br><span class="line">     52      52    1745</span><br></pre></td></tr></table></figure><h3 id="写了五十八万字"><a href="#写了五十八万字" class="headerlink" title="写了五十八万字"></a>写了五十八万字</h3><p>把博客所有的文章全部合并为一个文件，在 VS Code 编辑器里显示的是 130 多万个字符。不过这样统计十分不准确，我只能大致估计为五十多万字，加上自己写的私密日记的话还要多一些。因为从 2019 年元旦开始养成了每周写日记的习惯，刚开始在博客上是对外开放的，后来担心怕被喝茶就搬到了 OneNote 上写，每周都写，就像流水账一样，都写下来。把胡思乱想、碎碎念等全都记录了下来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian /mnt/d/Desktop/hexo/<span class="built_in">source</span>  ‹master*›</span><br><span class="line">╰─$ find . -name <span class="string">"*.md"</span> -<span class="built_in">exec</span> cat &#123;&#125; &gt;&gt; ~/wordcount.md \;</span><br><span class="line">╭─debian@debian /mnt/d/Desktop/hexo/<span class="built_in">source</span>  ‹master*›</span><br><span class="line">╰─$ wc ~/wordcount.md</span><br><span class="line">  41353  198713 2846233 /home/debian/wordcount.md</span><br></pre></td></tr></table></figure><h3 id="看了六百集影视"><a href="#看了六百集影视" class="headerlink" title="看了六百集影视"></a>看了六百集影视</h3><p>六百集只是个大致估计，再次感谢我司 955 工作制😂，让我下班后有那么长的时间来看自己喜欢的记录片、电影、科普视频、动漫等。</p><h4 id="科普视频"><a href="#科普视频" class="headerlink" title="科普视频"></a>科普视频</h4><h4 id="1-李永乐老师"><a href="#1-李永乐老师" class="headerlink" title="1.李永乐老师"></a>1.李永乐老师</h4><p>李永乐的科普视频几乎每一期我都会追着看完，YouTube 上更新的比较快，我一般都是看 YouTube 上的😂</p><p>虽然已经不再是个学生啦，但还是很想学习，很想知道万事万物背后的科学原理，十分推荐李永乐老师的科普视频，不管男女老少都值得看滴。</p><h4 id="2-回到-2049"><a href="#2-回到-2049" class="headerlink" title="2.回到 2049"></a>2.回到 2049</h4><p>在 B 站上追的，不过我一般看的都是长篇大于三十分钟的那种。今年看的并不多，大概三十多集吧。</p><h4 id="3-妈咪说-Mommy-Talk"><a href="#3-妈咪说-Mommy-Talk" class="headerlink" title="3. 妈咪说 Mommy Talk"></a>3. 妈咪说 Mommy Talk</h4><p>在 YouTube 上追着看的，最近这几期在讲混沌体系，之前看过记录片😂</p><h4 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h4><ul><li>出租车司机</li><li>1987：黎明到来的那一天</li><li>华丽的假期</li><li>刺杀金正恩</li><li>斯大林之死</li><li>决战中途岛</li><li>绝命毒师</li></ul><h4 id="记录片"><a href="#记录片" class="headerlink" title="记录片"></a>记录片</h4><ul><li>我们的星球</li><li>蓝色海洋</li><li>混沌：数学探秘</li><li>维度：数学漫步</li><li>大国崛起</li><li>生命起源的奇幻旅程</li><li>地球的起源</li><li>食物的历史</li><li>超级运输</li><li>走进工厂：圣诞什锦巧克力</li><li>走进工厂：奶酪酱探秘</li><li>走进工厂：啤酒的奥秘</li><li>走进工厂：鞋厂探秘</li><li>走进工厂：土豆华夫饼</li><li>走进工厂：披萨工厂</li><li>走进工厂：黑加仑的味觉之旅</li><li>走进工厂：探秘咖喱酱</li><li>走进工厂：卫生卷纸工厂揭秘</li><li>走进工厂：鳕鱼条工厂揭秘</li><li>走进工厂：饼干工厂揭秘</li><li>走进工厂：咖啡工厂揭秘</li><li>走进工厂：探秘圣诞工厂</li><li>走进工厂：铅笔的前世今生</li><li>原油之旅</li><li>蓝色星球</li><li>海洋</li><li>战舰 之 水面下的战争</li><li>非洲伟大的文明</li><li>圣地 查科峡谷</li><li>新视野号冥王星之旅</li><li>工程步步高 摩天大楼</li><li>惊天工程 之 关西国际机场</li><li>伟大工程巡礼</li><li>史前公园</li><li>海豚湾</li><li>凛冬烈火：乌克兰为自由之战</li><li>切尔诺贝利</li><li>美国工厂</li><li>第四公民</li><li>汉娜·阿伦特</li><li>汉娜•阿伦特与高斯的访谈</li></ul><h4 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h4><p>我的<a href="https://bgm.tv/anime/list/512178" target="_blank" rel="noopener">番组计划</a>.三百集只是也约数，实际上会超过这些。作为一个死肥宅来讲，这些并不多。</p><ul><li>银魂</li><li>心理测量者</li><li>女子高生的虚度日常</li><li>你遭难了吗</li><li>青春笨蛋少年不做怀梦美少女的梦</li><li>进击的巨人第三季</li><li>天行九歌</li><li>复活的鲁鲁修</li><li>Fate/stay night [Heaven’s Feel] II.lost butterfly</li><li>辉夜大小姐想让我告白～天才们的恋爱头脑战～ </li><li>家有女友 </li><li>五等分的新娘</li><li>天使降临到了我身边</li><li>我是江小白 第二季 </li><li>刀剑神域 Alicization篇 </li><li>企鹅公路 </li><li>Happy Sugar Life </li><li>牵牛花与加濑同学</li><li>ReLIFE</li><li>龙王的工作！ </li><li>紫罗兰永恒花园 </li><li>樱Trick </li><li>citrus～柑橘味香气～ </li><li>3月的狮子</li><li>境界的彼方 -I’LL BE HERE- 未来篇</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;2019&quot;&gt;&lt;a href=&quot;#2019&quot;
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.502.li/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>2019 年读书笔记和思考</title>
    <link href="https://blog.502.li/archives/2019-reading-notes.html"/>
    <id>https://blog.502.li/archives/2019-reading-notes.html</id>
    <published>2019-12-31T05:00:00.000Z</published>
    <updated>2020-01-02T14:35:23.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul><li>2019-11-10 初步开始写</li><li>2019-11-30 补充漫画部分</li><li>2019-12-01 补充《童年的消逝》部分</li><li>2019-12-30 更新技术垄断、自由与繁荣的国度、苏联的最后一天</li></ul><p>会持续更新到这个月的最后一天，12 月 31 号那天再发一遍</p><h2 id="我青年时代就读过😂"><a href="#我青年时代就读过😂" class="headerlink" title="我青年时代就读过😂"></a>我青年时代就读过😂</h2><p><del>没读过西游记、也没读过马可波罗游记、更没读过左丘明和左传</del></p><p>晒一下昨天（11月30日）<del>新买</del>捡垃圾买的 Kindle Oasis 2😂</p><p><img src="../img/image-20191201200537133.png" alt="image-20191201200537133"></p> <blockquote class="twitter-tweet"><p lang="zh" dir="ltr">啦啦啦，到手啦， 1250￥ 成交，激活时间是 去年九月份，还有半年多的基本部件质保。<br><br>第三个 Kindle 😂 ，从 kindle 入门版到 Kindle Paperwhite3 再到今天的 Kindle Oasis 2。使用体验就是入门版能用，KP3 够用，KO2 满足。果真 KO2 无论在阅读体验和速度上都要比 KP3 高到不知道哪里去了。😂 <a href="https://t.co/CxhB9jKZlE" target="_blank" rel="noopener">https://t.co/CxhB9jKZlE</a> <a href="https://t.co/OYOh4WUr0z" target="_blank" rel="noopener">pic.twitter.com/OYOh4WUr0z</a></p>&mdash; 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1200678601324032000?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">November 30, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> <h3 id="致读者"><a href="#致读者" class="headerlink" title="致读者"></a>致读者</h3><p>每本书大概可以分为作者、简介、读后感、摘抄四个主要的部分。其中摘抄部分全部提取自我的 Kindle 标注，把自己喜欢的一些段落和句子分享给大家，我相信你会为其中的几句而吸引住，勾引读者们对这本书的兴趣。</p><p>摘抄最主要的目的是提醒自己回顾一下读过的书，通过这些摘抄就能回忆起整本书贯穿的内容，其次摘抄也是自己平时所思考的源泉，就像高中时自己写的一本本的阅读摘抄本一样。都值得自己反复咀嚼阅读思考。感觉 Kindle 这个功能非常棒，代替了我读纸质书时抄在笔记本上的功能😂。每隔一段时间就反复读一读摘抄的内容，从而复习一下读过的书。</p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><h3 id="1-《1984》"><a href="#1-《1984》" class="headerlink" title="1.《1984》"></a>1.《1984》</h3><h4 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h4><ul><li>[英] 乔治·奥威尔</li></ul><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>《1984》是一部杰出的政治寓言小说，也是一部幻想小说。作品刻画了人类在极权主义社会的生存状态，有若一个永不褪色的警示标签，警醒世人提防这种预想中的黑暗成为现实。历经几十年，其生命力益显强大，被誉为20世纪影响最为深远的文学经典之一。</p><p><del>引用</del>剽窃自豆瓣</p></blockquote><h4 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h4><p>2017 年的时候读过一遍，今年的时候是读的第二遍。</p><p>我很喜欢这本书，因为我们就生活在一个 1984 般的社会，所以能在书里找到很多现实中的原型。<br>对未来充满希望的人，往往对历史一无所知，与那些觉着国家越来越富强，祖国越来越繁荣，生活越来越美好的人不同。读完这本书，我觉着未来必定是反乌托邦式的极权社会，一个 1984 和娱乐至死相互交织的社会：无限权力的政府掌控所有资源和技术，人民在征信系统、人工智能、人脸识别、大数据分析、数据挖掘等高科技面前手无缚鸡之力，只能过着娱乐至死般的生活。所有人的思想都整齐划一地被真理部牢牢掌控，任何反对质疑批评质疑的人都要被消灭掉。想过上好日子不是不可以，但你得像胡鞍钢、胡锡进、金灿荣那样对当权者歌功赞德、拍马溜须、谄媚献媚、阿谀奉承才能有立足之地 。或者沉默不语过着蝼蚁一般的生活，每天靠着短视频、假新闻、营销号、娱乐消费等来填补无知和恐惧，在真理部意识形态的控制下放弃对自由的追求等等。那时的人们感到痛苦的不是他们用笑声代替了思考，而是他们不知道自己为什么笑以及为什么不再思考。</p><p>在不受约束的权力面前，即便是家财万贯的国民老公都无法保全自己，何况你我这帮如蝼蚁般的屁民呢。所以推荐去读读这本书吧，你或许能从中找到生活中的一些原型，当 1984 那一天到来时你也不会觉得震惊，也不会觉着无法接受。多读读这本书，去思考一下当今社会的种种问题，当社会主义铁拳砸到你身上的时候你也就不会觉得那么疼了。</p><h4 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄"></a>摘抄</h4><p>下面剽窃摘抄自本书原文，大部分都是从我 kindle 上导出来的标注，因为标注的太多了，所以就挑选几条。</p><ul><li><blockquote><p>极权最有效的统治术是仇恨教育，塑造一个远在天边的外在敌人，人们就会忘记身边的痛苦。</p></blockquote></li><li><blockquote><p>眼下，已进入仇恨周活动的第六天，大家都受够了游行、演说、呐喊、颂歌、摇旗、招贴、电影、蜡像、擂鼓、鸣号、跺足、坦克轰鸣、飞机盘旋以及枪炮隆隆的折磨了。6天过后，人们已经亢奋到了极点，对欧亚国的仇恨，也已经到了将近走火入魔的地步。如果让那2000名将于活动最后一天被绞死的欧亚国俘虏落在他们手上，他们一定会像野兽一样把他们撕碎。然而就在这时，大洋国政府突然宣布：交战对象不是欧亚国，而是东亚国，欧亚国实则是他们的盟友。</p></blockquote></li><li><blockquote><p>他在谩骂老大哥，在诋毁党的专政制度，他要求立即与欧亚国缔结和约，他倡导言论自由、出版自由、集会自由和思想自由，他歇斯底里地奔走呼号：革命已被出卖了！</p></blockquote></li><li><blockquote><p>“两分钟仇恨”节目开始还不到半分钟，大堂里的一多半人已迫不及待地想把心中的愤懑倾泻出来，开始大喊大叫。电屏上那张洋洋自得的绵羊脸以及欧亚国军队展现出的强大震慑力，让台下的党员坐不住了。此外，戈斯坦的一个眼神或者想法，都会令观众自动迸发出恐惧与愤怒的情绪。他成了比欧亚国或者东亚国更可憎的对象，因为大洋国和任何一国开战都将与另外一国修好。但是，奇怪的是，尽管戈斯坦遭万千人憎恨和唾弃，尽管他的言辞论调每天数以千次地在讲台、电屏、报纸和书上被抵制、粉碎、嘲弄，他的无知也体无完肤地暴露在公众面前，但他的影响力却不降反增。</p></blockquote></li><li><blockquote><p>这样的表达方式，一定程度上是对老大哥智慧与威严的赞美，同时也是一种自我催眠，人们故意用这样有节奏的拍子来抹杀内心理性的波澜。</p></blockquote></li><li><blockquote><p>致未来、过去以及思想自由的时代：人人各不相同，不再孤寂一生。献给真理永存的时代，献给事情既已发生而无需篡改的时代。我们这群活在没有自由可言、孤苦潦倒的岁月的人，活在老大哥及双重思想阴影下的人——向你们致敬！</p></blockquote></li><li><blockquote><p>如果所有人都听信党这别有用心的谎言，如果所有记录都如是记载这谎言，那么这谎言就会顺理成章地变成历史，变成真理了。于是党的口号，也就变成这样：“谁主宰历史，谁就主宰未来；谁主宰现在，谁就主宰历史。”如此一来，历史也就不容更改了，其实这里的历史就其本质来说，早已被党大肆篡改过了。现在正确的事情，将来也一定是正确的，就是这么一个简单的道理。如此情形之下，你要做的无非只能是顺从所谓的历史，战胜你顽固的记忆罢了。这就是他们所谓的“现实控制”，新语美其名曰“双重思想”。</p></blockquote></li><li><blockquote><p>明明知道，却佯装不知；本来对事实心知肚明，去偏要费尽心机去编造谎言；明知两种观点水火不容，却硬要把它们捏合在一起，相信其必能共存共荣；本来已合乎逻辑，却偏偏用逻辑推翻逻辑；明明批判道德，却转而吹嘘道德；民主已是空谈，却偏偏要做民主的守护者；明明已忘却该忘却的一切，却偏偏在需要时把它捡起来，然后在不需要时再把它丢出去。总之，最重要的是将做法用于做法本身——这就是双重思想玄之又玄的地方：有意识地进入无意识状态，然后对刚才的自我催眠装作一无所知，统统抛于脑后。</p></blockquote></li><li><blockquote><p>不用说，将双重思想运用到极致的人，恰恰是那些发明双重思想且深知自己在进行一系列有预谋的精神欺骗的人。在我们现今的社会，对实际情况最了如指掌的人，恰恰是那些背离实际看待世界的人。一般而言，他们对世界认识得越透彻，对民众的欺骗与蛊惑就越多，他们显得越聪明，做起事来便也越不靠谱。</p></blockquote></li></ul><h3 id="2-《-如果沒有今天，明天会不会有昨天？-》"><a href="#2-《-如果沒有今天，明天会不会有昨天？-》" class="headerlink" title="2.《 如果沒有今天，明天会不会有昨天？ 》"></a>2.《 如果沒有今天，明天会不会有昨天？ 》</h3><h4 id="作者-1"><a href="#作者-1" class="headerlink" title="作者"></a>作者</h4><ul><li>[瑞士] 伊夫·博萨尔特</li></ul><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>这本书是 B 站 UP 主 兔肉菌推荐的</p><h4 id="读后感-1"><a href="#读后感-1" class="headerlink" title="读后感"></a>读后感</h4><h4 id="摘抄-1"><a href="#摘抄-1" class="headerlink" title="摘抄"></a>摘抄</h4><h3 id="3-《开放社会与敌人》"><a href="#3-《开放社会与敌人》" class="headerlink" title="3.《开放社会与敌人》"></a>3.《开放社会与敌人》</h3><h4 id="作者-2"><a href="#作者-2" class="headerlink" title="作者"></a>作者</h4><ul><li>[英] 卡尔·波普尔</li></ul><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p> 这本书与哈耶克的《通往奴役之路》齐名，是战后反思极权主义、整体主义和法西斯主义等造成人类大灾难的思想根源的力作，更为战后西方社会走出无约束资本主义的渐进改良提供了思想依据。</p><blockquote><p>波普尔在二战时期所写的这本书首先无疑与他当时的处境密切相关。该书第二版序言开篇即指出，“虽然本书的大量内容在较早的日子就形成了，但最终下定决心写这本书却是在1938年 3 月我接到奥地利被占领消息的那个日子。写作的日期持续到1943年”。20世纪上半叶，整个西方世界处于前所未有的转型阵痛期。马克思和狄更斯笔下的“无约束的资本主义” 因其复杂的内在矛盾而难以为继，在世界大战和经济大萧条中风雨飘摇，在共产主义、社会民主主义和法西斯主义等思潮、运动乃至暴行之间左冲右突、迂回折冲。法西斯主义的暴行促使他对纳粹思想根源进行了深入的检讨和批判。正因为这一背景，波普尔将这本书定位为“一部政治哲学和历史哲学的批判性导言，也是对某些社会重建原则的审查”。</p></blockquote><h4 id="读后感-2"><a href="#读后感-2" class="headerlink" title="读后感"></a>读后感</h4><h4 id="摘抄-2"><a href="#摘抄-2" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote></blockquote></li></ul><h3 id="4-《历史决定论的贫困》"><a href="#4-《历史决定论的贫困》" class="headerlink" title="4.《历史决定论的贫困》"></a>4.《历史决定论的贫困》</h3><h4 id="作者-3"><a href="#作者-3" class="headerlink" title="作者"></a>作者</h4><ul><li>[英] 卡尔·波普尔</li></ul><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><h4 id="读后感-3"><a href="#读后感-3" class="headerlink" title="读后感"></a>读后感</h4><h4 id="摘抄-3"><a href="#摘抄-3" class="headerlink" title="摘抄"></a>摘抄</h4><blockquote><p>为了让读者知道这些最近成果，我拟在这里简单谈谈我对历史决定论的这个反驳。我的论证可以概括为如下五个论题：</p><p>（1）人类历史的进程受人类知识增长的强烈影响。（即使把我们的思想，包括我们的科学思想看作某种物质发展的副产品的那些人，也不得不承认这个前提的正确性。）</p><p>（2）我们不可能用合理的或科学的方法来预测我们的科学知识的增长。（这个论断可以由下面概述的理由给予逻辑的证明。）</p><p>（3）所以，我们不能预测人类历史的未来进程。</p><p>（4）这就是说，我们必须摈弃理论历史学的可能性，即摈弃与理论物理学相当的历史社会科学的可能性。没有一种科学的历史发展埋比能作为预测历史的根据。</p><p>（5）所以历史决定论方法的基本目的是错误的；历史决定论不能成立。</p></blockquote><h3 id="5-《通往奴役之路》"><a href="#5-《通往奴役之路》" class="headerlink" title="5.《通往奴役之路》"></a>5.《通往奴役之路》</h3><h4 id="作者-4"><a href="#作者-4" class="headerlink" title="作者"></a>作者</h4><ul><li>[英]弗里德利希·奥古斯特·哈耶克</li></ul><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>这本书读了一遍没都很懂😂，所以我先引用一下别人写的简介。</p><blockquote><p>按作者的说法是一本批判的小册子，而批判的对象就是集体主义的思想倾向。 作者用严密的逻辑粉碎了掩盖在集体主义之上的美好设想，论证了集体主义必将导致独裁，最终走向文化崩坏与经济停滞的结局。 逻辑性很强，读起来不容易。相比之下对自由主义的立论较弱，有些偏理想化</p><p>核心的论证逻辑其实很简单明了。论证的过程可以分为：</p><ul><li>为什么人们渴望集体主义？</li><li>集体主义为什么走不通？</li><li>为什么要坚持自由主义？</li></ul><p>自由主义社会下，人们很容易产生很多不满，包括：</p><ul><li>政治混乱，每天都争执不休；</li><li>经济混乱，自由竞争下存在大量的浪费；</li><li>思想混乱，每个人都有一套自己所认为的说辞；</li></ul><p>在这些诸多的混乱下，一个有理想有抱负的人，很容易去试图建立起一种“秩序”， 比如针对经济，希望能够建立起一种目光长远的，和谐有序的经济制度，将浪费最小化， 让每个人从无效的浪费和争执中解放出来，专注于有益的共同的目标。</p><p>这个理想是非常美好的，几百年来不断有思想家或实践家试图践行这一理想，但是却没有一个人或社会能够成功。 其最终要么全面崩溃，要么建成了如人间地狱一般的极权社会。</p><p>到底是哪里错了呢？有些人认为是因为有坏人从中作梗，将原本良善的目标和努力引导到了他的个人野心之上。 而此书对于这一观点也做出了有力的驳斥，并且一针见血地指出，极权主义是集体主义的必然路径。 任何想要发展集体主义的社会，最终必然成为极权社会。而对于任何极权社会，无论当权者用心善良还是险恶， 为了在这一制度中生存下来，他必将会采取一系列在后世看来残忍而又贪婪的举措。</p><p>集体主义必将导致极权社会的理由可以非常简单的概括为：</p><ul><li>集体主义必然需要为社会确定一个最高目标；</li><li>但是每个人心目中的目标其实都不一样，为了确定这个目标，必须先要实现高度集权；</li><li>只有极权社会，才有可能压倒众人的个人思想，推行一种整齐划一的规划和经济活动。</li></ul><p>到这里还很容易理解。但是，为什么会说极权社会必然导致文化堕落和经济停滞呢？</p><p>这里需要引入几个前提：</p><ul><li>社会的发展是不可预测的，没有人能够准确的猜测出未来的发展方向和方式；</li><li>社会是错综复杂的，每个人都只能看到和他息息相关的一部分信息。</li></ul><p>所以，我们可以得出这样的推论，因为在极权社会中，是由地位最高的人根据自己的见解， 来制定整个社会的经济计划，所以：</p><ul><li>一切的社会活动，都会按照最终和“最高目标”间的联系，确定优先级；</li><li>一切的社会活动，必须要有明确的目的和产出，否则会被视为无意义的行为；</li></ul><p>也就是说，计划经济只能对一个“已知的目标”进行计划。 这会导致这种社会制度扼杀一切新形式的创新。 更有甚者，因为没有人能够了解社会的全貌，所以其实这种针对已知目标的“全盘计划”也是不可能的。</p><p>为了能够在现实中真正的实施而不是一纸空话，这些计划一定要是含糊的，留有一定随机应变的空间。 让基层领导可以在具体实施的时候再根据自己的意志去变通。</p><p>而这又得出了一个新的结论，集体主义的社会中，其法制一定是欠缺的。 因为高度计划之下的计划或法令，必须要给实际的权力人物或机构留出足够的变通的空间。 换言之，集体主义的法制一定是定义模糊可自由解释的。</p><p>除了经济和法律的领域之外，集体主义为了推广整齐划一的经济计划， 那么就必须要尽可能的在大多数人的思想中，灌输统一的价值观， 以令大多数人都能够形成一个相对一致的目标。</p><p>很讽刺的是，作者为了攻击苏联体制出版了这书，然后却因为苏联的工业化成功而遭受冷遇， 然而几十年后，此书描述的一切都如同预言一般的在苏联上演，此后各个集体主义国家几乎全部都像魔咒一样的把历史一再重演。</p><p>此处引用  <a href="https://blog.laisky.com/p/serfdom/" target="_blank" rel="noopener">《通往奴役之路》读后感 &amp; 摘抄</a> </p></blockquote><h4 id="读后感-4"><a href="#读后感-4" class="headerlink" title="读后感"></a>读后感</h4><p>这本书读起来不容易，逻辑性很强，等以后多读几遍之后，经过大量的思考实践总结之后再专门写一篇博客谈谈读后感。在此推荐各位去读一读另一位的 <a href="https://blog.laisky.com/p/serfdom/" target="_blank" rel="noopener">《通往奴役之路》读后感 &amp; 摘抄 </a> 以及盛洪老师的 <a href="https://www.youtube.com/watch?v=MpJDymF6K-M" target="_blank" rel="noopener">盛洪谈哈耶克之《法、立法与自由》</a> </p><h4 id="摘抄-4"><a href="#摘抄-4" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>即使共产主义者们也想必多少已为诸如列宁的老友马克斯·伊斯门先生所作的那类宣言所震撼；他自己不得不承认，“斯大林主义与法西斯主义相比，不是更好，而是更坏，更残酷无情、野蛮、不公正、不道德、反民主、无可救药”，并且它“最好被称为超法西斯主义”；当我们发现同一作者承认“在这样一种意义上，斯大林主义就是社会主义，它是国有化和集体化不可预料但却是不可避免的政冶附属物，而这两者都是他赖以建立一个无阶级社会计划的一部分”，②他的结论明显地具有更广泛的意义。</p></blockquote></li><li><blockquote><p>在俄国住了12年的美国记者W·H·张伯伦先生眼见他的全部理想破灭，便将他在那里和德国、意大利所做的研究总结成这种说法：“社会主义者肯定会证实，至少在其开始时，不是通往自由的道路，而是通往独裁和反独裁、通往最惨烈的内战的道路。以民主手段实现并维持的社会主义，看来确实属于乌托邦世界。</p></blockquote></li><li><blockquote><p>马克思主义已经导致了法西斯主义和民族社会主义，因为就其全部本质而言，它就是法西斯主义和民族社会主义”。</p></blockquote></li><li><blockquote><p>人们从近年来的出版物中，可以挑选出许多有能力做出判断的人所作出的其它类似叙述，特别是由那种人所作的叙述，他们作为现在的极权主义国家的公民，亲历了这种转变，他们的经验迫使他们对许多珍爱的信念加以修正。</p></blockquote></li><li><blockquote><p>通过马克思主义可以达到自由与平等的信念的完全崩溃，已经迫使俄国走上德国一直在遵循的相同道路，即通往极权主义的、纯粹消极的、非经济的、不自由不平等的社会。这等于说共产主义和法西斯主义本质上是相同的。法西斯主义是在共产主义已被证实为一种幻想之后所达到的一个阶段，而在斯大林主义的俄国和希特勒之前的德国，共产主义已经同样被证实是一种幻想。</p></blockquote></li><li><blockquote><p>在这个意义上，社会主义意味着废除私有企业，废除生产资料私有制，创造一种“计划经济”体制，在这种体制中，中央的计划机构取代了为利润而工作的企业家。</p></blockquote></li><li><blockquote><p>社会主义不仅是集体主义或“计划”中最最重要的一种，而且正是社会主义劝说具有自由主义思想的人们再一次屈从对经济生活的管辖，而这种管辖他们曾推翻过，因为照亚当·斯密的说法，这使政府处于“为了维持自身，他们有责任实行压迫和专制”①的地位。</p></blockquote></li><li><blockquote><p>问题在于，出于这个目的，强制力量的控制者是否应该将自己限制于笼统地创造条件，以便最充分地发挥每个人的知识和创造力，使他们能成功地做出计划，或者为了合理地利用资源，我们是否必须根据某些有意识构造的“蓝图”对我们的一切活动加以集中的管理和组织。</p></blockquote></li><li><blockquote><p>任何控制某些商品的价格或数量的企图，都会使竞争失去它有效地协调个人努力的力量，因为这时价格的变化不再显示客观条件的全部有关变化，也不再对个人的行动提供一个可靠的指南。</p></blockquote></li><li><blockquote><p>成功地将竞争用作社会组织的原则，就排除了对经济生活的某种形式的强制性干预，但它承认有时会有助于其运作的其它形式的强制性干预，甚至还必需某种形式的政府行为。</p></blockquote></li><li><blockquote><p>法律仅仅承认私有财产和契约自由是根本不够的，它更有赖于对适用于不同事物的财产权的明确限定。对使竞争制度有效运行的种种形态法律制度的系统研究，已经令人痛心地遭到忽视；</p></blockquote></li><li><blockquote><p>至少可能想见，在一个非常整齐划一的政府和一个教条主义的多数民主的政府统治下，民主制度也许和最坏的独裁制度同样暴虐。但是，我们的要点与其是独裁必然不可避免地消灭了自由，毋宁是计划导致独裁，因为独裁是强制推行各种理想的最有效工具，而且，集中计划要在很大程度成为可能的话，独裁本身是必不可少的。计划与民主之间的冲突只不过起因于这个事实，即对经济活动管理所需的对自由的压制来说，后者是个障碍。但是，只要民主不再是个人自由的保障的话，那么它也可能以某种形式依然存在于极权主义政体之下。一个真正的“无产阶级专政”，即使形式上是民主的，如果它集中管理经济体系的话，可能会和任何专制政体所曾做的一样完全破坏了个人自由。</p></blockquote></li></ul><h3 id="6-《末日时在做什么？有没有空？可以来拯救吗？》"><a href="#6-《末日时在做什么？有没有空？可以来拯救吗？》" class="headerlink" title="6.《末日时在做什么？有没有空？可以来拯救吗？》"></a>6.《末日时在做什么？有没有空？可以来拯救吗？》</h3><h4 id="作者："><a href="#作者：" class="headerlink" title="作者："></a>作者：</h4><ul><li>[日] 枯野瑛</li></ul><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><p>之前看过动画，也是暑假的时候才开始读一下原作的，只不过读完第一部就没心情接着读第二部了。因为第二部的故事主人公都变了，而且第一部的结局读完后很压抑。</p><h3 id="7-《切尔诺贝利的悲鸣》"><a href="#7-《切尔诺贝利的悲鸣》" class="headerlink" title="7.《切尔诺贝利的悲鸣》"></a>7.《切尔诺贝利的悲鸣》</h3><h4 id="作者-5"><a href="#作者-5" class="headerlink" title="作者"></a>作者</h4><ul><li>[白俄] S·A·阿列克谢耶维奇</li></ul><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><blockquote><p>★获得2015年诺贝尔文学奖，真实记录切尔诺贝利核灾难事件</p><p>★“她的复调书写，是对我们时代的苦难和勇气的纪念。”</p><p>★“每一页，都是感人肺腑的故事。”</p><p>-————————————————————————</p><p>1986年4月26日，史上最惨烈的反应炉事故发生在切尔诺贝利。这是史上最浩大的悲剧之一。作者访问了上百位受到切尔诺贝利核灾影响的人民，有无辜的居民、消防员、以及那些被征招去清理灾难现场的人员。他们的故事透露出他们至今仍生活在恐惧、愤怒和不安当中。</p><p>本书将这些访谈以独白的方式呈现，巨细靡遗的写实描绘，使这场悲剧读起来像世界末日的童话。人们坦白地述说着痛苦，细腻的独白让人身历其境却又难以承受。</p><p>-————————————————————————</p><p>★《纽约时报》——每一页都是奇异而残忍的故事，就像那些残留在幸存者身上的辐射。</p><p>★《伦敦时报》——如同古希腊悲剧表演的合唱团，本书收录了众人的心声。短期之内，我们恐怕不会再有机会读到这般真实记录愤怒、愚昧、英勇和伤亡的文字。</p><p>★《每日电讯报》——从受访者的独白中，阿列克谢耶维奇创造了这样一种历史：无论离这些事件有多远，读者都能感同身受，如有切肤之痛。读完这本书，我才知道切尔诺贝利是欧洲的一场海啸，这场海啸不仅是由我们人类所造成的，而且还永无止尽。如果你对未来抱有好奇心，我强烈推荐这本书。书中的切尔诺贝利是个充满极端与未知的地方，一个现代科技发展造就的戏剧世界。</p><p>★《出版人周刊》——口语叙述的历史在脑海中挥之不去，充斥着面对命运时的无奈、艰苦卓绝的勇气，以及浓厚的黑色幽默……如同不可磨灭的X光透视着俄国人的灵魂。</p><p>★《国家》杂志——阿列克谢耶维奇的这本杰出著作，忠实地记录着她那些白俄罗斯同胞的生命与死亡。本书终于将在美国上架……这是无与伦比的见证。</p><p>★《书目杂志》——书中记录着受污染的世界里骇人的生活。这些典型的故事分别传达出不同的声音：愤怒、恐惧、无知、艰苦、英勇、同情和爱。阿列克谢耶维奇冒着损害健康的风险，深入前线收集这些见证，把故事转化成令人难忘的精辟著作，我们只能期盼书中的灾难不会重现。</p><p>此处剽窃自豆瓣</p></blockquote><h4 id="读后感-5"><a href="#读后感-5" class="headerlink" title="读后感"></a>读后感</h4><p>五月份的时候 Netflix 上映了切尔诺贝利的纪录片，之后十月份的时候在博客上认识一位博主，在他的博客里发现了这本书，于是就花了一周的时间读完。建议看完 Netflix 上的纪录片再来看看这本书。读这本书的时候，和《一百个人的十年》一样的感受，心中压抑痛苦的心情无法用言语表达。</p><h4 id="摘抄-5"><a href="#摘抄-5" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>我已经身处险境了<br>我们现在都身处险境<br>因为那些机密和谎言<br>基本上成为了我们的一部分<br>当真相浮出水面 ，我们不断用谎言覆盖<br>直到我们都记不起真相是什么<br>但真相依旧在那里<br>我们撒的每一个谎言都是对真相的透支，早晚要还<br>这就是压力管式石墨沸水堆反应堆核心爆炸的原因–谎言<br>此处引用 HBO 切尔诺贝利纪录片 S1E5</p></blockquote></li><li><blockquote><p>我看遍了他人的痛苦，但在这里我和他们同样是见证人。这个事件是我人生的一部分，我就活在其中。</p><p>我们的国家有三百五十颗核弹。人们还没有注意到是从什么时候开始的，却已经活在后核战的时代了。</p><p>现在，人们因为其他的战争来到这里。上千名俄国难民从亚美尼亚、格鲁吉亚、阿布哈兹、塔吉克斯坦、车臣等地涌入。这些人从有枪声的地方来，来到这片被遗弃的土地。这里还有荒废的房屋尚未被特殊部队掩埋。</p><p>一共有两千五百万侨胞住在俄国领土外——这已经是一个国家的人口数了——他们无处可归，只能去切尔诺贝利。关于那里的土地、水和空气能够取人性命的传言，对他们来说只是童话故事。这些人有自己的故事，一个古老的故事，他们深信不疑——这个故事是在说人们如何用枪射杀他人。</p><p>我是在伟大的俄罗斯文学的浸染中长大的，我认为作品的尺度可以更辽阔，所以我把这一段血肉横飞的情节写了下来。但是在隔离区——那是另一个世界，那个世界与外面的世界不同——那些强烈的感受是文学无法形容的。</p><p>三年来，我四处旅行，在人群里访问：包括在核电厂工作的工人，科学家，前共党官僚，医生，士兵，直升机驾驶员，矿工，难民，迁居的人们。他们都有着不同的命运、职业和个性，但是切尔诺贝利却是他们生命里共同的重心。这些人不过是平凡人，却必须面临最艰难的问题。</p><p>我时常觉得，简单和呆板的事实，不见得会比人们模糊的感受、传言和想象更接近真相。为什么要强调这些事实呢，这只会掩盖我们的感受而已。从事实当中衍生出的这些感受，以及这些感受的演变过程，才是令我着迷的。我会试着找出这些感受，收集这些感受，并将其仔细保护起来。</p><p>书中的人已经见过他人未知的事物。我觉得自己像是在记录着未来。</p><p>斯韦特兰娜·阿列克谢耶维奇</p></blockquote></li></ul><h3 id="8-《一百个人的十年》"><a href="#8-《一百个人的十年》" class="headerlink" title="8.《一百个人的十年》"></a>8.《一百个人的十年》</h3><h4 id="作者：-1"><a href="#作者：-1" class="headerlink" title="作者："></a>作者：</h4><ul><li>冯骥才</li></ul><h4 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h4><blockquote><p>二十世纪历史将以最沉重的笔墨，即在这人类的两大悲剧：法西斯暴行和“文革”浩劫。凡是这两大劫难的亲身经历者，都在努力忘却它，又无法忘却它。文学家与史学家有各自不同的记载方式：史学家偏重于灾难的史实，文学家偏重于受难者的心灵。本书作者试图以一百个普通中国人在“文革”中的西宁历程的真实记录，显现那场旷古未闻的劫难的真相。</p><p>口述文学版《一九八四》，也算是当代中国的一代奇书，冯骥才的史学良知与文学功底相得益彰，文学性与纪实性都相当完美，讲述者都带有天津话特色，在“过来人”平静又略带幽默的娓娓道来中极其惊心动魄，揭露了一个民族的黑暗历史，比恐怖小说还恐怖，这才是人性恶与残酷性的百科全书，是让年轻人看清社会真相的暗黑教育手册。</p><p>此处剽窃自豆瓣</p></blockquote><h4 id="读后感-6"><a href="#读后感-6" class="headerlink" title="读后感"></a>读后感</h4><p>1949 年，《1984》出版问世。1950年乔治奥威尔辞世。他没有想到，和他书中预想的一样。十六年后在东方一个意识形态迥异国家会上演和书中一样的闹剧。这本书是冯骥才先生写的，记录了人类历史上最为惨痛的那场长达十年的灾难。 这本书和《切尔诺贝利的悲鸣》写作风格及其相似，都是以都是以采访纪实的方式分别记录了人类历史上两场灾难（文革浩劫和切尔诺贝利事故）中经历者们的遭遇，都承载着普通人的悲苦命运。</p><p>读这本书的时候，对书中真实记录的那些人的悲惨命运，几次都忍不住落下眼泪。原来神州大地上也经历过如地狱一般的浩劫。十年的文革浩劫扯碎了中华民族自诩上千年忠孝礼义信传统美德的丑陋外皮，彻彻底底地将人性的邪恶赤裸裸地展现出来。学生告密举报老师，亲朋邻里相互揭发，父子反目成仇，比比皆是疯狂，犹如地狱一般的社会。 不禁感叹，作为一个拥有着五千年悠长文明的古国，几千年前的历史都是历历在目，怎么越到近现代视野就越来越模糊了呢？</p><p>读这两本书有一个共感受：绝望无助、愤怒痛恨、压抑沉重的历史让人无法喘息。 历史的过错原本是一宗难得的财富，丢掉这些财富便会陷入新的无知和愚昧。而我们的责任就是将这段历史伴随着人类文明的结晶一代一代传递给未来的后人们，警告他们对自然法则、对生命抱有敬畏之心。 作为中华儿女，我们有责任也有义务铭记这段历史，将这段人类史上悲痛的灾难传递给未来的后辈们。</p><p>我们谴责日本忘记历史的时候，自己有没有反省过当年犯下同样的反人类罪行？ 建议那些喊着“不忘初心牢记使命”口号的人，不妨去重温一下这段历史吧。</p><h4 id="摘抄-6"><a href="#摘抄-6" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>“文革”是我们政治、文化、民族疯疾的总爆发，要理清它绝非一朝一夕之事；而时代 不因某一事件的结束而割断，昨天与今天是非利害的经纬横竖纠缠，究明这一切依然需要勇 气，更需要时间，也许只有后人才能完成。因此本书不奢望绘读者任何聪明的结论，只想让 这些实实在在的事实说话，在重新回顾“文革”经历者心灵的画面时，引起更深的思索。没 有一层深于一层的不浅尝辄止的思索，就无法接近真理性的答案。没有答案的历史是永无平 静的。</p></blockquote></li><li><blockquote><p>二十世纪历史将以最沉重的笔墨，记载这人类的两大悲剧：法西斯暴行和“文革”浩 劫。凡是这两大劫难的亲身经历者，都在努力忘却它，又无法忘却它。我常常悲哀地感到，我们的民族过于健忘。“文革”不过十年，已经很少再见提及。那 些曾经笼罩人人脸上的阴影如今在哪里？也许由于上千年封建政治的高压，小百姓习惯用抹 掉记忆的方式对付苦难。但是，如此乐观未必是一个民族的优长，或许是种可爱的愚昧。历 史的过错原本是一宗难得的财富，丢掉这财富便会陷入新的盲目。</p></blockquote></li><li><blockquote><p>若要对这数亿人经验过的生活做出宏观的概括，任何个人都 方不能及。我努力做的，只能在我所能接触到的人中间，进行心灵体验上所具独特性的选 择。至于经历本身的独特，无需我去寻找。在无比强大的社会破坏力面前，各种命运的奇迹 都会呈现，再大胆的想象也会相形见细。但我不想收集各种苦难的奇观，只想寻求受难者心 灵的真实。我有意记录普通人的经历，因为只有底层小百姓的真实才是生活本质的真实。只 有爱惜每一根无名小草，每一颗碧绿的生命，才能紧紧拥抱住整个草原，才能深深感受到它 的精神气质，它惊人的忍受力，它求生的渴望，它对美好的不懈追求，它深沉的忧虑，以及 它对大地永无猜疑、近似于愚者的赤诚。</p></blockquote></li><li><blockquote><p>以我的感受，大人物的经历不管多悲惨，也不能和小百姓们相比。大人物的冤枉总容易解决，小百姓们如果没碰对了人，碰巧了机会，也许很难得到命运的晴天，就像梁山的李老师正好碰上我读过使他冤屈的故事那样。我想，至今天下还有多少人含冤未平，无论是活着还是已经死去的？<br>人民的经历，才是时代的经历。</p></blockquote></li></ul><h3 id="9-《娱乐至死》"><a href="#9-《娱乐至死》" class="headerlink" title="9.《娱乐至死》"></a>9.《娱乐至死》</h3><h4 id="作者：-2"><a href="#作者：-2" class="headerlink" title="作者："></a>作者：</h4><ul><li>[美] 尼尔·波兹曼</li></ul><h4 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h4><blockquote><p>这本书表达了作者对印刷业衰落的叹惋和对全美沉迷电视娱乐的忧心。Neil Postman 认为，不同的媒介会影响公共话语（public discourse）的形态——印刷机统治下的美国，公共话语是思辨的；而在电视娱乐时代，观众被连续、琐碎、无关联的信息洪流冲击，根本无法思考，更别提发表自己的意见了。以新闻节目为例，主持人刚播报完某政治人物因为丑闻被弹劾，立刻就「好，现在来看下一条消息」（<em>Now … this</em>），开始播报某明星要在哪里开演唱会了。设想如果电视节目主持人让观众「停下来思考五分钟」，这是会打击收视率的。更可怕的是，这些碎片化的、反思考的电视节目（尤其是电视广告）不仅对成年人造成冲击，更深深地影响着下一代（看电视长大的一代），甚至是学校。</p></blockquote><blockquote><p>这书出版于 1985 年，当时互联网还没有发展起来。2006 年 YouTube 重新定义了电视（tube），2007 年 iPhone 开启了智能手机时代。2010 年之后出生的孩子（一零后？），是真正的移动互联网原住民，他们根本不需要坐到电视机前，而是伸手就可以摸到智能手机和平板电脑，沉浸到碎片化娱乐之中。若是 Neil Postman 老人家看到了 2018 年的互联网娱乐，怕是要气得从坟墓里爬出来吧。</p><p>此处引用自  <a href="https://wzyboy.im/post/1264.html" target="_blank" rel="noopener">wzyboy</a></p></blockquote><h4 id="读后感-7"><a href="#读后感-7" class="headerlink" title="读后感"></a>读后感</h4><p>可以结合作者的另一本书《童年的消逝》来读，作者对批判电视所带来的危害，在当今把电视换成抖音快手这类的短视频也好不过是。在我看来抖音快手短视频就是《娱乐至死》里所批判的电视的升级版。甚至短视频更进一步粉碎了使用者的注意力。所以我极度讨厌这些短视频，他们所带来的都是空荡荡的商业消费。但未来短视频会沦为真理部洗脑宣传一次来控制人民的工具。</p><p>我觉着那些是使用抖音的人都像在吃屎一样，首先字节跳动这种毫无底线的无耻流氓公司宣称 <strong>通讯录不是个人隐私</strong> 。虽然我从不使用今日头条旗下的任何一款产品和服务在此我只想骂一句粗话，草拟玛丽隔壁去年狗娘养的抖音短视频。这种狗娘养的公司比百度还恶毒，没想到在天朝居然那么多人在使用。呵呵，其实每次看到有人在刷抖音短视频就像看到他在吃屎一样，居然吃的那么香。</p><blockquote><p>据澎湃6月20日报道，用户刘先生认为“今日头条”APP在《用户协议及隐私条款》中未明确将收集用户个人信息，却擅自上传并保存其通讯录，严重侵犯了用户隐私权，违反了信息收集的“合理、必要”原则，请求法院判令被告停止侵权、赔礼道歉并支付精神赔偿金1元。然而在法庭上，今日头条公司却辩称：通讯录并非是原告本人的信息，而是其社会网络成员的信息，不属于个人隐私，不但不应保密，反而需要向他人告示。 </p><p>此处引用 <a href="https://www.ittime.com.cn/news/news_28229.shtml" target="_blank" rel="noopener">通讯录不属于个人隐私？</a></p></blockquote><h4 id="摘抄-7"><a href="#摘抄-7" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>电视上会话的表现形式是形象而不是语言。</p></blockquote></li><li><blockquote><p>电视需要的内容和其他媒体截然不同。电视无法表现政治哲学，电视的形式注定了它同政治哲学是水火不相容的。</p></blockquote></li><li><blockquote><p>信息、内容，或者如果你愿意，可以称之为构成“今日新闻”的“素材”，在一个缺乏媒介的世界里是不存在的——是不能存在的。</p></blockquote></li><li><blockquote><p>因为这样两种截然不同的媒介不可能传达同样的思想。随着印刷术影响的减退，政治、宗教、教育和任何其他构成公共事务的领域都要改变其内容，并且用最适用于电视的表达方式去重新定义。</p></blockquote></li><li><blockquote><p>媒介的形式偏好某些特殊的内容，从而能最终控制文化。</p></blockquote></li><li><blockquote><p>我们的文化正处于从以文字为中心向以形象为中心转换的过程中，思考一下摩西的训诫对我们也许是有益的。</p></blockquote></li><li><blockquote><p>某个文化中交流的媒介对于这个文化精神重心和物质重心的形成有着决定性的影响。</p></blockquote></li><li><blockquote><p>人们怎样看待时间和空间，怎样理解事物和过程，都会受到语言中的语法特征的重要影响</p></blockquote></li><li><blockquote><p>和语言一样，每一种媒介都为思考、表达思想和抒发情感的方式提供了新的定位，从而创造出独特的话语符号。这就是麦克卢汉所说的“媒介即信息”。但</p></blockquote></li><li><blockquote><p>分分秒秒的存在不是上帝的意图，也不是大自然的产物，而是人类运用自己创造出来的机械和自己对话的结果。</p></blockquote></li><li><blockquote><p>因为在一个由分分秒秒组成的世界里，大自然的权威已经被取代了。</p></blockquote></li><li><blockquote><p>用书面文字记录哲学观点，不是这些观点的终结，而是这些观点的起点</p></blockquote></li><li><blockquote><p>我们的语言即媒介，我们的媒介即隐喻，我们的隐喻创造了我们的文化的内容。</p></blockquote></li><li><blockquote><p>首先，我想证明，在印刷机统治下的美国，话语和现在有很大不同——清晰易懂，严肃而有理性；</p></blockquote></li><li><blockquote><p>在学术界里，出版的文字被赋予的权威性和真实性远远超过口头语言。人们说的话比他们写下来的话要随意。书面文字是作者深思熟虑、反复修改的结果，甚至还经过了专家和编辑的检查。这样的文字更加便于核对或辩驳，并且具有客观的特征。</p><p>但是，控制你的身体是最低限度的要求。你还必须学会注意书本上文字的形状。你必须看穿它们，这样你才能直接了解这些形状所代表的意思。如果你仅仅专注于文字的形状，那么你就是一个让人不能容忍的低效读者，会被人当作傻子。如果你已经学会了怎样不受外观的干扰去理解意义，那么你就应该采取一种超然而客观的态度，这包括你要能够区分文字的感官愉悦、魅力或奉承语气（如果有的话）和文字所表达的观点之间的逻辑。同时，你还必须能够根据语言的语气去判断作者对于所写内容和读者的态度。换句话说，你必须知道笑话和观点之间的区别。</p></blockquote></li><li><blockquote><p>18世纪和19世纪的美国也许是有史以来最以铅字为中心的文化，我相信电视创造出来的认识论不仅劣于以铅字为基础的认识论，而且是危险和荒诞的。</p></blockquote></li><li><blockquote><p>符号环境中的变化和自然环境中的变化一样，开始都是缓慢地累积，然后突然达到了物理学家所说的临界点。</p><p>在这种情况下，电子媒介决定性地、不可逆转地改变了符号环境的性质。</p><p>我说的只是以电视为中心的认识论污染了大众交流和相关活动，而不是说它污染了一切。</p></blockquote></li><li><blockquote><p>电视给那些老弱病残以及在汽车旅馆里饱尝孤独寂寞的人带来了无尽的安慰和快乐。</p></blockquote></li><li><blockquote><p>印刷书籍比任何其他方式都更有效地把人们从现时现地的统治中解放出来……铅字比实际发生的事实更有威力……存在就是存在于铅字之中：其他的一切都将渐渐地成为虚无。所谓学习就是书本的学习。”</p></blockquote></li><li><blockquote><p>报纸是知识的源泉， 是现代人每一次对话的灵感来源。</p></blockquote></li><li><blockquote><p>枪炮的发明使奴隶和贵族得以在战场上平等对峙；印刷术为各阶层的人们打开了同样的信息之门，邮差把知识一视同仁地送到茅屋和宫殿前。</p></blockquote></li><li><blockquote><p>从一开始到19世纪，美国比任何一个社会都痴迷于铅字以及建立在铅字基础上的演讲术。</p></blockquote></li><li><blockquote><p>理查德·霍夫施塔特[40]提醒我们，美国是一个由知识分子建立的国家，这些开国元勋都是智者、科学家、学养高深之人，他们中的很多人都精于古典学问，善于借助熟知的历史、政治和法律来解决当时紧迫的问题。</p></blockquote></li><li><blockquote><p>在书本里，这个世界是严肃的，人们依据理性生活，通过富有逻辑的批评和其他方式不断地完善自己。</p></blockquote></li><li><blockquote><p>对于他们来说，没有高深的文化程度，要想成为一个成熟的公民是不可能的，这就是为什么美国大多数州将选举年龄定为21岁，为什么杰弗逊认为普及教育是美国最大希望的原因。</p></blockquote></li><li><blockquote><p>两个世纪以来，美国人用白纸黑字来表明态度、表达思想、制定法律、销售商品、创造文学和宣扬宗教。这一切都是通过印刷术实现的，也正是通过这样的方式，美国才得以跻身于世界优秀文明之林。</p></blockquote></li><li><blockquote><p>通过生产大量无关的信息，它完全改变了我们所称的“信息—行动比”。 不管是在口头文化还是在印刷术文化中，信息的重要性都在于它可能促成某种行动。</p></blockquote></li><li><blockquote><p>电报带给我们的是支离破碎的时间和被割裂的注意力。电报的主要力量来自它传播信息的能力，而不是收集信息、解释信息或分析信息。在这方面，电报和印刷术截然相反。</p></blockquote></li><li><blockquote><p>书籍就是收集、细察和组织分析信息观点的绝好容器。写书、读书、讨论书的内容、判断书的价值（包括书的版面安排），都是需要花费大量时间的。写书是</p></blockquote></li><li><blockquote><p>电报只适合于传播转瞬即逝的信息，因为会有更多更新的信息很快取代它们。这些信息后浪推前浪地进出于人们的意识，不需要也不容你稍加思索。</p></blockquote></li><li><blockquote><p>描绘过的世界开始变得无法控制，甚至无法解释了。报纸上一行行有序而连贯的文字渐渐失去了帮助我们获得知识和了解这个世界的能力。</p></blockquote></li><li><blockquote><p>这种巧合说明现代技术彻底改变了人们对于信息的态度：过去人们是为了解决生活中的问题而搜寻信息，现在是为了让无用的信息派上用场而制造问题。</p></blockquote></li><li><blockquote><p>我们不再只把电视机放在某些特定的房间里；我们不再怀疑在电视上看到的一切，根本不会意识到电视提供给我们的特殊视角，甚至连“电视是如何影响我们的”这个问题也被我们抛到了九霄云外。</p></blockquote></li><li><blockquote><p>我们不再只把电视机放在某些特定的房间里；我们不再怀疑在电视上看到的一切，根本不会意识到电视提供给我们的特殊视角，甚至连“电视是如何影响我们的”这个问题也被我们抛到了九霄云外。</p></blockquote></li><li><blockquote><p>大脑和技术都是物质装置，思想和媒介都是使物质装置派上用场的东西。一旦技术使用了某种特殊的象征符号，在某种特殊的社会环境中找到了自己的位置，或融入到了经济和政治领域中，它就会变成媒介。换句话说，一种技术只是一台机器，媒介是这台机器创造的社会和文化环境。</p></blockquote></li><li><blockquote><p>在我所指的那些地方，大多数人还没有电视机，拥有电视机的人也只有一台，他们只有一个电视台，他们没有全天24小时播放的电视节目，大多数节目都以推进政府的意识形态和政策为首要目的。</p></blockquote></li><li><blockquote><p>我们看见的不仅是零散不全的新闻，而且是没有背景、没有结果、没有价值、没有任何严肃性的新闻，也就是说，新闻成了纯粹的娱乐。</p></blockquote></li><li><blockquote><p>我必须指出，掩藏在电视新闻节目超现实外壳下的是反交流的理论，这种理论以一种抛弃逻辑、理性和秩序的话语为特点。在美学中，这种理论被称为“达达主义”；在哲学中，它被称为“虚无主义”；在精神病学中，它被称为“精神分裂症”；如果用舞台术语来说，它可以被称为“杂耍”。</p></blockquote></li><li><blockquote><p>假信息并不意味着错误的信息，而是意味着使人产生误解的信息——没有依据、毫无关联、支离破碎或流于表面的信息——这些信息让人产生错觉，以为自己知道了很多事实，其实却离事实的真相越来越远。包装成一种娱乐形式时，它就不可避免地起到了蒙蔽作用。我前面说过，电视新闻节目提供给观众的是娱乐而不是信息，这种情况的严重性不仅在于我们被剥夺了真实的信息，还在于我们正在逐渐失去判断什么是信息的能力。无知是可以补救的，但如果我们把无知当成知识，我们该怎么做呢？</p></blockquote></li><li><blockquote><p>我的意思是，电视是我们了解公众信息的样板。和早些时候的印刷机一样，电视已经获得了定义新闻存在形式的力量，而且它还决定了我们如何对新闻做出反应。</p></blockquote></li><li><blockquote><p>通过用图像代替语言，图像广告使感染力成为消费者选择商品的依据，而不再是实践的检验。理性和广告早已背道而驰，我们几乎已经忘记它们之间曾经还存在着某种联系。</p></blockquote></li><li><blockquote><p>我们要担心的是电视信息的过剩，而不是政府的限制；在公司国家美国传播的信息面前，我们根本无力保护自己，所以这场为自由而战的战斗要在和以往完全不同的阵地上进行。</p></blockquote></li><li><blockquote><p>它想尽一切办法让我们不断地看电视，但是我们看到的是使信息简单化的一种媒介，它使信息变得没有内容、没有历史、没有语境，也就是说，信息被包装成为娱乐。在美国，我们从来没有缺少过娱乐自己的机会。</p></blockquote></li><li><blockquote><p>总而言之，如果人民蜕化为被动的受众，而一切公共事务形同杂耍，那么这个民族就会发现自己危在旦夕，文化灭亡的命运就在劫难逃。</p></blockquote></li><li><blockquote><p>我们的生活经历已经能够让我们认识监狱，并且知道在监狱大门即将关上的时候要奋力反抗。</p></blockquote></li><li><blockquote><p>但是，如果我们没有听到痛苦的哭声呢？谁会拿起武器去反对娱乐？当严肃的话语变成了玩笑，我们该向谁抱怨，该用什么样的语气抱怨？对于一个因为大笑过度而体力衰竭的文化，我们能有什么救命良方？</p></blockquote></li><li><blockquote><p>到了这个时候，如果你还不能意识到技术必然会带来社会变迁，还在坚持技术是中性的，仍然认为技术始终是文化的朋友，那么你实在是太愚蠢了。从很多例子中我们已经看出，通讯模式中的技术变化比交通模式中的技术变化更能影响人们的意识形态。把字母带入一种文化，会改变这种文化的认知习惯、社会关系、社会概念、历史和宗教。</p></blockquote></li><li><blockquote><p>什么是信息？它有哪些不同形式？不同的形式会给我们带来什么不同的知识、智慧和学习方法？每一种形式会产生怎样的精神作用？信息和理性之间的关系是什么？什么样的信息最有利于思维？不同的信息形式是否有不同的道德倾向？信息过剩是什么意思？我们怎么知道存在信息过剩？崭新的信息来源、传播速度、背景和形式要求怎样重新定义重要的文化意义？</p></blockquote></li><li><blockquote><p>我们正处于教育和灾难的竞赛之中，他不懈地著书强调理解媒介政治和媒介认识论的必要性。最后，他试图在《美丽新世界》中告诉我们，人们感到痛苦的不是他们用笑声代替了思考，而是他们不知道自己为什么笑以及为什么不再思考。</p></blockquote></li></ul><h3 id="10-《浅薄：互联网如何毒化了我们的大脑》"><a href="#10-《浅薄：互联网如何毒化了我们的大脑》" class="headerlink" title="10.《浅薄：互联网如何毒化了我们的大脑》"></a>10.《浅薄：互联网如何毒化了我们的大脑》</h3><h4 id="作者-6"><a href="#作者-6" class="headerlink" title="作者"></a>作者</h4><ul><li>[美] 尼古拉斯·卡尔</li></ul><h4 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h4><blockquote><p>在我们跟计算机越来越密不可分的过程中，我们越来越多的人生体验通过电脑屏幕上闪烁摇曳、虚无缥缈的符号完成，最大的危险就是我们即将开始丧失我们的人性，牺牲人之所以区别于机器的本质属性。——尼古拉斯•卡尔“谷歌在把我们变傻吗？”当尼古拉斯•卡尔在发表于《大西洋月刊》上赫赫有名的那篇封面文章中提出这个问题的时候，他就开启了人们热切渴望的期盼源泉，让人急于弄清楚互联网是在如何改变我们的。卡尔同时也明确回答了我们这个时代面临的一个重要问题：在我们尽情享受互联网慷慨施舍的过程中，我们正在牺牲深度阅读和深度思考的能力吗？</p></blockquote><h4 id="读后感-8"><a href="#读后感-8" class="headerlink" title="读后感"></a>读后感</h4><p>感觉这本书写的并不好，在大二的时候我们学校图书馆里不小心被我找到了。我记得还是上毛概课的时候我就拿着这本书来读。PS：毛概课实在是太枯燥了，干听都听不进去。所以我就拿别的书来看了😂</p><p>这本书写的不如《娱乐至死》那样薅，没有一个中心论点。一会儿讲谷歌搜索是如何成功崛起的，解析来又接着讲记忆又是如何形成的。内容很杂乱而不如《娱乐至死》那样有一条很明确的论证路线，从信息传播的媒介来对当下电视机对读书多带来的冲击。</p><p>所以这本书不推荐，不如去读一下《娱乐至死》</p><h4 id="摘抄-8"><a href="#摘抄-8" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>作者指出思维正在碎片化这一基本事实：“互联网多媒体技术融多种不同类型的信息于一屏，从而进一步加剧了内容的碎片化，也进一步分散了我们的注意力。</p></blockquote></li><li><blockquote><p>“较之历史上所有可以与之相提并论的技术，互联网给我们带来的让人分神的内容实在是太多了。就在互联网向我们呈上信息盛宴的同时，它也把我们带回了彻头彻尾的精力分散的天然状态。” 碎片化使我们的思维无法再“深刻”下去，因为显然，我们不再拥有保持深刻所需要的注意力：“必将对我们的思维方式产生长远影响的一个最大的悖论是：互联网吸引我们的注意力，只是为了分散我们的注意力。”</p></blockquote></li><li><blockquote><p>　以前我很容易就会沉浸在一本书或者一篇长文当中。观点的论证时而平铺直叙，时而急转直下，二者交织推进，把我的思绪紧紧抓住。即使是索然无味的长篇大论，我也能花上几个小时徜徉其间。但现在这种情形已经很少见了。现在看上两三页，注意力就开始游移不定，我就会感到心绪不宁，思路不清，于是开始找点别的事做。我感觉就像拼命把自己天马行空的思绪拉回到文本上来一样。过去那种自然而然的精读如今已经变成了费力挣扎的苦差事。”</p></blockquote></li><li><blockquote><p>我当时就陷入沉思，在我们的教育体制内，哪种教材和考试能让小孩子具备这种快速反应下的手眼协调素质呢？我从来不反对我的孩子玩游戏，一个重要原因就是工业化的现代教育对高科技条件下所需“更原始的大脑功能”开发不足，玩游戏可以补充小学教育甚至大学教育在这一关键素质方面的不足。</p></blockquote></li><li><blockquote><p>既然传媒即信息，媒介的技术性变革会决定性地改变人的思维方式。这件事会不会做过头，结果让媒介技术最终支配了人本身？</p></blockquote></li><li><blockquote><p>卡尔认为，“信息过载”已经不是虚张声势的提醒，而是令人烦躁不安的事实。这个事实不但在吞噬着你我的注意力，更重要的是我们已经“失去了以前的大脑”</p></blockquote></li><li><blockquote><p>从纸面转到屏幕，改变的不仅是我们的阅读方式，它还影响了我们投入阅读的专注程度和沉浸在阅读之中的深入程度。</p></blockquote></li><li><blockquote><p>卡尔认为，古腾堡发明的活字印刷术唤醒了人们，深度阅读随之成了普遍流行的阅读习惯，在这种深度阅读活动中，“寂静是书中含义的一部分，寂静是读者思想的一部分”</p></blockquote></li><li><blockquote><p>知识记忆的功能，使得人的大脑对博闻强记的依赖迅速减弱；此外，图书馆、书籍所培育出来的“宁静的阅读”和“深邃辽远的对话”，在社交媒体的喧嚣声中，也成为无法还原的田园景象。</p></blockquote></li><li><blockquote><p>我们已经抛弃了孤独宁静、一心一意、全神贯注的智力传统，而这种智力规范正是书籍赠与我们的。我们已经把自己的命运交到了杂耍者的手上。我们正在彻底颠覆图书好不容易缔造出来的“深阅读”、独处阅读的氛围和神经系统。”</p></blockquote></li><li><blockquote><p>现在看上两三页，注意力就开始游移不定，我就会感到心绪不宁，思路不清，于是开始找点别的事做。我感觉就像拼命把自己天马行空的思绪拉回到文本上来一样。过去那种自然而然的精读如今已经变成了费力挣扎的苦差事。</p></blockquote></li><li><blockquote><p>信息过载”的感觉。在那些图书的静默不语中，有一种沉稳宁静的东西，为了等待合适的读者出现，把它们取走，它们愿意一等数年，甚至数十年。那些书用它们布满灰尘的模糊声音跟我窃窃私语：“不要着急，我们哪里也不去。”</p></blockquote></li><li><blockquote><p>“一旦发现值得记下的内容，随时都可以将其写在适当的位置上”。抄写摘录精彩内容，然后定期进行背诵，有助于牢记不忘。摘录引用的段落可以看做从书页当中采撷的“各种花朵”，它们可以在记忆的页面中保存下来。</p></blockquote></li><li><blockquote><p>“我们应该效仿蜜蜂。通过各种阅读采集而来的不管是什么东西，我们都应该分别收藏在不同的空间内，因为东西分别存放会更好。然后，我们应该勤勤恳恳地运用所有的聪明才智，把我们品尝过的各种各样的花粉混合起来，将其酿成甜美的蜂蜜。通过这样一种方式，即使外观表象还跟原来一样，其内在本质已经迥然不同于初始状态。</p></blockquote></li><li><blockquote><p>极大地拓展了“人工记忆”的范围和可用程度。把信息装进自己脑袋的重要性似乎越来越低。在互联网上，无穷无尽的数据可以轻松检索，这项技术的出现不仅引起了我们对记诵的看法进一步的改变，也引起了我们对记忆本身看法的进一步改变。</p></blockquote></li><li><blockquote><p>只要我们一上网，信息流就会奔涌而来，这不仅会给我们的工作记忆带来过重的负荷，而且还会导致大脑颞叶难以聚精会神地关注任何一件事。</p></blockquote></li><li><blockquote><p>而且，因为神经通路具有可塑性，我们上网越多，对大脑适应精力分散状态的训练就越多 非常迅速、高效地处理信息，可是注意力不会持续太久。之所以有那么多人觉得即便远离计算机，我们也难以全神贯注，原因就在于此。我们的大脑变得善于遗忘而不善于记忆了。</p></blockquote></li><li><blockquote><p>由于对网络的使用导致我们在生物记忆中保存信息的难度加大，我们被迫越来越依赖互联网上那个容量巨大、易于检索的人工记忆，哪怕它把我们变成了肤浅的思考者。</p></blockquote></li><li><blockquote><p>学会如何思考 的真正含义就是要学会训练对思考方式和思考内容加以控制的能力。这就意味着，对于你选择关注的对象以及你如何从经验当中构建意义，你要有足够的意识和了解。”放弃这种控制，就会陷入“无穷无尽的得而复失造成的永恒痛苦”之中。</p></blockquote></li><li><blockquote><p>网络上把在线数据对应的一个个比特连成一体的超链接完全不同于我们大脑当中的神经突触。网络链接只是个地址，只是些简单的软件标签，它只能引导浏览器载入另一个离散的信息页面。它们根本不具备我们的神经突触所具有的有机性和灵敏性。艾瑞·舒尔曼写道，大脑中的神经连接“并非仅仅提供对记忆的访问路径，从很多方面来讲，它们构成记忆”</p></blockquote></li><li><blockquote><p>人类文明要保持勃勃生机，就必须在每一代人所有成员的头脑当中重建。记忆外包，文明消亡。</p></blockquote></li></ul><h3 id="11-《学会提问：-批判性思维指南》"><a href="#11-《学会提问：-批判性思维指南》" class="headerlink" title="11.《学会提问： 批判性思维指南》"></a>11.《学会提问： 批判性思维指南》</h3><h4 id="作者-7"><a href="#作者-7" class="headerlink" title="作者"></a>作者</h4><ul><li>[美]托尼·瓦格纳</li></ul><h4 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h4><blockquote><p>本书作者应用批判性思维领域的最新研究成果，列举科学研究和日常生活中的大量实例，教授人们富有理性、逻辑性和批判性地提出、思考、判断和解决问题的方法。</p></blockquote><h4 id="读后感-9"><a href="#读后感-9" class="headerlink" title="读后感"></a>读后感</h4><p>这本书值得多读几遍，相关笔记去年读的时候写在了纸质日记本上，有空了再整理出来。</p><h4 id="摘抄-9"><a href="#摘抄-9" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>当面临种种广告或推销时，最好的策略或许就是持怀疑的态度。</p></blockquote></li><li><blockquote><p>广告公司不仅对我们的担忧和渴望了如指掌，而且他们以专业技能利用我们的担忧和渴望来谋取利益。</p></blockquote></li><li><blockquote><p>广告人斥巨资用于制造我们新的渴望和新的担忧——并因此创造.</p></blockquote></li><li><blockquote><p>即购买广告的产品来满足那些渴望或消除那些担忧，以此改善我们的生活。</p></blockquote></li><li><blockquote><p>别人可以通过文字和图像令我们对从前并不渴望的某物产生渴望，这也许是令人不快的事，但这显然是事实。</p></blockquote></li><li><blockquote><p>广告中的宣传之所以臭名昭著，不仅因为其模糊性，而且因其模棱两可、误导、夸张有时甚至是低级错误。</p></blockquote></li><li><blockquote><p>需要记住的是，广告的设计总是为了服务于支付广告费的人，如果广告说得天花乱坠，更需要我们警惕这一点。</p></blockquote></li><li><blockquote><p>值得强调的是，广告本来就不是用于论证购买产品的合理性的，广告是为了销售产品。</p></blockquote></li><li><blockquote><p>利益相关方比利益无关方更值得质疑。 ·对信息来源的质疑一般有两类，一类是质疑信息来源的知识或专业技能，一类是质疑信息来源的诚实性、客观性和正确性。</p></blockquote></li><li><blockquote><p>依然不是。只有在能引发你思考理由这个意义上，广告图片才“给你提供理由”去购买。在任何意义上，图片都不是也不可能是论证。</p></blockquote></li></ul><h3 id="12-《少有人走的路》"><a href="#12-《少有人走的路》" class="headerlink" title="12.《少有人走的路》"></a>12.《少有人走的路》</h3><h4 id="作者：-3"><a href="#作者：-3" class="headerlink" title="作者："></a>作者：</h4><ul><li>[美] M·斯科特·派克</li></ul><h4 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h4><h4 id="读后感-10"><a href="#读后感-10" class="headerlink" title="读后感"></a>读后感</h4><h4 id="摘抄-10"><a href="#摘抄-10" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>罪恶感就像是一盏灯，有了罪恶感，人才能看清自己身上的“恶”，从而走向善；而逃避罪恶感，不愿意承受良心的谴责，心灵就会一片漆黑。这样的心灵不仅无法燃烧出生命的光芒，还会吹熄别人的灯，扼杀别人的生命力。</p></blockquote></li><li><blockquote><p>来看心理医生的人大多数都是敢于面对自己内心的人，因为看心理医生的行动本身就证明他们觉得自己有问题，与正常的人不同，他们敢于质疑自己，敢于承认自己的不正常，最后才能变得正常。所以，寻求心理治疗的人是勇敢的人，也是令人敬佩的人。</p></blockquote></li><li><blockquote><p>在没有正视自己的内心之前，每个人都害怕自己的思想及情感遭到窥视。</p></blockquote></li><li><blockquote><p>自律是解决人生问题最主要的工具，也是消除人生痛苦最重要的方法。</p></blockquote></li></ul><h3 id="13-《上帝笑了-99-次：哲学悖论里的大思考-》"><a href="#13-《上帝笑了-99-次：哲学悖论里的大思考-》" class="headerlink" title="13.《上帝笑了 99 次：哲学悖论里的大思考 》"></a>13.《上帝笑了 99 次：哲学悖论里的大思考 》</h3><h4 id="作者-8"><a href="#作者-8" class="headerlink" title="作者"></a>作者</h4><ul><li>[英]彼得·凯弗</li></ul><h4 id="简介-12"><a href="#简介-12" class="headerlink" title="简介"></a>简介</h4><blockquote><p>一只美洲羊驼会坠入爱河吗？机器人能变成人吗？怎样才能不赢得公主青睐？人类一思考，上帝就发笑。在99个奇妙、怪诞、滑稽的问题背后，其实是99个烧脑的哲学、道德、法律领域的经典悖论，也是99道极富挑战性的大思考测试。本书内容覆盖了大多数常见哲学话题，包括形而上学、逻辑学、伦理学、语言哲学、政治哲学、自我认知、人际关系、美学、存在主义等，还配有20多幅漫画插图。在锻炼思维之外，本书也能帮我们建立个性化的哲学知识体系。</p></blockquote><h4 id="读后感-11"><a href="#读后感-11" class="headerlink" title="读后感"></a>读后感</h4><p>这本书和《 如果沒有今天，明天会不会有昨天？ 》一样，里面都是一些思想实验，而这本书里有 99 个思想实验。不过读完后感觉没有《 如果沒有今天，明天会不会有昨天？ 》这本书思考论证的精彩。所以读完《 如果沒有今天，明天会不会有昨天？ 》这本书真的没有必要再看这本书了。</p><p>不过读这本书的时候思考清楚了一件事情 <code>也许无论整体结果如何，忠于原则的行为，都有其本身的道德价值。</code></p><h4 id="摘抄-11"><a href="#摘抄-11" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>人的生命在经历一段时间后仍是同一条生命—你的价值观、记忆和意愿，你的个性、体征和能力，又是如何玄妙地结合为一个整体的呢？</p></blockquote></li><li><blockquote><p>对人的尊重，应当包括把他们当作理性的主体来对待，让他们有权同意或不同意自身如何被利用。</p></blockquote></li><li><blockquote><p>也许无论整体结果如何，忠于原则的行为，都有其本身的道德价值。</p></blockquote></li><li><blockquote><p>我们的共同理性和共同利益，必将引导我们去看待、接受构成所有公平法则、利益和权利的东西。在无知之幕背后，我们认可了一个容许基本自由的社会，不以无谓的理由歧视个人，并在个人遇到困难时提供救济。这似乎是理性的选择。</p></blockquote></li></ul><h3 id="14-《疯狂的投资：跨越大西洋电缆的商业传奇》"><a href="#14-《疯狂的投资：跨越大西洋电缆的商业传奇》" class="headerlink" title="14.《疯狂的投资：跨越大西洋电缆的商业传奇》"></a>14.《疯狂的投资：跨越大西洋电缆的商业传奇》</h3><h4 id="作者-9"><a href="#作者-9" class="headerlink" title="作者"></a>作者</h4><ul><li>[美]约翰.S.戈登</li></ul><h4 id="简介-13"><a href="#简介-13" class="headerlink" title="简介"></a>简介</h4><p>这本书讲的内容几年前就听说过。高二下学期，在语文课课前十分钟演讲的时候，我们班的一个同学讲过。 赛勒斯·菲尔德铺设第一条跨越大西洋的电缆的故事，而这一条电缆为一个世纪后的互联网地球村打下了坚实的技术基础。 虽然写得有些流水账，虽然是一百多年前的故事，但读起来依然波澜壮阔，总之是一个不错的励志的商业传奇故事。</p><h3 id="15-《乌合之众》"><a href="#15-《乌合之众》" class="headerlink" title="15.《乌合之众》"></a>15.《乌合之众》</h3><h4 id="作者-10"><a href="#作者-10" class="headerlink" title="作者"></a>作者</h4><p>[法] 古斯塔夫·勒庞</p><p>这本书在 2017 年的时候读过一遍，今年暑假回家坐火车的时候拿来读了一路子。</p><h3 id="16-《独裁者手册》"><a href="#16-《独裁者手册》" class="headerlink" title="16.《独裁者手册》"></a>16.《独裁者手册》</h3><h4 id="作者-11"><a href="#作者-11" class="headerlink" title="作者"></a>作者</h4><ul><li><p>[美] 布鲁诺·德·梅斯奎塔</p></li><li><p>[美] 阿拉斯泰尔·史密斯</p></li></ul><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p> 今年年初的时候，在栋叔（软件那些事儿电台博主、绿帽子大学校长、钢管舞演员、滴滴车司机）电报群里见到他推荐的这本书《独裁者手册》。这是一本小册子，内容不多，静下心来 10 个小时就能读完了它。这本书最主要的还是从统治的三个维度来分析专制国家和民主国家的区别，以及一些企业上对管理层权力斗争的原则。介绍一个理解政治的三维视角，即名义选择人、实际选择人、致胜联盟。</p><p>另外读这本书的时候，那一个星期恰好全球最长寿独裁统治者，津巴布韦前总统罗伯特·穆加贝去世 ，这本书中有一个章节专门讲述穆加贝是如何独裁统治的😂。不得不提一句，穆加贝也是中国人民的老朋友好朋友哦😉。呵呵，果然是趣味相投的狐朋狗友，个个都是极权专制独裁暴政的代名词。</p><blockquote><p>津巴布韦总统埃默森·姆南加古瓦当天通过自己的推特宣布了穆加贝去世的消息。1980年，随着津巴布韦宣告独立，穆加贝登上权力宝座，他在当地被视为独立运动的标志，但他当上总统后公开发表”津巴布韦是我的”“只有上帝才能把我拉下马”的言论，对津巴布韦进行了铁腕统治。据悉，穆加贝平时非常羡慕朝鲜的世袭统治。</p></blockquote><h4 id="摘抄-12"><a href="#摘抄-12" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>在美国，名义选择人和实际选择人相当紧密地结合在一起。这就是为什么尽管你只是与他人可相互替代的无数选民中的一员，却仍感觉你的那一票很有影响—它有价值，也算数。</p></blockquote></li><li><blockquote><p><strong>独裁制：</strong>这个术语在我们这里的真正意思是，政府建立在极少数不可或缺者的基础上，而他们是从数量非常庞大的可相互替代者以及通常相对较少的一群有影响者当中产生出来的。</p><p><strong>民主制：</strong>政府建立在数量庞大的不可或缺者和可相互替代者的基础上；同时，有影响者的数量几乎与可相互替代者一样多。</p></blockquote></li><li><blockquote><p>以不可或缺者、有影响者和可相互替代者这样的概念来看待各类组织的优点是，这些范畴使我们能克制自己，避免在各种政府形式之间武断地划线，宣称这个国家是“民主国家”，那个国家是“专制国家”，或这个国家是大共和国，那个国家是小共和国，也避免了一些历史上主要政治哲学家们持有的一维政治观。政府之间和组织之间更具重要意义和可观察到的行为差异取决于可相互替代者、有影响者和不可或缺者这三个集团的绝对和相对规模。</p></blockquote></li><li><blockquote><p>任何一个有能力的领导人都希望掌握尽可能多的权力，并尽可能长久地掌握权力。设法利用可相互替代者、有影响者和不可或缺者来达到自己的目的，这就是统治的行为、艺术和科学。</p><p>民主国家或任何一个致胜联盟很庞大的体系内，通过私人回报的方式来收买忠诚代价太大。钱会被极大摊薄。所以，依赖大型致胜联盟的、较民主的政府趋向于着重把钱花在能增进普遍福利的有效公共政策上，这很接近詹姆斯·麦迪逊倡导的理念。</p><p>与此形成对照的是，独裁者、君主、军政府领导人以及大部分企业首席执行官只依赖一小撮不可或缺者。正如马基雅维利所言，他们通过大慷公家之慨、以私人回报的方式收买致胜联盟的忠诚，这种统治方式更有成效，尽管这意味着要牺牲广大纳税人或千百万小股民的利益。因此，小型致胜联盟助长了稳定、腐败、以私人物品为导向的体制。</p></blockquote></li><li><blockquote><p>对一个统治者来说，与其拥有一张让人民可以喂饱自己的更大的饼，永远不如他能够决定谁吃这张饼。对领导人来说，最有效的资金分配方式是让很多人受穷，通过重新分配让挑选出来的支持者发财。</p></blockquote></li><li><blockquote><p>一名成功的领导人总是把核心支持者的需要置于人民的需要之上。没有他的致胜联盟的支持，一名领导人什么都不是，很快就会被对手横扫出局。但如果领导人的统治权只依赖于少数人，让联盟满意是得花钱的。通常来说，联盟成员获得的酬劳以牺牲社会其他部分的利益为代价。没错，是有一些独裁者让人民生活过得更好而成了名人堂成员。大多数独裁者不这么做。那些不这么做的独裁者将坐在办公室里为了自己和联盟的利益将国家的经济搞得一蹶不振。最终形势发展到足够恶化的地步，导致一些人民开始厌倦身上的重负。他们也会对领导人的生存产生威胁。</p></blockquote></li><li><blockquote><p>在一个民主国家，抗议相对便宜和简单。人民有集会的自由，事实上这是权利。他们也有很方便的协调组织手段。我们已从先前几章了解到，依赖大型联盟的政府创造了大量公共物品，包括统称为自由的一揽子特殊公共物品，包括新闻自由、言论自由和集会自由。这些自由权利使数量巨大的人民交换对于政府的看法、表达对任何不喜欢政策的反对意见变得容易得多</p><p>独裁者有两种截然相反的方法应对革命的威胁。他可以提升民主，大大改善人民的待遇，使他们不再想着反叛。他也可以加强专制独裁，让人民的境遇变得更加悲惨，同时一举扼杀人民造反成功的机会。</p></blockquote></li><li><blockquote><p><img src="../img/176047.jpg" alt="img"></p></blockquote></li><li><blockquote><p>尽管诸如言论自由、集会自由、新闻自由这样至关重要的自由权利很便宜就能提供，独裁者们却视之为瘟疫，避之唯恐不及。毫无疑问，民主领导人也巴不得避开这些自由权利，因为正是这些公共物品使得竞争对手组织起来推翻他们变得容易。但依赖大型联盟的领导人无法规避这些自由，因为如果他们无法保证很大数量的人们拥有自由言说、阅读、书写的权利、能够聚到一起自由探讨和辩论，他们将不可能聚集起一个致胜联盟。民主领导人必须倾听选民的声音，回应选民的期望，不然就有别人会上台来做。</p></blockquote></li></ul><h3 id="17-《肠子的小心思》"><a href="#17-《肠子的小心思》" class="headerlink" title="17.《肠子的小心思》"></a>17.《肠子的小心思》</h3><h4 id="作者-12"><a href="#作者-12" class="headerlink" title="作者"></a>作者</h4><ul><li>【德】朱莉娅·恩德斯</li></ul><h4 id="简介-14"><a href="#简介-14" class="headerlink" title="简介"></a>简介</h4><blockquote><p>《肠子的小心思》是德国图书界的黑马，口嫌体正直的德国人，一面对粑粑说着“不要不要”，一面看得好污好欢乐。原来，德国人觉得理所当然的马桶竟是痔疮的罪魁祸首；如此现代化的今天，蹲坑这种看似原始的行为竟然还在全世界一半以上的地区保留着，而且这才是大便的正确解锁方式；跟肠子相关的事，不仅有趣，还密切关系到人体的健康状况，一个感觉不好的肠道会让我们感到沮丧，而一个健康的、营养良好的肠道会大大地改善我们的情绪……谁能想到这些奇葩欢乐的内容，竟是一位软萌妹子所写，还一举俘获36个国家和地区读者的心。让我们跟着这本新鲜出炉带着屎味的书，一起开启神奇的消化道之旅吧。</p></blockquote><h4 id="读后感-12"><a href="#读后感-12" class="headerlink" title="读后感"></a>读后感</h4><p>这本书用一个字来形容的话就是 <strong>萌</strong> ，是我读过所有科普书籍中最有趣，语言最为幽默的一本书。虽然书名是肠子的小心思，但它包含的内容不仅仅是肠子哦，不要被书名误导了。它是从口到菊花，整个消化系统讲了一遍😂。另外还穿插讲了婴儿刨腹产和自然分娩对婴儿肠道菌落以及免疫系统的影响😂。</p><h4 id="摘抄-13"><a href="#摘抄-13" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>他们让实验对象吞下一些荧光试剂，然后用不同的姿势上厕所，同时接受X光照射。实验结果如下：一、没错，在蹲坑状态下，肠道确实变得笔直，排便通畅彻底；二、这世界上还真有这么为科学献身的人，吞下荧光剂不说，居然还能忍受拉荧光粑粑时让人全程X光跟拍！我不得不说，这两点都让人印象深刻。</p></blockquote></li><li><blockquote><p>痔疮和肠道内憩室这样的肠道疾病，还有便秘，似乎只集中爆发于那些习惯用坐便器的国家。肌肉组织松弛并非罪魁祸首，原因另有所在，尤其是对于年轻人来说，很多人发病的原因是肠道受到的压力过大。有些人在压力大、精神紧张的情况下就会绷紧腹肌，有时绷了整整一天自己还对此毫不察觉，痔疮自然不愿意待在压力过大的地方，还是溜到身体外面轻松自在。同理，肠子内部的组织如果不堪压力也只好向外边跑，于是肠壁上冒出一个个灯泡状的外翻小瘤子，就形成了肠内憩室。</p></blockquote></li><li><blockquote><p>一个朋友在法国度假时给我发了条短信：“法国真是变态，有小偷专门偷高速公路上的马桶，连着三个厕所里的马桶都被偷了！”我忍不住哈哈大笑，因为，一、他居然真的以为法国的蹲坑厕所是被小偷洗劫的结果；二、这让我回想起第一次在法国见到蹲坑时，地上的大洞把我吓得眼泪汪汪、左右为难：亲，在这个坑上面架个马桶就这么难吗？</p><p>其实没那么夸张啦，坐在马桶上我们也可以达到蹲坑的顺畅排便效果——只要脚下垫个小板凳，上半身微微向前倾，找好角度——成了！就这么简单，现在你又可以在大便的时候读书、折纸或者专心发呆，妈妈再也不用担心你得痔疮了。</p></blockquote></li><li><blockquote><p>当然不是每个阑尾都会发炎。如果阑尾正常工作的话，危险的病菌应该都会被消灭掉，只有那些好的细菌才会存活下来。换句话说，健康的阑尾里就应该只有精挑细选的优质好细菌啰。美国研究人员威廉·帕克（William Parker）和兰迪·布林格（Randy Bollinger）就是这么想的。他们在2007年提出这个理论，之后又通过实验验证了这个理论。当我们经历了一轮严重腹泻后，肚子里的很多“肠道居民”都会被连带着扫地出门，大肠壁上处处人去楼空，这对于新的菌群来说是抢占地盘的绝佳时机。我们当然不愿意谁抢着就归谁，万一住进来坏人怎么办呀。别怕！根据帕克和布林格的实验结果，这时阑尾会成为救世英雄，它会把自己圈养的菌群放出来，派往大肠各处保卫家园。</p></blockquote></li><li><blockquote><p>大肠的最后一米负责精确调节体内水和盐分的平衡：残渣中的水分会被重新吸收，剩下的残渣会被“烘焙”成大便。在这里被吸收的水量相当可观，差不多有整整1升。要是少了这一步，我们每天要额外多喝整整一升的水呢。还有，因为大肠调节盐分的结果，我们的大便总是咸的。当然，我可没有鼓励你去尝尝的意思哦。😂</p></blockquote></li><li><blockquote><p>正常的便便都是屎黄或者屎棕色的。就算我们吃的饭里没有这个颜色的食物，最后拉出来的也还是这个颜色。就好像它的好朋友小便也是，总是一个黄色的调调。这个黄色来自于身体每天都努力生产的重要产品—— 血液。身体每秒钟都有240万个血细胞诞生，但同时也有这么多的血细胞作废—— 血细胞中的红色素先会变成绿色，然后再变成黄色，这个颜色渐变的过程在你撞青了胳膊或者腿的时候就可以观察得到。黄色素的一小部分可以通过小便被排出体外，而大部分则是通过肝脏到达肠道，然后被细菌再加工成棕色。如果便便不是棕黄色的，那你就要引起重视了。</p></blockquote></li><li><blockquote><p>肠神经注意到了这种不同寻常的情况，它们有点晕了：这是怎么个情况？还是先观察一段时间吧。就算在如此混乱的一天里，肠道还是坚持完成了工作，向我们发出了去厕所的信号，但是因为我们在路上一时不方便去厕所，所以便硬生生地忽视了它的信号，把便便堵在门口。而经常所谓的“一时不方便”，你不如就坦白承认了吧，其实根本就是因为你是“不是我家厕所不能忍星人”。此星球的人不是自己家的厕所一般都不太能坐得下去。最恐怖的是公共厕所，要拿出十二分的勇气才能进去，进去了以后先要花若干时间用厕纸把马桶圈一层一层地垫起来，就这样坐下去的时候基本上还要动用“水上漂”的轻功，坚决不能坐实。要是再硌硬点的连这个都不行。对于此星球的居民来说，旅游简直就是对肠子的惩罚，请你们在旅途中务必找一个你家厕所的代替品，让肠子安静舒心地干完大事。</p></blockquote></li><li><blockquote><p>新生的小婴儿肚子里面还没几个细菌，理论上来说，给他们输不同血型的血时是不会有排异反应的。（因为小婴儿的血液里会有从妈妈那里得到的抗体，所以医院为了安全起见，一般都用和妈妈同一血型的血液进行输血。）一旦免疫系统和肠道菌群基本发育完成，人们就只能兼容同一种血液类型了。</p></blockquote></li><li><blockquote><p>我们出生前还在妈妈的子宫里的时候，是完全无菌的。除了和妈妈的互动，9个月以来我们都处于与世隔绝的状态。我们摄取的是妈妈已经消化过了的食物，我们呼吸的氧气妈妈也提前过滤过了。妈妈通过血液把这些食物和氧气传送给我们，而她的血液已经经过了免疫系统的杀菌消毒。我们被羊膜包裹着，外面又套着肌肉发达的子宫，子宫颈又被牢牢密封着。我们就像在一个层层包裹的保险箱里，这里没有寄生虫，没有病毒，没有细菌，没有真菌，更不要说会有第二个人能碰到我们。我们比消毒过的手术台还要干净。</p><p>这辈子我们再也不会有像在子宫里的时间，那样被保护着，但也是那样的孤独。一旦出生来到这个世界，我们便会立刻融入到熙熙攘攘的众生中去。在这个世界上，每一个大一点的生物都会有至少一种小生物去陪伴它、帮助它，作为回报，这个小生物可以寄居在它身上。一旦我们出生来到这个世界，也会自动遵守这个规律，因为我们的身体结构就是这样设计好了的。我们的细胞表面很适合细菌依附，它们就这样依附着我们，千百年来和我们一起共同进化。</p><p>一旦保护膜不再密封，哪怕只开了个小口，细菌就立刻浩浩荡荡迁居过来了。我们刚才还是100%由人类细胞组成的，一瞬间就会被数不清的微生物占领，以至于最后我们浑身上下所有的细胞里，只有10%是人类细胞，而剩下的90%都是其他各种微生物的细胞。因为人类的细胞比这些小寄居客的细胞要大太多了，所以我们根本感觉不到自己已经完全被占领了。在我们第一次看妈妈温柔的眼神之前，妈妈子宫里的细菌们已经过来和我们一一打过招呼了。首先打招呼的是阴道里的保护菌，它们是这块圣地的守卫者。它们通过制造酸性物质将其他细菌全部驱赶干净，以确保通向子宫的圣路每向前走一步都更洁净。</p><p><img src="../img/PIC.png" alt></p></blockquote></li><li><blockquote><p>皮肤菌群的自我管理可比产道菌群要松散得多，因为它太容易受到周围环境的影响。通过皮肤接触，这些皮肤上的细菌很可能很快也会出现在小宝宝的肠道里，病原体和其他轻量级危险分子都可以大摇大摆地通过这种方式去逗逗小宝宝的免疫系统，陪它练练手。剖腹产出生的宝宝，他们的肠道菌群需要几个月甚至更长的时间才能调整到正常状态，所以抵抗力相较于顺产的宝宝会弱一些。比如被医院里的细菌感染到的新生儿中，有3/4都是剖腹产出生的。除此之外，剖腹产出生的婴儿以后患过敏症或者哮喘的风险要比顺产的婴儿高不少。不过一项美国的研究表明，如果给剖腹产的新生儿口服一种特定的乳杆菌，可以把他们患过敏的概率降低。正常分娩的婴儿这种担心就要少多了，因为他们在出生的过程中已经在益生菌的圣水中浸泡过了。</p></blockquote></li></ul><h3 id="18-《民主的奇迹：-美国宪法制定的127天-》"><a href="#18-《民主的奇迹：-美国宪法制定的127天-》" class="headerlink" title="18.《民主的奇迹： 美国宪法制定的127天 》"></a>18.《民主的奇迹： 美国宪法制定的127天 》</h3><h4 id="作者-13"><a href="#作者-13" class="headerlink" title="作者"></a>作者</h4><ul><li>[美]凯瑟琳·德林克·鲍恩</li></ul><h4 id="简介-15"><a href="#简介-15" class="headerlink" title="简介"></a>简介</h4><h4 id="摘抄-14"><a href="#摘抄-14" class="headerlink" title="摘抄"></a>摘抄</h4><h3 id="19-《Kubernetes-指南第四版》"><a href="#19-《Kubernetes-指南第四版》" class="headerlink" title="19.《Kubernetes 指南第四版》"></a>19.《Kubernetes 指南第四版》</h3><h3 id="20-《程序员的自我修养：-链接、装载与库-》"><a href="#20-《程序员的自我修养：-链接、装载与库-》" class="headerlink" title="20.《程序员的自我修养： 链接、装载与库 》"></a>20.《程序员的自我修养： 链接、装载与库 》</h3><h4 id="作者：-4"><a href="#作者：-4" class="headerlink" title="作者："></a>作者：</h4><ul><li>俞甲子</li><li>石凡</li><li>潘爱民</li></ul><h3 id="21-《程序员的英语》"><a href="#21-《程序员的英语》" class="headerlink" title="21.《程序员的英语》"></a>21.《程序员的英语》</h3><h4 id="作者-14"><a href="#作者-14" class="headerlink" title="作者"></a>作者</h4><ul><li>[韩]朴栽浒</li><li>[韩]李海永</li></ul><p>这本书是在图灵社区兑换的，反正不要白不要。其实这本书徒有虚名，就是三十多篇阅读理解一样文章，然后拿来帮你分析和短句。就当拿来练练英语阅读理解海星。不过作者排版方面确实很用心。文章引用的链接都是使用的 Google 的短链接，这一点倒是比较方便读者查看浏览引用的那些文章，总之不建议读。</p><h3 id="22-《第二性》"><a href="#22-《第二性》" class="headerlink" title="22.《第二性》"></a>22.《第二性》</h3><h4 id="作者-15"><a href="#作者-15" class="headerlink" title="作者"></a>作者</h4><ul><li>[法] 西蒙娜·德·波伏娃</li></ul><h3 id="23-《过去与未来之间》"><a href="#23-《过去与未来之间》" class="headerlink" title="23.《过去与未来之间》"></a>23.《过去与未来之间》</h3><h4 id="作者-16"><a href="#作者-16" class="headerlink" title="作者"></a>作者</h4><ul><li>[德] 汉娜·阿伦特</li></ul><h3 id="24-《论革命》"><a href="#24-《论革命》" class="headerlink" title="24.《论革命》"></a>24.《论革命》</h3><h4 id="作者-17"><a href="#作者-17" class="headerlink" title="作者"></a>作者</h4><ul><li>[德] 汉娜·阿伦特</li></ul><h4 id="简介-16"><a href="#简介-16" class="headerlink" title="简介"></a>简介</h4><p><img src="../img/image-20191127190459402.png" alt="image-20191127190459402"></p><p>这本书是双十一的时候买的纸质版图书，因为搬家不方便所以毕业后就很少再买纸质书了。Kindle 商店里也有电子版，Kindle  Unlimited 会员可以免费借阅。</p><p>拿到书后大致读了半个小时，刚开始读的时候我觉着这本书和《民主的奇迹》一块看是不错滴。《民主的奇迹》这本书是讲述了美国宪法制定的 128 天的历程。在这当中的历程中对宪法指定的方方面面讲述的都很详细。而《论革命》这本书也讲到了美国宪法的一些方面，但要比《民主的奇迹》讲的更为广泛。不仅仅在书中对比了法国大根名和美国革命的本质，还涉及到一些制度权力等思想。</p><h4 id="摘抄-15"><a href="#摘抄-15" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><img src="../img/image-20191127190849806.png" alt="image-20191127190849806"></li><li><img src="../img/image-20191127190914310.png" alt="image-20191127190914310"></li><li><img src="../img/image-20191127190945249.png" alt="image-20191127190945249"></li><li><img src="../img/image-20191127191005006.png" alt="image-20191127191005006"></li><li><img src="../img/image-20191127191050123.png" alt="image-20191127191050123"></li><li><img src="../img/image-20191127191116424.png" alt="image-20191127191116424"></li><li><img src="../img/image-20191127191152146.png" alt="image-20191127191152146"></li><li><img src="../img/image-20191127191222289.png" alt="image-20191127191222289"></li><li><img src="../img/image-20191127191308757.png" alt="image-20191127191308757"></li><li><img src="../img/image-20191127191332749.png" alt="image-20191127191332749"></li><li><img src="../img/image-20191127191437853.png" alt="image-20191127191437853"></li></ul><h3 id="25-《极权主义的起源》"><a href="#25-《极权主义的起源》" class="headerlink" title="25.《极权主义的起源》"></a>25.《极权主义的起源》</h3><h4 id="作者-18"><a href="#作者-18" class="headerlink" title="作者"></a>作者</h4><ul><li>[德] 汉娜·阿伦特</li></ul><p>这本书纸质版已经绝版了，淘宝上只能买到影印版，正版的旧书价格至少在 250￥。月末的时候我姐给我买了一本送给我😍。</p><h4 id="简介-17"><a href="#简介-17" class="headerlink" title="简介"></a>简介</h4><blockquote><p>有关极权主义的起源，阿伦特的分析最具特色之点在于：全面恐怖的极权主义之所以能够大行其道，它所针对的是切断了与他人联系的原子化的个人，“恐怖只有对那些互相隔离的人才能实施绝对统治。”这种“孤独”带来一系列的后果：不能与他人分享自己的感受和经验，从而丧失判断事物的基本常识，将反常视为正常；不能感到和他人呼吸在同一个天地之中，于是造成对于他人莫名其妙的仇恨，感到这个世界正在联合起来反对自己，同时也把自己放到反对一切人的位置上。在感到自身无根、缺少意义的焦虑时，一方面，丧失了对于自己的信心，失去对于自身行动的任何信心和力量；另一方面，由于某种虚无所造成的真空，十分容易被他人乘虚而入，灌输进“假大空”的意义，以某种反常的、不可思议的举动来证明自己。一个恶性循环就是这样形成了：极权政权想尽一切办法造成这种孤独和虚无；而孤独和虚无又在滋生极权因素和强化极权政府。在阿伦特的表述中，包含了极权政权和这种政权之下的人们互相之间不可分割的看法。 </p></blockquote><p>推荐大家读一读 <a href="https://www.chinesepen.org/blog/archives/90388" target="_blank" rel="noopener">崔卫平：后极权主义及其反抗</a>文章</p><h4 id="读后感-13"><a href="#读后感-13" class="headerlink" title="读后感"></a>读后感</h4><p>到目前为止我仅仅读完了三十多页的序言，不过读完序言也就对这本书有了大致的了解。这本书大概 500 多页，以我的读书进度大概需要两周的时间。所以要放到 2020 年再去写读后感和摘抄了。</p><h3 id="26-《童年的消逝》"><a href="#26-《童年的消逝》" class="headerlink" title="26.《童年的消逝》"></a>26.《童年的消逝》</h3><h4 id="作者-19"><a href="#作者-19" class="headerlink" title="作者"></a>作者</h4><ul><li>[美] 尼尔·波兹曼</li></ul><h4 id="简介-18"><a href="#简介-18" class="headerlink" title="简介"></a>简介</h4><p><img src="../img/image-20191127190608896.png" alt="image-20191127190608896"></p><blockquote><p>在《童年的消逝》里，波兹曼运用他对心理学、历史学、语义学和麦克卢汉学说的深刻见解以及常识，非常有说服力地阐述了一个触目惊心而且颇具独创的论题，即童年的诞生，是因为新的印刷媒介在儿童和成人之间强加了一些分界线，而在电视之类媒体的猛烈攻击下分界线变得越来越模糊，成人的性秘密和暴力问题转变为娱乐，新闻和广告定位在10岁孩子的智力水平。这也是一份内容翔实、令人震惊的警世书。</p></blockquote><p><img src="../img/image-20191127190621622.png" alt="image-20191127190621622"></p><h4 id="读后感-14"><a href="#读后感-14" class="headerlink" title="读后感"></a>读后感</h4><p>在书中作者通过历史论证了<code>童年的概念是文艺复兴的伟大发明之一</code>，也许是最具人性的一个发明。我感觉童年的诞生与印刷媒介之间的联系有些牵强了，或许是我知识水平不足，回头再多读几遍。</p><p>乔治•奥威尔曾在《一九八四》中预言人们将会遭受外来压迫的奴役，失去自由，我们的文化成为受制文化，赫胥黎则在《美丽新世界》中表达了另外一种忧虑，人们会渐渐爱上压迫，崇拜那些使他们丧失思考能力的工业技术。读完《娱乐至死》与《童年的消逝》 后我觉着未来能成为现实的是 1984 和娱乐至死相互交织的社会。尤其是对于某些摸着石头过河的国家来说，当前的现状也正是 1984 和娱乐至死共同存在的社会。不关心政治的人岁月静好地刷着抖音短视频，逛着淘宝看这电影娱乐消费觉着自己生活在岁月静好的美好社会。而遭遇过社会主义铁拳打击的人在对这个社会痛恨和绝望的同时也依靠着被真理部牢牢掌控的媒体所洗脑控制。</p><p>抱歉，扯得有点远了😝。其实我对抖音快手短视频有一种近乎疯狂的憎恨，在我看来，抖音记录的不是生活，而是空荡荡无知的内心。所以我一向抵制短视频，并对短视频文化憎恶痛恨。</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">在公交车和地铁上见到小学生刷短视频越来越多了。<br>小孩儿也变得和大人一样习惯了刷短视频，沉浸到碎片化娱乐之中。若是 Neil Postman 老人家看到了如今男女老少都碰着手机刷短视频的移动互联网时代，怕是要气得从坟墓里爬出来，棺材板都压不住了吧。<a href="https://twitter.com/hashtag/%E7%AB%A5%E5%B9%B4%E7%9A%84%E6%B6%88%E9%80%9D?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#童年的消逝</a> <a href="https://t.co/durMqylvkd" target="_blank" rel="noopener">https://t.co/durMqylvkd</a> <a href="https://t.co/V5g8q2AE6b" target="_blank" rel="noopener">pic.twitter.com/V5g8q2AE6b</a></p>&mdash; 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1199726295145484288?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">November 27, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> <h4 id="摘抄-16"><a href="#摘抄-16" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>童年作为一种社会结构和心理条件，与科学、单一民族的独立国家以及宗教自由一起，大约在16世纪产生，经过不断提炼和培育，延续到我们这个时代。</p><p>它们大多是通过观察传播媒介如何影响社交过程而产生的一系列推测；尤其是印刷术如何创造了童年，电子媒介又如何使之“消逝”。</p></blockquote></li><li><blockquote><p>不得不眼睁睁地看着儿童的天真无邪、可塑性和好奇心逐渐退化，然后扭曲成为伪成人的劣等面目，这是令人痛心和尴尬的，而且尤其可悲。</p></blockquote></li><li><blockquote><p>因此，希腊人发明了“学校”这个概念是毫无疑问的。在希腊语中，“学校”一词的意思是“闲暇”。这反映了一种典型的雅典式的信仰：他们认为闲暇时，一个文明人自然会花时间思考和学习。</p></blockquote></li><li><blockquote><p>放眼望去，人们不难发现，成人和儿童在行为举止、语言习惯、处世态度和需求欲望上，甚至身体的外表上，越来越难以分辨了。</p></blockquote></li><li><blockquote><p>希腊人为我们预示了“童年”这个概念。我们常常理所当然地把许多观念的产生看作人类智力开化的结果。对于童年的诞生，我们应当感谢希腊人的贡献。他们虽然没有创造出童年，但是他们已经走得很近了，以至于在2000年以后，当童年产生时，我们便能识别它的希腊之源。</p></blockquote></li><li><blockquote><p>那就是古代纸莎草纸和羊皮纸的来源变得稀少；若不是那样的话，那么就是严酷的生活现实不允许人们花费精力去生产这些东西。我们都知道，纸张是到了13世纪才出现在中世纪欧洲的。这时，欧洲人立即开始生产纸张。不过，他们不是用手和脚这样古老的方式造纸，而是用水能驱动的工厂来造纸。[17]中世纪一些优秀的大学纷纷建立，与之相呼应的是人们对识字又旧情复燃，这恰好跟引进纸张和生产纸张同时发生。</p></blockquote></li><li><blockquote><p>罗马教会并不是没有看到工匠识字文化的好处，因为它是一种能够控制数量众多而且多元化的人口的工具，也就是说，它能控制数量众多而且多元化的人民的思想、组织和忠诚。也完全是符合教会的利益的。</p></blockquote></li><li><blockquote><p>孤立的读者和他自己的眼睛。口腔无须再发声音，读者及其反应跟社会环境脱离开来，读者退回到自己的心灵世界。整个阅读的过程，作者和读者仿佛达成共谋，对抗社会参与和社会意识。简而言之，阅读成为反社会的行为。</p></blockquote></li><li><blockquote><p>可以说，印刷给予我们自我，使我们以独特的个体来思索和谈话。而这种强化了的自我意识便是最终导致童年开花结果的种子</p></blockquote></li><li><blockquote><p>哈罗德·英尼斯提出的原则：新的传播技术不仅给予我们新的考虑内容，而且给予我们新的思维方式。书籍的印刷形式创造了一种全新的组织内容的方式，从而推动了一种新的组织思想的方式。印刷书籍所具有的一成不变的线性特点——一句一句排列的序列性，它的分段，按字母顺序的索引，标准化的拼写和语法——导致一种詹姆斯·乔伊斯[29]戏称为“ABC式”的思维习惯，即一种跟排版结构非常相似的意识结构</p></blockquote></li><li><blockquote><p>我们绝不能低估语言从耳朵转移到眼睛、从口语转移到排版这个过程对人类心理造成的撞击。能够看到自己的语言持久存在、反复印刷，而且以标准的形式出现，这使人类与语言产生了最深厚的关系。</p></blockquote></li><li><blockquote><p>首先，印刷不仅创造了新的收集数据的方法和来源，而且极大地增加了大陆范围内科学家之间的交流。其次，标准化的印刷形式导致了统一的数学符号，包括用阿拉伯数字取代罗马数字。此外，标准化的印刷大半消除了文本中的模糊不清，并减少了图解、图表、表格和地图上的错误。印刷使直观教具现成可用，这样也使大自然显得更加千篇一律，因此更通俗易懂。</p><p>自从有了印刷术，成年就变得需要努力才能挣来了。它变成了一个象征性的成就，但不是生物学意义上的成就。自从有了印刷术，未成年人必须通过学习识字、进入印刷排版的世界，才能变成成人。为了达到这个目的，他们必须接受教育。因此，欧洲文明重新创造了学校，从而使童年的概念也变成社会必需的了。</p></blockquote></li><li><blockquote><p>书本和书本学习的世界几乎算不上我们超越动物本能的胜利；一个识字社会的要求使一种精雕细琢的羞耻感变得非常必要。若稍加引申，我们便可以说，由于印刷将信息和送信人分开，由于印刷创造了一个抽象思维的世界，由于印刷要求身体服从于头脑，由于印刷强调思考的美德，所以，印刷强化了人们对头脑和身体二元性的看法，从而助长了对身体的蔑视。印刷赋予我们的是脱离躯壳的头脑，但却留下了一个我们该如何控制身体的其余部分的问题。羞耻心正是这种控制得以实现的途径。</p></blockquote></li><li><blockquote><p>电视向人们提供了一个相当原始而又不可抗拒的选择，因为它可以取代印刷文字的线性和序列逻辑的特征，所以往往使文字教育的严谨显得没有意义。</p><p>电视侵蚀了童年和成年的分界线。这表现在三个方面，而它们都跟电视无法区分信息使用权密切相关：第一，理解电视的形式不需要任何训练；第二，无论对头脑还是行为，电视都没有复杂的要求；第三，电视不能分离观众。借助其他电子的、非印刷的各种媒介，电视又重新创造出14、15世纪就存在的传播条件。</p><p>例如，希腊悲剧诗人索福克勒斯（Sophocles）对人们企图在电视上“略谈”乱伦会有何种看法？弗洛伊德对人们把心理分析当作杂耍剧又会做何感想？为什么人们本应在心理学家的沙发上和忏悔室里交流的话题，要恬不知耻、堂而皇之地成为公开讨论的话题？</p><p>羞耻是野蛮行为得以控制的机制，如切斯特顿所认为，它的主要力量来自于围绕着各种行为的神秘感和敬畏感</p></blockquote></li><li><blockquote><p>儿童之所以好奇，是因为他们还不知道将要知道的东西；成人之所以有权威，主要是因为他们是知识的主要来源。权威和好奇之间的微妙平衡，正是玛格丽特·米德的重要著作《文化与承诺：一项有关代沟问题的研究》的主题。在书中，她指出，我们正在进入一个日新月异、信息公开的世界。在这个世界中，成人已经不能扮演年轻人的导师的角色，因此导致了一种危机，她称之为“信仰危机”。“我相信这种信仰危机，”她写道，“可以归因于……现在长辈对年轻人的经历，没能比年轻人自己有更多的了解。</p><p>但是我相信，很清楚的是，由于电子媒体肆无忌惮地揭示一切文化秘密，它已对成人的权威和儿童的好奇构成了严重的挑战。在某种程度上，好奇心是儿童的天性，但它的发展却有赖于人们日益清楚地了解通过秩序井然的问题来揭示各种秘密的重要性。已知的世界和未知的世界是通过好奇来连接的，但好奇大半发生在儿童世界，和成人世界是分离的，儿童必须通过提问寻求进入成人的世界。</p><p>由于媒介将两个世界合二为一，保持秘密所产生的张力在谜底被揭开时势必减弱，所以好奇的演算方法也随之发生了变化。好奇被愤世嫉俗——或者更糟——被狂妄自大所取代。于是，我们的孩子不能依靠有权威的成人，而是依赖不知从哪里来的新闻来获取知识。我们的孩子还没有提问，就被给予一大堆的答案。简言之，我们身边没有儿童了。</p></blockquote></li><li><blockquote><p>例如，还有购物这样的生存快乐。在儿童还很小的时候，电视就向他们揭示消费主义的快乐和购买几乎任何东西后所产生的满足感：从地板蜡到汽车。到牙买加或夏威夷旅行一次可以消除工作的疲劳；购买克莱斯勒汽车可以提高一个人的社会地位；使用某种洗涤剂有助于提高一个人的能力；使用某种漱口水。了解这些都是令人安慰的。这些都是美国文化给人们的承诺。它们正好迎合了成人在现实生活中的各种动机。儿童3岁时就已经被灌输这样的动机，因为电视欢迎大家一起来分享一切。我并不认为那些是一个成熟意义上的成人的动机。</p></blockquote></li><li><blockquote><p>我们的孩子比以往任何时候都要消息灵通，究竟是什么意思？他们知道长辈知道的一切又意味着什么？这意味着他们已经变成成人，或者至少像成人一样。用我自己的一个比喻，这意味着当儿童有机会接触到从前密藏的成人信息的果实时，他们已经被逐出儿童这个乐园了。</p><p>通过政府干预来控制电视，并由此控制可供大家享用的信息内容是可能做到的。其实，在世界上大多数国家，情况正是如此。但是，无论何时，无论何地，只要电视节目不受政府严格的限制，美国的模式就会被仿效。</p></blockquote></li><li><blockquote><p>自制能力，对延迟的满足感的容忍度，具备抽象、有序思维这样高一级的能力，关注历史的延续性和未来的能力，高度评价说理和等级秩序的能力。由于电子媒介将识字能力推至文化的边缘，进而占据了文化的中心地位，各种不同的态度和性格特征开始受到重视，同时一个缩小了内涵的新的成人定义开始出现。</p></blockquote></li><li><blockquote><p>电视不能把人的注意力集中到思想上来，因为思想是抽象的、有距离的、复杂的和有秩序的，而电视总是把人的注意力吸引到人物身上，因为人物是具体的、生动的和完整的。</p><p>这意味着电视已经彻底改变了政治信息的符号形式。在电视时代，政治判断从对提议的知识评判转化为对整个人物形象的直观而情绪化的反映。在电视时代，人们赞成或不赞成这些政客，如同喜欢或不喜欢他们一样。电视重新定义了“正确的政治判断”，它把政治判断从一个逻辑判断转变成了一个审美判断。这是电视的催眠作用，它使人们的理智和情感变得迟钝了。</p><p>一个节目[5]是一种娱乐，一个虚假和幻想的世界，经小心筹划后拼接在一起以期产生一系列具体的效果。这样可以让观众欢笑、哭泣或目瞪口呆，这就是新闻节目所做的事。</p></blockquote><blockquote></blockquote></li><li><blockquote><p>也就是说，电视广告已经摒弃了商业主义的一个关键假设，即购买者和行销者都是根据自我利益，经过理性考虑之后达成交易。</p><p>它们不向消费者提供各种各样的事实，它们提供的是偶像，这样成人和儿童都能以同等的感情投入，同时也避免了逻辑或核实的麻烦。</p><p>在电视广告寓言里，邪恶的根源是“技术无知”（technological innocence），即对工业进步所带来的种种益处一无所知。这是造成现实生活中不幸福、羞辱和不和谐的主要根源。而且，人们绝不能自满——或者更糟——沾沾自喜。企图简单地生活，不关心技术进步，这样总是很危险的，因为这种人的天真幼稚在那些对技术警觉的人眼里是非常触目惊心的。而那些警觉的人可能是服务员、朋友、邻居或者一个光谱形象，如精灵，它不知从何而来地突然在你的厨房里显现，见证你的懒惰无知。</p><p>“狂喜”在此是个关键的概念，因为广告寓言极其详细地描绘过形形色色的欣喜若狂，这在任何宗教文献里都不乏其例。在《有斑渍的玻璃器皿的寓言》（The Parable of the Spotted Glassware）里，一个丈夫和一个妻子都认为这种心醉神迷的表情只能用“美化”（beautification）这个词来形容。</p></blockquote></li><li><blockquote><p>电视以视觉形象的形式而不是语言，来表达大多数的内容，所以，它势必放弃文字阐述，而使用叙事的模式。正因为如此，电视供人娱乐的能力几乎用之不竭。</p></blockquote></li><li><blockquote><p>唯一具备这种能力的技术是电脑。为了设计电脑编程，人们基本上必须学习一种语言。这意味着人们必须掌握复杂的分析技能，类似于一个完全有文化的人需要具备的技能。这就要求进行特殊的训练。如果人人都需要了解电脑如何运作，如何将它们的世界观强加于我们，如何改变我们对判断的定义，也就是说，如果一个全球性的电脑文化被视为必需，那么，可以想见，年轻人的教育会变得非常重要，年轻人的文化必须与成人文化不同的想法也会被保存下来。</p></blockquote></li><li><blockquote><p>而且，要保证孩子们努力学习，成为识字有文化的人，出奇地耗费时间，甚至代价昂贵。然而，最具反叛意义的是努力控制子女接触媒介的机会。事实上，要这么做有两种方法：一是限制子女暴露在媒介前的时间；二是仔细监督子女接触的媒介的内容，并持续为他们提供有关媒介内容的主题和价值方面的批评。要做到这两点绝非易事。而且，这么做，需要家长在抚养子女方面付出极大的关注，这是多数家长都不准备做的。</p></blockquote></li><li><blockquote><p>虽然声称识字文化纯粹是一种恩赐，会让人觉得既天真也不准确，但是书写文字，然后是印刷文字，的确为人类文明带来了一种新的社会组织。它带来了逻辑、科学、教育和礼仪，诚然也带来了戈登森先生所掌管的技术。因此，我们可以说，识字的头脑为识字文化播下了毁灭的种子，因为识字的头脑创造了新的媒介，而这些媒介又使识字文化所依赖的“传统的技能”变得毫无意义。</p></blockquote></li></ul><h3 id="27-《永久记录》"><a href="#27-《永久记录》" class="headerlink" title="27.《永久记录》"></a>27.《永久记录》</h3><h4 id="作者-20"><a href="#作者-20" class="headerlink" title="作者"></a>作者</h4><ul><li>爱德华·斯诺登</li></ul><h4 id="简介-19"><a href="#简介-19" class="headerlink" title="简介"></a>简介</h4><blockquote><p>国安局的逻辑是，收集来的情资一定得储存起来，日后才能方便运用。但没人能预测这些情资何时能派上用场。这样的观念助长国安局的终极目标，那就是将收集、制造的情资永远储存下来，创造出一个完美的记忆库、一份永久的纪录档案。</p></blockquote><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p><img src="../img/image-20191127190747747.png" alt="image-20191127190747747"></p><p>看了斯诺登的推特说他的中文版自传被删除一些敏感的内容，并表示了强烈的抗议😂。真是讽刺，这就是历害国所谓的 <code>四个自信</code> 。呵呵，自信就是删帖封号搞言论审查，呸。对于咱这种叛逆心极强的屁民来说这本书当然要读啦。</p><p>正如斯诺登在书中描述的那样美国政府确实存在大规模监控，但美国人民是有能力反抗政府的是这种严重侵犯人权的行为滴。电子前哨基金会就是一个这样的存在，细数一下美国历史上的有关网络审查的法案，绝大多数无法通过的原因就是，在美国是有像电子前哨基金会以及自由软件基金会这样的而非营利性组织来对抗来自政府和商业公司的监控和审查的。</p><blockquote><p>电子前哨基金会（EFF）告诉联邦上诉法院，必须追究思科公司帮助中国侵犯人权的责任。思科帮助中国建造了防火长城系统，EFF称，思科知道它在美国开发的技术会被专制政府用于侵犯人权，但仍然有意识的帮助中国建造了这套系统。思科只是越来越多的帮助专制政府更有效实施人权侵犯的美欧科技公司之一，EFF认为应该追究这些公司在迫害行为中的责任。<br>此处引用 <a href="https://www.solidot.org/story?sid=46859Yaf" target="_blank" rel="noopener">EFF称必须追究思科帮助中国的责任</a></p></blockquote><blockquote><p>美国麻省地区法院法官 Denise Casper 裁决，美国政府无理由搜查国际游客的手机和笔记本电脑违反了宪法第四修正案。此案由 ACLU 和 EFF 代表 10 名美国居民和 1 名合法永久居民起诉美国政府，他们在入境时被无理由搜查了手机和笔记本电脑。根据这一裁决，美国海关官员现在在搜查游客的设备前需要提供怀疑的正当理由，而游客在跨境时将不用担心政府没有理由就搜查设备上的敏感个人信息。不过美国政府可以对这一裁决提起上诉。<br>此处引用<a href="https://www.solidot.org/story?sid=62589" target="_blank" rel="noopener">法官裁决无理由搜查手机违宪</a></p></blockquote><p>在美国的确存在如斯诺登所描述的大规模监控，但和某些摸着石头过河的国家相比简直就是小巫见大巫。国内社交平台删帖封号早已经是家常便饭，甚至这种人们已经默许了这种删帖封号的行为，早已经在自己心里进行自我审查，无可奈何地适应了删帖封号。但在美国不同的是，人家是有力量反对这种大规模监控的。甚至不惜一切代价阻止政府试图通过某些限制互联网自由的法律。</p><p>在美国，人民是有能力反对这种侵犯人权的大规模监控的，而历害国呢？你在国内听到过反对人脸识别的声音吗？呵呵呵，还对人脸识别、人工智能、实名认证、网络封锁等乐此不疲，拍手称快呢。人家美国人民不仅知道反抗政府来监控和审查自己，而且也知道隐私保护，尊重人权这是一种普世价值，任何政府都无权监控和审查互联网。</p><blockquote><p>Aaron死了以后，Aaron朋友和合作者，哈佛大学法学院教授Laurence Lessig，回忆说，他当年和仅15岁的Aaron 有过一次谈话。Aaron问他：“您刚才讲到网络审查和管制的这些弊病，那您有没有什么实际的方案来解决这些问题呢？”Lessig有点尴尬地说：“没有。我是个学者，我只负责做研究，解决问题不关我的事儿。”Aaron接着问：“您是个学者，所以解决问题不关你的事儿。那，您作为一个公民，又该如何呢？”</p></blockquote><p>人家美国十六七岁的青少年都在思考网络审查和监管的弊病，而历害国呢？</p><h4 id="摘抄-17"><a href="#摘抄-17" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>唯有对于人民权利的尊重才能衡量一个国家的自由，而我相信这些权利实际上是国家权力的界线，明确界定一个政府到何种程度不得侵犯个人领域或个人自由，在美国革命时期所谓的“自由”，在网络革命时期所谓的“隐私”。</p></blockquote></li></ul><ul><li><blockquote><p>这些人当中，包括三亿二千万美国同胞，他们日常生活的一举一动都遭到监视，不仅严重违反美国宪法，更是违背自由社会的基本价值。在暗地里，政府掌握全民监视的权力，这种权威就定义上而言，对无辜者的伤害远大于对犯罪者的伤害。<br>在你产生反感、明白网际网络疯狂毒害我们这个时代之前，请谅解，对我来说，当我认识网际网络之时，那是很不一样的东西。网络既是朋友，也是父母，是一个无边界、无限制的社群，既是单一、也是无数的声音，一个已经有人垦殖但尚未遭到剥削的共同边境，各式各样的部落和睦相处，每个成员都能自由选择自己的姓名、历史和风俗习惯。每个人都戴着面具，然而这种多数匿名造就的文化所产生的事实多于造假，因为重点在于创造与合作，而不是商业与竞争。当然这之间也会有冲突，但善意与善念会胜过冲突——而这正是真正的先驱精神。</p></blockquote></li><li><blockquote><p>便利性的承诺让大家关掉自己的个人网站，因为那需要不断、辛苦的维护，改换成脸书网页和Gmail帐号。所有权的表象让人容易搞错现实。很少人在当下即明白，我们所分享的一切都将不再属于我们。以前电子商务公司因为找不到让我们有兴趣购买的东西以致倒闭，其后继者现在找到可以贩售的新产品了。</p></blockquote></li><li><blockquote><p>父亲坚称，从他的童年到我的童年之间，美国已遗忘这个原则。美国这个国家已变成买新机器取代故障机器比找专家修理来得便宜，而且一定比自己去找零组件设法修理来得便宜。单凭这项事实便几乎保证会出现科技暴政，助纣为虐的不是科技本身，而是每天使用却不了解的所有人。拒绝让自己了解你所依赖的设备运作与维修，即是被动接受暴政及其条件：当你的设备正常运作时，你也正常运作，但是当你的设备故障，你也会故障。你拥有的物品反过来拥有了你。</p></blockquote></li><li><blockquote><p>这台电脑时常陪伴着我，像是我第二个手足或是初恋情人。它在我发展独立自我人格的时刻走进我的生命，让我了解到网络世界无限广阔。这种探索的过程相当刺激，令我有一阵子忽略其他家人与家庭生活。换个说法，我当时正经历叛逆的青春期，只不过这是科技引起的青春期。这令我产生巨大的变化，而各地所有接触电脑的人也都有着同样经历。</p></blockquote></li><li><blockquote><p>随着千禧到来，网络世界变得越来越中心化、集中化，政府与商业力量加速介入这个原本应是对等式的网络（P2P）。但幸好网络有段时期是由人民所拥有、管理并为其服务的，而这段短暂而美好的日子恰巧与我的青少年岁月重叠。网络的目的应该是启发人心，而不是追求赚钱。它的规则应由大家约定俗成且随时更动，而非采取全球一致、剥削性十足的服务性协议。一直到今日，我都认为一九九○年代网络是我经历过最愉悦、最成功的无政府状态。</p></blockquote></li><li><blockquote><p>但在千禧年过后，网络科技变得非常不同：所有记忆必须忠实、身分维持一致，意识形态也得正确。</p></blockquote></li></ul><blockquote><p>所谓的“长大”代表的是你体会到：你的存在受制于成套的规范、仿真两可的规则以及毫无根据的常规。这些规定未经过你的同意便强加在你身上，而且随时随地都有可能改变，甚至在你违反规则时，你才意识到它们的存在。</p></blockquote><ul><li><blockquote><p>而这也代表着，我们最终必须得面对自己，纵容屠杀与漤用权力并非专属于美国行政机关与情报单位，而是存在于美国所有民众的心中，包括我个人在内。</p></blockquote></li></ul><blockquote><p>现在回过头来看，我的国家当时可以利用这个机会做出更多的改变。美国可以不要宣称恐怖主义是特定信仰，而是犯罪本身。美国可以利用这个难得时刻巩固强化民主价值、培养抵抗挫折的韧性，同时凝聚各国人民的向心力。 但美国当时却选择开战。</p></blockquote><ul><li><blockquote><p>不过删除贴文的可能后果让我心烦意乱，那么做只会徒然强化网络生活一些最腐蚀人心的训诫：没人有犯错空间、凡是犯错者得一辈子为自己的错误负责。我在意的倒不是文字记录是否完美无缺，而是灵魂的完整性。我不想活在一个人人必须假装完美的世界，那样的世界没有我和朋友的容身之处。抹掉在网上的评论，等于抹煞我是谁、我从哪里来、我走了多远。否定年少时候的我，等于否定现在的我的合法性。</p></blockquote></li><li><blockquote><p>既然抹不掉网络上那些令我们丢脸羞愧的言行，我们能做的只有控制自己的反应，看是要为了这些过去自我折磨，还是接受过去带给我们教训，然后成长、前进。 那是我在赋闲蛰伏时期想到的第一件事，你或许称之为原则，尽管执行不易，我仍努力靠它过活。</p></blockquote></li><li><blockquote><p>我成长过程中被灌输的价值，我在网络世界邂逅的理想，全都捣碎在一起成了我现在的思想。我直到即将迈入三十岁之际才终于明白，我所信仰的，我以为自己深信不疑的，大多是年轻时候的印记。</p></blockquote></li></ul><blockquote><p>有一段时间，特别是在我准备入伍阶段，我的世界观就像天真的电玩游戏那样二元对立，电玩世界中善与恶泾渭分明，而且不容怀疑。</p></blockquote><ul><li><blockquote><p>求学的时候，我必须背出美国宪法前言，这虽然还留存在我的记忆中，但现在多了网络自由先驱约翰．佩里．巴洛（John Perry Barlow）的《网络空间独立宣言》（A Declaration of the Independence of Cyberspace），同样也用了不言而喻且自我选定的复数名词：“我们要打造人人都能进入的世界，摒除因种族、经济实力、军事力量、家庭背景产生的特权与偏见。我们打造的这个世界，无论何人在何地都能表达自己的信念，即便是多么特立独行，不用担心会被迫噤声或强迫当顺民。”</p></blockquote></li><li><blockquote><p>凭借Tor的通讯协定，网络流量从一个服务器到另一个服务器创造的路径随机反弹，目的在于取代使用者的身分。实际上没有任何一台服务器能辨识网络流量的来源信息。在天才的眼中，其中有一台服务器知道来源，那是整个服务器链的第一台，但却不知道网络流量去处。更简单来说，第一台链接到Tor网络的服务器称为闸道，知道你是传送要求的人，但因为它无法读取要求，因此对你寻求的信息一无所知。最后一台服务器称为出口，知道你所寻找的内容，却不知道你的身分。 这种分层方式为洋葱路由，因此Tor被称为洋葱路由器。</p><p>就我个人而言，Tor改变我的生命，给我免于被监测的自由，带我回到童年时期的自由。</p></blockquote></li><li><blockquote><p>在这本书出版时，该局能储存情资的时间或许已达数十年。国安局的逻辑是，收集来的情资一定得储存起来，日后才能方便运用。但没人能预测这些情资何时能派上用场。这样的观念助长国安局的终极目标，那就是将收集、制造的情资永远储存下来，创造出一个完美的记忆库、一份永久的纪录档案。</p></blockquote></li><li><blockquote><p>当我读着关于中国的机密资料时，我看到的是美国的倒影。换句话说，中国光明正大对人民做的监控行径，美国可能背地里也对其他国家这么做。</p></blockquote></li><li><blockquote><p>小布什总统在九一一事故后授权国安局展开无数监控，其中最具争议的是“总统监控计划”</p><p>PSP让国安局得以收集美国与境外的电话、网络通讯情资。最引人注意的是，PSP允许国安局不必取得外国情报监控法院（FISC）搜查令便能实施监控。FISC是成立于一九七八年的秘密联邦法院，负责审查情报单位提出的监控要求，借此防范反越南战争与民权运动期间非法监听情事再度上演。</p><p>《纽约时报》披露此消息后引起广大回响，加上美国公民自由联盟（ACLU）在公开法庭质疑PSP违反宪法，小布什政府于是宣称该计划将于二○○七年终止。</p></blockquote></li><li><blockquote><p>如果这些先进愿意赌上自己的工作、家庭与生命，那这背后必定存在比非法监听更严重的状况。</p></blockquote></li><li><blockquote><p>我们的法律通常落后科技至少一个世代，但如今对于通讯内容的保障却高于后设数据，这真是极大的讽刺。事实上，情报单位对于取得后设数据有着更高兴趣，因为这些活动记录能让他们见树又见林，一方面赋予他们分析大量数据的能力、得以拼凑出事物全貌，另一方面又给予他们窥探个人私生活的机会、得以推断这些人的行为模式。简言之，监视者透过后设数据能得知你的所有一切，除了你的大脑在想什么之外。</p></blockquote></li><li><blockquote><p>科技全然不受限制，不像医生必须遵守希波克拉布底誓词。自工业革命以来，学术界、业界、军方与政府的科技人才做出许多决定，这些决定立基于“我们能够做什么”，而非“我们应该做什么”。推动科技进步的人，不太会限制它的应用与使用。</p></blockquote></li><li><blockquote><p>回顾这段历史，不仅令我们更加确信美国情报体系在科技上头的主导优势，更让我们担忧这些技术对于民主统治带来的巨大威胁。距离那时普查已经过一世纪的时间，科技出现惊人进展，但人类的警觉或法律规范却仍远远落后。</p><p>待在日本的这段时间令我恍然大悟。在那时，我真正了解到这些新科技可能造成的危害。若我们这个世代不介入的话，那未来的情况只会更严重。我并不希望看到，当我们终于决定挺身而出时，一切抵抗却是徒劳无功，若真是如此的话，那将是一大悲剧。未来的一代可能得面对充满监控的环境，政府违法监控行为并非偶一为之、针对特定危险目标，而是持续性、无差别地扩及全国民众。这就像是：你说的话逃不过政府耳朵，你做的事逃不过政府法眼，而你的纪录档案永远留存在政府手里。 一旦政府拥有四处收集情报的能力，加上情资得以永久储存的系统，那他们便能随便找个人或团体陷害，反正资料库一定搜寻得到证据（如同我寻找机密档案一样），绝对能替他们安上合适罪名。</p><p>对我来说，政府漤用监控特权，代表的是一个可怕的未来。所有人都遭到完全监控的世界，将变成一个全由电脑自动执法的世界。毕竟，若一个AI装置能够追踪民众违法行径，怎可能让他逃过法律制裁。即使技术上可行，我们也不可能设定一个纵容犯罪的监控程序。</p></blockquote></li><li><blockquote><p>美国基本法的存在，令执法单位更难执行工作。这并不是瑕疵，而是民主的真谛。按照美国法律规定，执法单位理应保护所有国民。当执法单位漤权时，法院应约束并纠正他们的行为，毕竟他们是社会上唯一能够羁押、逮捕民众并使用武力（包括致命武器）的人。而其中最重要的约束是，执法单位不得监控国民在家活动，也不能在未取得搜查令的情况下收集个资。但法律对于公众场所的监控行为宽松许多，其中当然也包含多数人在街头与人行道的活动。</p></blockquote></li><li><blockquote><p>过去十年来，我们看到美国制造一系列的悲剧：阿富汗战争永无止尽、伊拉克政权不断更迭、关押恐怖分子的关塔那摩湾监狱人满为患，美国政府非常规引渡、拷问并发动无人机袭击杀害平民（包括美国民众在内）。而在美国境内，国土安全部严格审查一切事物，每日发布恐攻威胁层级（红色代表严重、橙色高度警戒、黄色则是威胁升高），而自《美国爱国者法案》实施后，公民自由逐渐遭到侵害，讽刺的是，这是我们过去自称誓死捍卫的权利。这些加总的伤害（掌权者违法乱纪）无比巨大且难以逆转，但我们却还在按喇叭、闪车灯举国欢腾庆祝。</p><p>但其实恐惧才是真正的恐怖主义，而乐于编造借口授权使用武力的政治体制则是最大帮凶。比起恐怖主义，美国政客更害怕示弱、背叛自己的政党，或是惹火捐款给他们的支持者（这些人对于承揽政府合约、取得中东石油利益充满兴趣）。因恐惧衍生的政治凌驾于恐惧之上，催生出各种“反恐”作为：无人能敌的美国慌了手脚，行动不受政策规范、公然违反法治精神。在九一一事件后，情报单位的指令向来是“绝不能再出差错”，但这根本是做不到的。过了十年后，我看得更加清楚了。这群政治菁英阶级反复以恐惧作为号召，对应的并非是任何特定威胁或担忧，而是试图操弄情感、将恐惧化为永久性危险，借此合理化政府长久提高警觉的作为、不容民众质疑正当性。</p></blockquote></li><li><blockquote><p>在真正富有正义的社会里，人民才是政府的头家。虽然不同城市的民众各有特定动机与目标，但这群人的共同点在于，他们都拒绝独裁主义、重申“人权与生俱来、不可剥夺”的人道原则。 在独裁的国家，国家拥有权利授与给人民。而在自由国家，人民拥有权利授与给国家。在前者，由于政府的允许，身为国民（subject）的人民才能拥有财产、受教、工作、宗教以及言论的权利。而在后者，人民拥有公民（citizen）身分，同意在一定时间内接受统治，但能定期透过选举等制度更换政府。我认为，独裁统治与自由民主间的差异，才是我们这个时代最主要的意识形态冲突来源，而不是东方与西方间的分歧（这是人为捏造并且充满偏见），或是基督教对决伊斯兰的宗教冲突。</p><p>独裁国家通常都不是法治政府，而是以统治者意见为主。统治者要求国民服从政府，同时对异议分子极具敌意。相反的，自由民主国家不会或很少做出这样的要求，反而是仰赖每位公民自愿担负起保护周遭所有人自由的责任，这是不分种族、肤色、信仰、能力、性倾向或性别的。任何集体保障并非取决于血统而是共识，最终导向平等主义的结果。虽然现实的民主经常无法达到理想状态，但我仍坚信，这是最能“让不同背景的人共同生活、在法律之前人人平等”的统治形式之一。 这种平等不仅由权利组成，更包含自由在内。事实上，民主国家的公民所珍惜的许多权利，在法律上都是以限制的方式来保障。透过限制政府权力创造出来的自由空间，使得这些权利得以存在。举例来说，美国民众之所以拥有言论“自由”，这是因为禁止政府不得制定限制该自由的法律；而新闻“自由”则是禁止政府不得制定法律限缩该自由。同样的，宗教“自由”是禁止政府不得制定确立国教的法律；而和平集会与抗议的“自由”，是禁止政府不得制定任何</p></blockquote></li><li><blockquote><p>说到底，你声称自己不在乎隐私，因为没有事情好隐瞒，这就像是在说，你不在乎言论自由，因为你没有意见。或是，你不在乎新闻自由，因为你不爱阅读。你不在乎宗教自由，因为你不相信神。或是，你不在乎和平集会自由，因为反社会的你天性懒散、害怕人群。以上种种自由，今日对你来说也许不重要，但这不代表明日对你不重要，或对你的邻居不重要，或是对于世界另一端的异议分子不重要。我用手机追踪这群抗议群众的动态，他们希望争取到一点点的自由，而我的国家却对于这些自由必欲除之而后快。</p></blockquote></li><li><blockquote><p>我们不能放任自己受到这样的利用，被利用来对抗未来。我们不能允许自己的资料被用来向我们推销绝对不可以出卖的东西，例如新闻。如果袖手不管，所看到的新闻将只是我们想要的新闻，或是当权者希望全民看到的新闻，而不是必要的坦白共同对话。不能放任我们所受到的全面监控，以之来“计算”我们的公民分数，或是“预测”我们的犯罪行为；我们会受什么教育，会找到什么工作，或是能否受教育或找工作；依据金融、法律和医疗纪录来歧视我们，更别说还有族群或种族，这些都是我们的资料的构成因素。至于个人最私密的资料，我们的基因信息：如果坐视这种信息被用来辨识我们，那么它也会被用来加害我们，甚至修改我们，按照试图控制全民的科技概念，重新塑造我们的人性本质。 当然，以上种种全部都已经发生了。</p></blockquote></li></ul><h3 id="28-《沃兹传：与苹果一起疯狂》"><a href="#28-《沃兹传：与苹果一起疯狂》" class="headerlink" title="28.《沃兹传：与苹果一起疯狂》"></a>28.《沃兹传：与苹果一起疯狂》</h3><h4 id="作者-21"><a href="#作者-21" class="headerlink" title="作者"></a>作者</h4><ul><li>[美] 史蒂夫•沃兹尼亚克（Steve Wozniak）</li><li>[美] 吉娜•史密斯(Gina Smith)</li></ul><h4 id="简介-20"><a href="#简介-20" class="headerlink" title="简介"></a>简介</h4><p>怎么说呢。我觉着我读的每一本书都与我有着千丝万缕的联系。这本书是我上大二的时候读的，那时候只知道苹果的创始人是乔布斯，而不知道另一位沃兹。那时候的确读了很多人的传记，像 Linus 的《只是为了好玩儿》、RMS 的《若为自由故》、互联网之子、 埃里克·斯蒂芬·雷蒙 、奔腾的代码、操作系统革命等。后来听了软件那些事儿上讲的 <a href="https://liuyandong.com/2018/01/20/136/" target="_blank" rel="noopener">苹果双核之史蒂夫•沃兹</a>  又对沃兹有了进一步的熟悉和了解。</p><h4 id="读后感-15"><a href="#读后感-15" class="headerlink" title="读后感"></a>读后感</h4><p>沃兹能取得这么大的成就和他小时候的而家庭教育密不可分。尤其是沃兹父亲工程师的品格深深影响到了沃兹的成长。一个从小就和电子打交道的男孩。</p><p>这本书里搜索 <code>电子</code> 二字的结果竟然有 179 个，可想而知沃兹成长过程中与电子世界是密不可分的。</p><p><img src="../img/image-20191126154018148.png" alt="电子"></p><p>十分建议家长们读一下这本书。应该向沃兹的父亲那样在生活的点点滴滴培养孩子的兴趣。使得小孩从小就知道自己未来要做一个什么样的人，并对这份职业保佑崇高的敬仰。不要再将我们这代人的悲剧发生在下一代人身上，以至于直到上大学选专业都不知道自己要做什么。还有一点就是从现实中给孩子找到乐趣，而不是为了哄孩子就让他们耍手机。</p><p>另外值得一提的是沃兹还是电子前哨基金会的创始人之一</p><blockquote><p>电子前线基金会，由卡普尔、<a href="https://zh.wikipedia.org/w/index.php?title=约翰·吉尔摩&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">约翰·吉尔摩</a>和巴洛，正式成立于1990年7月10日。初始资金由卡普尔，<a href="https://zh.wikipedia.org/wiki/斯蒂夫·沃兹尼亚克" target="_blank" rel="noopener">斯蒂夫·沃兹尼亚克</a>和一个匿名人士提供</p><p>此处引用<a href="[https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E5%89%8D%E5%93%A8%E5%9F%BA%E9%87%91%E4%BC%9A](https://zh.wikipedia.org/wiki/电子前哨基金会">电子前哨基金会维基百科</a> )</p></blockquote><p>看完这本书想到沃兹是其中之一的创始人一点都不感到意外了，关于电子前哨基金会的事迹，以后我会多写点内容。</p><h4 id="摘抄-18"><a href="#摘抄-18" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>我写这些，是想表明我爸爸对诚信特别重视。他把最高的诚信和道德水平作为人生信仰。这是他教给我的最重要的东西，他总是告诉我，在法庭宣誓后撒谎掩饰罪行比杀人放火这样的恶行更为罪恶。这对我影响深远，直到今天，我也从不撒谎。即使是再小的事情我也绝不撒谎，除非你算上恶作剧。但我认为恶作剧并不算谎言，它们是娱乐、是搞笑，尽管两者的区别有时稍显微妙，但仍有质的区别。</p></blockquote></li><li><blockquote><p>爸爸还是我电子学的启蒙老师。噢，我能在日后的工程师生涯中取得如此多的成就，与他的耐心教导是分不开的。从我很小的时候开始——甚至在我四岁前，爸爸就把我领入了电子学的世界，向我描述、解释与电子有关的种种事情。</p></blockquote></li><li><blockquote><p>我们的世界并不是一个非黑即白的世界，这个世界是灰度的。作为一个发明家，你必需要用灰度的眼光来看世界。你必须思想开放，千万不要随大流。事实上，你应该忘记那些所谓的“公认准则”。你应该始终保持绝对客观，忘记你所听到的各种观点和声音，像科学家一样考察事实。当你探索时，不要太早有所偏向，不要太早下结论，否则你就会变得偏激，客观的探索也会因为寻找各种证明自己观点的证据而变味。谁想要花时间证明一个错误的观点？沉浸在自我膨胀中毫无意义也毫无价值。你并不需要为证明自己的观点找一个借口。</p></blockquote></li><li><blockquote><p>当时的我还太小，无从决定自己以后是不是要当一名工程师。想当工程师的念头是在几年后才萌发的。在还没接触科幻世界和发明家的故事之前，小小的我就被带入了爸爸的技术世界，已经模模糊糊地感受到了技术的重要性和魅力。这算是我后来职业选择的最初渊源吧。</p></blockquote></li><li><blockquote><p>爸爸教给我许多重要的东西，我最想跟你分享的是在我看来他教给我的最重要的一课——他训练我如何做一名工程师。这对我的一生影响深远，甚至比爸爸的诚信观对我的影响还深。这里说的“工程师”指的是真正的工程师，或者说是工程师中的工程师。我清楚地记得爸爸坚定地告诉我，工程师是世界上最高尚、最重要的职业，作为一名工程师，你可以用自己的智慧创造出新的仪器，让人们活得更幸福，让世界变得更美好。他告诉我，工程师的工作能改变世界，能改变许多人的生活。</p></blockquote></li></ul><h3 id="29-《公正：该如何做是好-》"><a href="#29-《公正：该如何做是好-》" class="headerlink" title="29. 《公正：该如何做是好?》"></a>29. 《公正：该如何做是好?》</h3><h4 id="作者-22"><a href="#作者-22" class="headerlink" title="作者"></a>作者</h4><p>[美]迈克尔·桑德尔</p><h4 id="简介-21"><a href="#简介-21" class="headerlink" title="简介"></a>简介</h4><p>大二的时候看过公开课，而这本书正是这门公开课所讲述的内容</p><h4 id="读后感-16"><a href="#读后感-16" class="headerlink" title="读后感"></a>读后感</h4><h4 id="摘抄-19"><a href="#摘抄-19" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>那些维护和反对价格欺诈的论证，都围绕着三种观念展开：使福利最大化、尊重自由和促进德性。其中的每一种观念都引向了一种不同的思考公正的方式。<br>维护自由市场的基本理由基于两种主张—一种有关福利，另一种有关自由。</p></blockquote></li><li><blockquote><p>要看一个社会是否公正，就要看它如何分配我们所看重的物品—收入与财富、义务与权利、权力与机会、公共职务与荣誉等等。一个公正的社会以正当的方式分配这些物品，它给予每个人以应得的东西。</p></blockquote></li><li><blockquote><p>在当代政治语境中，公正意味着尊重自由和个体权利这一观念与功利主义使幸福最大化的观念，至少同样为人们所熟知。</p></blockquote></li><li><blockquote><p>那么，我们怎么能够通过这些相互对立的关于公正和不公正、平等和不平等、个人权利和共同利益的争论，进行独立的思考呢？本书将试图解答这一问题。</p></blockquote></li><li><blockquote><p>边沁是英国道德哲学家和法律改革者，创立了功利主义学说。其主要观点很简单，并对人具有直觉上的吸引力：道德的最高原则就是使幸福最大化，使快乐总体上超过痛苦。对边沁而言，正当的行为就是任何使功利最大化的行为。他所说的“功利”，意指任何能够产生快乐或幸福，并阻止痛苦或苦难的东西。</p></blockquote></li><li><blockquote><p>功利主义声称能够提供一种基于衡量、合并和计算幸福的道德科学。它不加评判地衡量各种偏好，每个人的偏好都同等重要。这种不加评判的精神是其吸引力的一个主要源泉；同时，它许诺要将道德选择变成一门科学，这也影响了很多当代经济学的理论。然而，为了使各种偏好能够相加，我们有必要用同一个尺度来衡量它们。边沁的功利思想便提供了这样一种通用价值货币。</p></blockquote></li><li><blockquote><p>为什么我们应当假设维护个人的自由和表达异议的权利会从长远上促进社会福利呢？密尔提出了几种理由：反对性的意见可能是正确的，或部分正确，因而能给正统的观点提供纠正。即使它不正确，那么使正统的观点接受一些观念的有力挑战，将会防止它变成硬性的教条和偏见。最后，一个强迫其成员接受习俗和传统的社会很可能会陷入一种荒谬的一致性，从而剥夺了自身促进社会进步的能量和活力。</p></blockquote></li><li><blockquote><p>从长远来看，尊重个体自由会导向最大的人类幸福。允许大多数人使持异议者保持沉默或抑制自由思考者，可能会使目前的功利最大化，可是从长远来看，这会使社会变得更坏—更加缺乏快乐。</p></blockquote></li><li><blockquote><p>我们已经考察了两种对边沁“最大幸福”原则的反驳—一种认为它没有给予人类尊严和个体权利足够的重视，另一种认为它错误地将一切具有道德重要性的事物都用单一的快乐与痛苦的尺度衡量。</p></blockquote></li><li><blockquote><p>在本书的引言中，我区分了三种公正进路。那种功利主义的进路认为，界定公正和判断何谓正当之事的方法就在于询问什么将会使福利或社会总体幸福最大化。第二种进路将公正与自由联系起来，自由至上主义者为这一进路提供了例证。他们认为，关于收入和财富的正当分配就是任何一个在不受约束的市场中自由交换商品和服务所产生的分配。他们坚持认为，调节市场是不公正的，因为这侵犯了个体的选择自由。第三种进路认为，公正就是给予人们在道德上所应得的—以分配物品来奖励和促进德性。</p></blockquote></li><li><blockquote><p>康德反对第一种进路（使福利最大化）和第三种进路（促进德性）。他认为，这两种进路都没有尊重人类自由。因此，康德是第二种进路—将公正与道德同自由联系起来—的强有力的倡导者。然而，他所提出的自由观念要求更为苛刻—比我们在市场上买卖东西时所行使的选择自由要更加苛刻。康德认为，我们日常所认为的市场自由或消费自由并不是真正的自由，因为它仅仅满足我们事先并没有选择的各种欲望。</p></blockquote></li><li><blockquote><p>康德的推理如下：当我们像动物一样追求快乐或避免痛苦时，我们并不是真正自由地行动，而是作为欲望和渴求的奴隶而行动。为什么呢？因为无论何时，只要我们是在追求欲望的满足，那么我们所做的任何事情，都是为了某种外在于我们的目的。我以这种方式来充饥，以那种方式来解渴。根据康德的思想，自由地行动就是自律地行动，自律地行动就是根据我给自己所立的法则而行动—而不是听从于本性或社会传统的指令。当我们评价一个行为的道德价值时，我们要评价产生这一行为的动机，而不是它产生的后果。</p></blockquote></li><li><blockquote><p>由于人们“在幸福的经验性目的及其构成上，有着不同的观点”，因此，功利不能作为公正和权利的基础。为什么呢？因为如果将权利建立在功利的基础之上，那么，就会要求这个社会来肯定或接受某一种幸福观而不接受另外一些；将整个宪法都建立在一种特定的幸福观（如大多数人的幸福观）之上，就会给其他人强加一些价值观，这就没有尊重每个人追求他自己目的的权利。“没有人能够强迫我的幸福必须与他那种关于他人福利的观念相一致，”康德写道，“因为每个人都能够以他自己认为合适的方式去追求幸福，只要他不侵犯他人也这样做的自由。”</p></blockquote></li></ul><h3 id="30-技术垄断-文化向技术投降"><a href="#30-技术垄断-文化向技术投降" class="headerlink" title="30. 技术垄断: 文化向技术投降"></a>30. 技术垄断: 文化向技术投降</h3><h4 id="作者-23"><a href="#作者-23" class="headerlink" title="作者"></a>作者</h4><ul><li>[美国]尼尔·波兹曼</li></ul><h4 id="简介-22"><a href="#简介-22" class="headerlink" title="简介"></a>简介</h4><blockquote><p>技术垄断:文化向技术投降》认为，人类技术的发展可分为三个阶段：工具使用、技术统治和技术垄断三个阶段；人类文化大约也分为相应的三种类型：工具使用文化、技术统治文化和技术垄断文化。和其他学者一样，波斯曼认为，技术和人的关系是亦敌亦友的关系，但他死死地盯着技术的阴暗面，以免技术对文化造成伤害。他认为：在工具使用文化阶段，技术服务、从属于社会和文化；在技术统治文化阶段，技术向文化发起攻击，并试图取而代之，但难以撼动文化；在技术垄断文化阶段，技术使信息泛滥成灾，使传统世界观消失得无影无形，技术垄断就是集权主义的技术统治。《技术垄断》认为，“信息革命”经历了印刷术、电报、摄影术、广播和电脑等五个阶段。在技术垄断到来之前，信息控制机制帮助人驾驭技术，这些机制有：法庭、学校、家庭、政党、国家和宗教。到了技术垄断阶段，抵御信息泛滥的多重堤坝和闸口土崩瓦解，世界就难以驾驭、难以把握了。《技术垄断》揭示技术垄断阶段各种“软”技术的欺骗作用，挞伐所谓的社会“科学”，谴责唯科学主义，它辨析自然科学、社会“科学”和文学的异同，它为传统符号的耗竭扼腕痛惜，它号召人们以强烈的道德关怀和博爱之心去拼死抵抗技术垄断，并坚决反对文化向技术投降。</p></blockquote><p>这本书和《娱乐至死》、《童年的消逝》三本并成为媒介批评三部曲，总之值得读一下，尤其是那些手机控、刷抖音短视频的人😂，虽然这几本书写于上世界八十年代之前，但尼尔·波兹曼老人家早就预言了信息流轰炸带来的种种弊病，以及技术垄断控制文化等问题。不过书中有些观点我是不赞同的，因为我是技术出身，毕竟是要靠技术吃饭的。</p><h4 id="摘抄-20"><a href="#摘抄-20" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>1982年，波斯曼在《童年的消逝》里抨击电视文化，捍卫印刷文化，叹息电视文化抹杀成人和儿童的界限。于是人们说，他是悲观主义者。 1985年，他在《娱乐至死》里控诉电视对读写能力的戕害，映射电视掏空了人的头脑和心灵。人们似乎更有理由说，他是悲观主义者。 1992年，他在《技术垄断：文化向技术投降》里高呼“狼来了”，揭示唯科学主义和信息失控的现实危险，指控技术垄断对美国文化和人类文化的危害。你能说他主张“技术决定论”吗？</p></blockquote></li><li><blockquote><p>在这里，波斯曼提出4条人文主义原则，用以指导媒介研究和传播研究：（1）媒介在多大程度上对理性思维的发展做出了贡献？（2）媒介在多大程度上对民主进程的发展做出了贡献？（3）新媒介在多大程度上使人能够获取更多有意义的信息？（4）新媒介在多大程度上提高或有损我们的道德感、我们向善的能力？</p></blockquote></li><li><blockquote><p>他提醒我们注意科学技术进步的副作用： 倘若铁路没有克服空间距离，我的孩子就不会离开故乡，我就不需要打电话听他说话；倘若跨洋旅行的技术没有开发，我的朋友就不会坐海船旅行，我就不需要打电报来舒缓对他是否平安的担心。婴儿死亡率的降低给我们的生儿育女强加了诸多限制，以至于在考虑各种因素的情况下，我们生育的孩子并不比讲究卫生之前多。与此同时，这又给我们婚后的性生活造成诸多困难……最后要问，倘若生活困难，罕有欢乐；倘若生活充满苦难，以至于我们只能够把死亡当作解脱来欢迎，那么，长寿对我们又有什么好处呢？</p></blockquote></li><li><blockquote><p>控制技术运行机制的人积累权力，必然要密谋防备那些无法获取专门技术知识的人。在《传播的偏向》里，伊尼斯提供了许多历史事例，说明新技术如何摧毁传统的知识垄断，造成一种新的知识垄断，即由另一群人来把持的知识垄断。换句话说，一种新技术的利弊长短不会势均力敌。仿佛是游戏，有输家也有赢家。在许多情况下，输家出于无知为赢家欢呼雀跃，现在的情况依然如此；这实在是令人困惑，让人心酸。</p></blockquote></li><li><blockquote><p>他们的隐私更容易被强大的机构盗取。他们更容易被人追踪搜寻、被人控制，更容易受到更多的审查，他们对有关自己的决策日益感到困惑不解；他们常常沦为被人操弄的数字客体。他们在泛滥成灾的垃圾邮件里苦苦挣扎。他们容易成为广告商和政治组织猎取的对象。技术赋予谁更大的权力、更多的自由？谁的力量和自由又会被削弱？</p></blockquote></li><li><blockquote><p>每一种工具里都嵌入了意识形态偏向，也就是它用一种方式而不是用另一种方式构建世界的倾向，或者说它给一种事物赋予更高价值的倾向；也就是放大一种感官、技能或能力，使之超过其他感官、技能或能力的倾向。</p></blockquote></li><li><blockquote><p>学龄儿童已经习惯了电视的偏向，上学以后他们遭遇的却是印刷词语的世界。一种心理战随之发生，造成惨重的伤亡；不能或不愿学习读书写字的儿童，在简单的段落里都不会以逻辑结构组织思想的儿童，不能静下来听老师讲解的儿童，就是这场战争的受害者。这些儿童之所以打败仗，并不是因为他们愚笨，而是因为他们背后正在进行的媒介之战，是因为他们站到了错误的一方，至少是暂时站错了队。</p></blockquote></li><li><blockquote><p>具有讽刺意味的是，培根本人并不是科学家，至少不太像科学家。他并没有在任何一个研究领域做过任何拓荒的工作。他并未揭示任何新的自然定律，也没有提出一个新鲜的假设。他甚至对当时的科学研究并不通晓。他自认为开创了科学方法的革命性进步，并为此而感到自豪。但后人并不容许他享受这个美名。实际上，他最著名的科学实验之所以引起我们的注意，那是因为这一次实验要了他的命。在一个风雪天，他与好友威瑟尔博恩（Witherborne）博士乘马车出游，看见地上的积雪时，他就自问：冻雪能否像食盐那样保存鲜肉呢？两人决定立即实验。他们买了一只鸡，掏空内脏，把雪塞进去。可怜的培根未能等到实验的结果，因为他当即受冻病倒，很可能患了气管炎，三天以后就不幸去世。有的时候，他因此而被认为是实验科学的殉道者。😂</p></blockquote></li><li><blockquote><p>技术统治文化解决了信息稀缺的问题，信息稀缺的不利因素是显而易见的。但是，对信息泛滥的危险，它却不给人警示，因为信息泛滥的弊端并不是那么明显。信息泛滥的长远结果就是信息混乱，由此产生的文化仿佛是打乱了顺序的一副牌。奇怪的是，很少人注意到自己苦恼的根源，或者说即使注意到了，他们也不承认。</p></blockquote></li><li><blockquote><p>事实上，政治问题、社会问题尤其个人问题，很少是由信息不足引起的。然而，随着难以理解的问题增加，随着进步观念的淡出，由于意义本身成为令人生疑的对象，技术垄断论者坚定不移地相信，世界需要的是更多的信息.</p></blockquote></li><li><blockquote><p>一切现代事物的许多特征都可以追溯到千百年之前，同理，信息充斥的源头也可以回溯千百年。有人说计算机技术开创了信息时代，在误导人的言论中，莫此为甚。早在16世纪初，印刷机就开创了信息时代。</p></blockquote></li><li><blockquote><p>第一修正案的措辞设定并坚持公众的权利：公众不仅要获取信息，而且要控制信息，人民要知道如何用信息为自己谋福利。这并不是说，“建国之父”们认为，信息不可能作假、误导或离题。但是他们相信，信息和思想的市场井井有条，公民足以弄懂耳闻目睹的东西。足以用理性评判信息和思想对他们生活的用处。</p></blockquote></li><li><blockquote><p>信息已经成为一种垃圾，它不能回答人类面对的大多数根本问题；对平常的问题，信息也只能勉强提供解答的方向。再换一种方式说，在技术垄断盛行的环境里，信息和人的意旨之间的纽带已经被切断了；也就是说，信息杂乱无章地出现，并不指向具体的人，数量难测，速度惊人，但从理论、意义或宗旨上看却是断裂分割的。</p></blockquote></li><li><blockquote><p>我们的目的不是减少愚昧、迷信和苦难，而是让我们自己去适应新技术的需要。当然，我们对自己说，这样的调适能够改善生活；然而那仅仅是正在消亡之中的技术统治文化的逻辑残存。我们的文化正在用信息自我消耗，而且许多人还不知道如何驾驭这个过程。我们的假设是，信息是我们的朋友，如果信息不足，文化受到的损害可能会令人扼腕，这个假设当然有一定的道理。另一方面，如果信息过剩，信息无意义，信息失去控制机制，文化也可能会吃尽苦头；可惜人们才刚刚开始明白这个道理。</p></blockquote></li><li><blockquote><p>随着信息供应量的增加，信息控制机制就受到很大的压力。为了对付新的信息，就需要增补控制机制。但新的控制机制本身就是技术，它们又反过来增加信息的供应量。当信息的供应量无法控制时，个人的心宁神静和社会生活的宗旨就必然会普遍崩溃而失去防卫。防线崩溃之后，人们就无法寻觅经验中的意义，就失去记忆力，就难以想象合理的未来了。</p></blockquote></li><li><blockquote><p>可以肯定，技术对医疗实践的控制，很少有医生会感到满意。许许多多的患者因为技术对医疗的控制而受到严重的伤害。由此我们可以得出什么结论呢？第一，技术在医疗实践中并不是中性的因素：医生不仅使用技术，而且被技术利用。第二，技术产生对人的强制性要求，同时还产生广泛的社会系统来贯彻其强制性要求。第三，技术重新界定医生的身份，使医生的注意力重新定向，对医生看待病人和疾病的观点进行重构。</p></blockquote></li><li><blockquote><p>民意测验是统计学用于误测的另一种方式。正如统计学产生了一个庞大的测试产业一样，民意测验为“公共舆论”造就了庞大的产业。你也许一开始就承认，这样的调查可以说是可靠的，尤其是在问题非常受限的条件下，调查的方法可能是可靠的。比如，你准备投票选X还是Y？但说一种方法可靠并不等于判断它有用。对投票倾向的了解究竟使选举过程丰富多彩了还是意义降格了？这个问题尚待解决。然而，当民意调查被用来指引公共政策时，我们就遇到了一个截然不同的问题。</p></blockquote></li><li><blockquote><p>想法。“意见”不是特定时刻呈现出来的一个事物，而是一个思考的过程，由不断获取知识以及考问、讨论和辩论形成的思维过程。一个问题可能“招引”（invite）一种想法，但也能修正并重构这个“意见”；我们最好说，人们并不是真正“抱有”（have）什么想法，而是处在“形成想法的过程中”（involved in opinioning）。把“意见”当作可以测量的事物就歪曲了这个过程；实际上，人们参与形成舆论的过程；如何参与这个过程就深入到民主社会意义的核心了。民意调查并没有向我们提供这个过程的任何信息，相反，它往往掩盖了这个过程，使我们看不见这个过程。</p></blockquote></li><li><blockquote><p>我们掌握的事实可能就有助于认清其中的因果关系，并进而行动起来解决问题。不过，像一切技术一样，统计数字往往会失去控制，在我们的头脑里占据过多的位置，侵犯我们的话语，造成语言的浩劫。统计数字失控时，我们需要知道的东西就被埋葬在鸡毛蒜皮的信息堆里了。</p></blockquote></li><li><blockquote><p>美国过去和将来始终在进行不断的试验，世人正以惊异的目光注视着美国。有三场试验特别重要。第一场试验发生在18世纪末，时人提出的问题是：如果一个国家允许最大限度的政治自由和宗教自由，它还能够维持相同的认同感和宗旨吗？第二场伟大的试验发生在19世纪中叶，那时的问题是：如果一个国家允许世界各地的移民进入，它还能够保持整合一体和全国一家的感觉吗？目前正在进行的第三场试验是技术垄断的试验，现在的问题是：如果一个国家完全屈从于技术思想世界（technological thought-world）至高无上的地位，它还能够保存自己的历史、原创精神和人文情怀吗？</p></blockquote></li><li><blockquote><p>抵抗美国技术垄断的斗士应该： （1）除非知道民意测验里设计的是什么问题并为何这样问，否则就不理睬民意测验； （2）不接受效率是人际关系最优先目标的思想； （3）摆脱对数字魔力的迷信，不把计算当作替代评判的充足根据，也不把精确的计算和真理画等号； （4）不让心理学或任何“社会科学”占据优先的地位，不让它们排挤常识里的语言和思想； （5）至少对所谓“进步”观念抱怀疑态度，不把信息和理解混为一谈； （6）不认为老年人无关紧要； （7）认真对待家庭忠诚和荣誉的意义，准备伸手去接触人时，期待他人也有同样的需要； （8）认真对待宗教的宏大叙事，不相信科学是产生真理的唯一体系； （9）理解神圣和世俗的差别，不会为了追求现代性而漠视传统； （10）钦慕技术独创，但不认为技术代表了人类成就的最高形式。</p></blockquote></li></ul><h3 id="31-自由与繁荣的国度"><a href="#31-自由与繁荣的国度" class="headerlink" title="31. 自由与繁荣的国度"></a>31. 自由与繁荣的国度</h3><h4 id="作者-24"><a href="#作者-24" class="headerlink" title="作者"></a>作者</h4><ul><li>[奥]路德维希·冯·米瑟斯</li></ul><blockquote><p>他还被誉为是“奥地利经济学派的院长”。他的理论也影响了之后的经济学家如弗里德里克·哈耶克、穆瑞·罗斯巴德等人。</p></blockquote><h4 id="简介-23"><a href="#简介-23" class="headerlink" title="简介"></a>简介</h4><p>这也是我 2019 年读完的最后一本书，感谢这本书让我对自由主义思想有了认识，打破的以前对自由主义的理解。这本书篇幅不长，主要是对自由主义的理想的阐释顺带着鄙视了一下无政府主义，是研究哈耶克思想的重要文献之一。</p><h4 id="摘抄-21"><a href="#摘抄-21" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>如果把他们放在生活的谎言和逻辑思维两者之间，让他们去选择的话，他们宁可牺牲逻辑。这是因为，他们如果放弃了在社会主义思想中找到的安慰，或曰离开了这种安慰，生活就会变得更加不堪忍受。社会主义思想告诉他们，导致失败的原因不在于他们自身的过错，而在于社会。</p></blockquote></li><li><blockquote><p>如果把他们放在生活的谎言和逻辑思维两者之间，让他们去选择的话，他们宁可牺牲逻辑。这是因为，他们如果放弃了在社会主义思想中找到的安慰，或曰离开了这种安慰，生活就会变得更加不堪忍受。社会主义思想告诉他们，导致失败的原因不在于他们自身的过错，而在于社会。因此，社会主义思想抬高了他们低落的自我意识，并将他们从难以忍受的压抑感中解脱出来。</p></blockquote></li><li><blockquote><p>对于照顾社会的整体利益及其意义的问题，人们存在着多方面的误解。他们认为，道德的价值就是牺牲个人利益，放弃享乐。这种看法忽视了一个最重要的问题，即道德的真正价值不是牺牲本身，而是这种牺牲所要达到的目的。也就是说，只有在为一个道德的目的而牺牲个人利益的前提下，这种牺牲才是合乎道德的。有些人为了一件正义的事业敢于舍去自己的一切、直至财产和鲜血；而另一些人却愿作出某些不给社会带来任何好处的无谓牺牲，这两者之间有着天壤之别。</p></blockquote></li><li><blockquote><p>无政府主义者认为，在一个真正为全体人民、而不是仅为特权阶层的特殊利益服务的社会里、国家、法律和政府都是不必要的多余机构。仅仅是由于目前的社会制度承认生产资料的私有制，才需要人们用强制和暴力来保护它。一旦消灭了私有制，人们就会自发地遵守社会生活的共同准则。</p></blockquote></li><li><blockquote><p>无政府主义者不否认，在实行劳动分工的社会里人们共同生活的每种形态都必须遵守某种规则，这些规则要求人们不得不作出某种尽管是暂时的，但毕竟是一种眼前利益的牺牲。但无政府主义者错就错在他们认为所有的人都会毫无例外地、自觉地遵守这个规则。</p></blockquote></li><li><blockquote><p>自由主义不是无政府主义，自由主义与无政府主义这两者之间毫无关系。自由主义的观点十分鲜明，这就是，没有强制措施，社会就会面临危险；为了保障人们的和平与合作，必须制定人们共同遵守的规则，必须保留暴力和威慑手段，只有这样才不致于使任何人破坏社会秩序。人们必须拥有足够的力量，迫使那些无视他人的生命、健康、个人自由和私有财产的人遵守社会生活的共同准则，必要时必须使用暴力。</p></blockquote></li><li><blockquote><p>自由主义关于国家职能的主张是它赞成生产资料的私有制这一根本性主张的延伸。如果我们赞同生产资料的私有制，那么，我们当然不同意将它改变成公有制的形式。也就是说，政府不应当成为生产资料的所有者。基于这一立场，自由主义者关于生产资料私有制的要求，明确无误地界定了政府的职能范围。</p></blockquote></li><li><blockquote><p>在德国人民中享有崇高声誉的作家、学者或艺术家，他们在其家乡得到的敬重和礼遇仅相当于政府的官僚等级制度中一位级别不高的官吏。那些在机关的写字间听差打杂的官吏被如此高估，实在是没有什么明智的理由。这种现象是以往诸侯统治时期遗传下来的后遗症，或者也可以说是遗传学中所说的一种隔代返祖现象。在那个时代里，公民畏惧公侯君主和他们的仆人，因为他们在任何时候都有可能被这些人洗劫一空。从这个意义上看，没有什么东西比把这些官吏们从写字间里轰出来，改变他们打发案卷、消磨时光的生活，把他们送到机器制造厂的绘图室去干活更美好、更高贵、更光荣了。税务官的职业不应当比那些直接创造财富、并向政府纳税、供其花费的人更高贵。</p></blockquote></li><li><blockquote><p>民主的社会功能。民主是一种国家的宪法形式，即它可以保证在不使用暴力的前提之下使政府符合被统治者的意愿。假如一个按照民主的原则组成的政府不遵照大多数人的意愿执政，人们不用打内战就可以将它推翻，并将那些受到大多数人拥护的人推到政府的执政地位。民主的国家体制中的选举机构和议会就专司此职，它们使政府的更迭得以平稳、无磨擦、不用武力以及不流血地加以完成。</p></blockquote></li><li><blockquote><p>人民是单个公民集合而成的整体，每个公民就其个体而言，其聪明才智和品德高尚与否尚且参差不齐，那么，由这些参差不齐的个体组成的整体势必是有差异的。</p></blockquote></li><li><blockquote><p>毋庸讳言，现实生活中，那些背离自由主义的民主原则，依靠欺骗和诱惑上台掌权的现象是有的，而且为数不少。此外，还有一些聪明睿智的人，当发现自己的人民或全世界人民在通往毁灭的道路上徘徊，而他们此时又没有力量说服人们接受其正确的思想，而允许他们采用的方法又不足以解决问题时，他们就会产生一种采取断然措施、拯救全体人民非我莫属的念头。此时此刻，强人政治、暴力统治以及少数派掌权的独裁主张就会冒头，而且可以立即找到其支持者。但自由主义认为，暴力从来就不是解决危机问题的手段。</p></blockquote></li><li><blockquote><p>  社会主义经济的领导者缺少一个为市场提供一切经济活动的市场价格的标准尺度。在资本主义条件下，这种标准尺度的形成过程是，在市场上对所有的商品和劳务进行交换，由此确定每种商品的交换比例，并用货币的形式表现出来。在以财产私有制为基础的社会制度中，人们可以将所有经济活动的结果用核算的方式加以控制。通过会计核算和利润核算的方法，审核每一种经济活动利润。事实表明，对大部分国营企业进行的利润核算都不能采用同私营企业的利润核算相同的方法进行。</p><p>  类似的核算在社会主义制度下则不可能进行，因为它不可能将所涉及的各种不同的商品和劳务的质量和数量简化成一个统一的衡量尺度。社会主义制度对经济生活中通常或每天遇到的问题束手无策，因为它不具备计算、核算的手段和能力。</p></blockquote></li><li><blockquote><p>  资本主义生产方式已经经历了相当长时间的考验。仅就物质福利和人们的富裕程度而言，它使得今天的地球能够养活比资本主义早期多得多的人口。这种制度需要社会主义制度所不理解的货币核算。鼓吹社会主义的作家们的一切努力，即，人们如何在没有货币核算和价格核算的情况下也能生活的论调，证明都是徒劳的。他们在这一方面的一切尝试均以失败而告终。</p></blockquote></li><li><blockquote><p>  自由主义认为，国家机器的任务只有一个，这就是保护人身安全和健康；保护人身自由和私有财产；抵御任何暴力侵犯和侵略。一切超出这一职能范围的政府行为都是罪恶。一个不履行自己的职责，而去侵犯生命、健康，侵犯自由和私有财产的政府，必然是一个很坏的政府。</p></blockquote></li><li><blockquote><p>  自由主义不是宗教，不是世界观，也不是代表特殊利益的党派。它不是宗教，因为它既不要求信仰，也不要求牺牲，因为它的周围没有任何神秘主义的东西，还因为它没有什么教义；它不是世界观，因为它不想解释宇宙，因为它什么也没有对我们说，也不想说关于人的存在的意义和目的这种事情；它不是一种利益党派，因为它没有向任何个人和团体许诺某种特殊好处，它不想，也没有去营造这种好处。它是一种完全不同的东西。它是意识形态，是关于社会上各种事物内在联系的学说，同时又是关于如何将这种学说应用到人在社会事务中的行为上面的学问。它不允诺任何超出社会和通过社会力所能及的东西。它只想给人们一样东西，和平地、不受干扰地提高所有人们的物质富裕程度，从而——只要社会机构有这个力量——使他们远离苦难的外在根源。减少痛苦，增加欢乐，这就是它的目标。</p><p>  ﻿没有一个宗教派别、没有一个政党曾相信过，可以不用打动人们的意识感情来维护自己的事业。华丽的辞藻、音乐和歌声响起来了，旗帜飘荡起来了，鲜花和色彩构成了某种象征，这是领袖们在寻求人们对他们个人的顺从。自由主义不跟着做这种事情。它没有党的鲜花，没有党的色彩，没有党歌，没有党的偶像，没有标志，没有口号。它只有事业和论据，而它们必定把它引向胜利。</p><p>  自由主义是一种比较博大的观念，它表示一种囊括全部社会生活的意识形态。而民主只表示一种仅仅包括社会关系一部分领域——国家政体——的意识形态。为什么自由主义必定要在国家中要求民主，本书在第一部分己经对此作了说明。为什么所有反自由主义的流派，也包括社会主义在内，都必然是反民主的，要说明这一点，则是详细研究这些流派本质的人们的任务。对社会主义，我在我的书中试图用“公有制经济”解释之。</p></blockquote></li><li><blockquote><p>  马克思主义理论可以归纳为三条教义： （1） 只要社会主义还没有出现，人类就会分裂为彼此间利益不可调和地相互对立的社会阶级。 （2） 人的思维总是要受其阶级关系所支配。人的思想反映其所属阶级的特殊利益，并与所有其他各阶级成员的利益处于不可调和的对立之中。[1] （3） 阶级利益的冲突导致了无情的阶级斗争，从而不可避免地导致了最广大的、最受虐待的阶级，即无产阶级的胜利。于是，光明的社会主义时代就将永久存在下去。</p><p>  还有更多的事实，都证明了马克思所取得的所有科学成就均属无用。但即使人们都这么说，依然有一个事实不可否认，那就是这个一贫如洗的作家，尽管其名字不为其同时代的大多数国务活动家和政治理论家们所知，但其思想却要比任何一种哲学更为深远地影响了历史进程或者世界事务长达七八十年之久。</p></blockquote></li><li><blockquote><p>  ﻿我们人类由于自身存在着各种弱点和谬误，所以不可能知道，通过某个超人类智慧生物的角度来看，我们俗世的生活到底是怎样的。但我们能够观察到这样的事实，所有非资本主义社会的民众都心照不宣地承认了资本主义方式在推销其产品方面的优越性。</p></blockquote></li><li><blockquote><p>  有关资本主义体系的成就，以及所有社会主义和半社会主义实验的失败，还有很多东西可说。然而首先需要弄清楚的是经济学家对社会主义所作的根本性的批评，那就是，社会主义不可能创立任何一种经济学的核算体系，因而在满足人类的需要方面也就缺少衡量这种满意度多寡的任何一种有效的方法。因此，从经济学的角度来看，受到多数人拥护的社会主义体系并没有什么长处。社会主义尚在黑暗中摸索前行，从他们自己的观点来看，也就是从社会主义生产管理者的观点以及其人民的观点来看，社会主义尚无法对社会需求的数量关系进行核算。到目前为止，这种计算能力的缺失还没有给共产主义国家的统治者带来麻烦，因为他们依然可以利用建立在资本主义国家市场机制之上的价格理论。</p><p>  ﻿然而，我们指出的社会主义生产方式的那个无可补救的痼疾却依然确凿地存在，也就是说，在一个实行社会主义制度的社会中，任何形式的经济计算都是绝对不可能的。对任何企业和商号的集体管理都会不可避免地导致财务上的失效和服务提供上的贫乏。对经济事务的官僚化管理，其效率低下早已有目共睹。而将工业上的集体管理原则加以无限制扩张的思想甚至让那些心胸最为偏狭的社会主义政治家们也会感到不寒而栗。</p></blockquote></li><li><blockquote><p>  ﻿自由主义主张消除一切等级特权，等级社会必须让位于一个全新的社会秩序。在这个新的社会里，只能有平等的国家公民。不但要取消某一个等级的特权地位，而且要消除一切特权等级的存在。自由主义要废除一切等级的樊篱，把人们从他们所属的狭隘的等级制度中解放出来。只有在资本主义社会里，只有在按照自由的基本原则而建立的国家制度中，每个人才有希望成为国家政治建筑的直接参与者，只有在这种社会制度下，个人才能选择和决定他的政治目标和理想。</p></blockquote></li><li><blockquote><p>  ﻿阶级斗争的学说是针对自由主义关于在生产资料私有制基础上，所有社会阶层的利益联合起来的学说而提出的，这两种学说尖锐对立。自由主义主张消除等级差别，取消特权，建立一个在法律面前人人平等的法制社会，实现了这些目标之后，就没有任何东西能够阻止所有社会阶层之间的和平与合作了，这是因为，人们在这一过程中同时也正确地认清了他们的利益之所在。</p></blockquote></li><li><blockquote><p>  ﻿因此，它们建立了政党机构，力图把每个人都牢牢地束缚在党内，不允许他们有任何脱离该党的想法。这种刻板的制度已在德国和奥地利建立起来，在东欧的一些国家里，这种制度正在形成之中。在上述所有的国家里，个人再也不是国家的公民了，而首先是党员。甚至连少年儿童都被置于党的监护之下。体育运动和社会交际活动也由政党来主办，并且直接为党的政治服务。</p><p>  ﻿建立政党自己的军队，是政党组织形式的极端。党的军事组织是按照国家正规军的模式组建的，它们拥有作战动员计划和作战计划，手中掌握着武器并随时准备开战。它们高奏军乐，高举战旗带着队伍招摇过市，向世人宣告着一个没完没了的混乱和战争时代的到来。</p></blockquote></li><li><blockquote><p>  启蒙运动哲学认为其最值得珍视的成就就是宽容原则，自由主义主张，一个人持什么样的宗教和哲学观点，政府无权干涉。他们同样急切地要求赋予每个人选择的权利，可以自由地选择如何将自己融入社会协作体系的方式。古典自由主义时代伟大的理想就是自由权，就是每个人为自己的生活制定计划的自由权。而今天社会主义社会中的人们所渴望和争取的则是市场经济“计划”的代用品。按照他们使用这个词的方式，“计划”的意思是指：由他人所制定的计划将规定我应该做什么以及如何做。我要过的生活就如同寄宿学校的学生，军队中的士兵，牢房中的囚犯一样。我观看、听闻、阅读和学习的，都是我的上级认为适合于我的。我将成为一架庞大机器中的一个齿轮，其转动的方向得由当权者来定。只有一种哲学，一种思想体系，一种准宗教可供人们自由地信仰和传播。任何背离这种教条主义信条的行为都会带来灭顶之灾。</p></blockquote></li></ul><h3 id="32-苏联的最后一天"><a href="#32-苏联的最后一天" class="headerlink" title="32. 苏联的最后一天"></a>32. 苏联的最后一天</h3><p>12 月 25 日，对于西方世界是一个重要的日子，这一天是圣诞节，同时也是苏联解体值得共同欢庆得日子。从波罗的海民独立、柏林墙倒塌、东欧剧变、匈牙利十月革命、切尔诺贝利事故等等。都是一步一步昭示着社会主义本悲惨的结局。</p><p>提到苏联不得不想起了几位从苏联时期逃亡移民到美国的比较牛逼的人物：</p><ul><li><p>现代计算机体系架构奠基人 <code>约翰·冯·诺伊曼</code>，出生于从匈牙利的布达佩斯，后来移民到美国。</p></li><li><p>查尔斯·西蒙尼：微软 Office 中 word 的创始人，领导着微软 office 部门一路突飞猛进、匈牙利命名法提出者，也是从匈牙利逃亡移民到美国。他的父母为了帮助他逃离苏联时期统治下的匈牙利被送进了监狱。</p></li><li><p>Google 创始人，谢尔盖·布林，出生于苏联，在他老爸的带领下逃亡移民到美国。</p></li><li><p>Intel 的 CEO 安迪·葛洛夫：曾经也是个勇武派，参加过匈牙利的十月事件，和平示威的时候被打断了胳膊。</p></li><li><blockquote><p>  安迪·格鲁夫于1936年出生于匈牙利，和大多数牛人一样，他也是犹太人。在他20岁的时候，也就是1956年，正值热血青年的他，他参于了一场学生请愿，这个事件很著名，在历史上称之为匈牙利十月事件。简单来说就是这些学生以及数十万匈牙利人发起了对政府的抗议，主要是抗议苏联为首的派别，和大部分列宁党的反应一样，政府用子弹回应了这十万匈牙利人，数千人死在了苏联军队的枪口下。匈牙利当局把这次事件定义为严重的反革命事件，随后的日子里，又抓了数千人蹲监狱。当天参加流行的人又是害怕又是绝望，在接下来超过20万匈牙利人偷偷超过边境，到达了周围的非社会主义国家，主要是奥地利，这其中就有20岁的青年安迪·格鲁夫，他在游行时被苏联和匈牙利当局士兵殴打，在逃亡奥地利的时候，胳膊还处于骨折未愈的状态。毕竟伤筋动骨100天，他这个才几天，跑得慢了就进监狱了。<br>  在奥地利当了快一年难民之后，他辗转来到了美国纽约，因为他是难民，还不会说英语，美国政府就给他免费学语言，还提供免费的食物给他吃，他学习很快就成了当时最好的之一，考到了纽约市学院（City College of New York），专业是化学。后来又考到了加州大学伯克利学院（University of California, Berkeley）的博士，专业还是化学。我之所以强调他的化学专业，是因为他NB的起点就是他的化学专业。<br>  此处引用<a href="https://liuyandong.com/2019/12/18/223/#more" target="_blank" rel="noopener">223. Intel公司的诞生(1)</a></p></blockquote></li><li><p>PayPal 创始人质疑的马克斯·列夫琴：乌克兰人，全家到美国去旅游，刚到美国之后苏联就解体了，在美国沦为了难民</p></li><li>尤金·维格纳：诺奖得主、量子力学的重要奠基人，也是匈牙利人</li><li>西奥多·冯·卡门：流体力学、空气动力学理论专家、钱学森的老师，也是从匈牙利逃亡移民到美国的。</li><li>乔治·伽莫夫：顶级的物理学家，热大爆炸宇宙学模型的创立者</li></ul><h4 id="作者-25"><a href="#作者-25" class="headerlink" title="作者"></a>作者</h4><ul><li>[爱]康纳·奥克勒里</li></ul><h4 id="简介-24"><a href="#简介-24" class="headerlink" title="简介"></a>简介</h4><blockquote><p>爱尔兰记者奥克莱里是苏联解体的见证者，在本书中，他以1991年12月25日这一天为框架，围绕着戈尔巴乔夫和叶利钦的斗争，将苏联最后六年的政治混乱、经济衰败、人心向背，用细致可靠的描写，表现得清晰而传神。</p></blockquote><blockquote><p>苏联陷入泥潭难以自拔，整个国家的命运和走向，最集中地体现在戈尔巴乔夫和叶利钦两个人身上。每个人都看着他们，“就像狼群等着最强壮的两头狼对峙”，看谁会成为领导者。卑微不是戈尔巴乔夫的脾性，宽宏大量也不是叶利钦的风格。两人从最初的联手合作，到后来的冲突不断，终于变得势同水火，各不相让。最终，戈尔巴乔夫不能很好地判断他的人民，在自我认识上更加糟糕，而叶利钦则在动物般的直觉下，听到了远处历史车轮的轰隆声。</p></blockquote><h4 id="摘抄-22"><a href="#摘抄-22" class="headerlink" title="摘抄"></a>摘抄</h4><ul><li><blockquote><p>这是人类史上一个重要的时刻，是千年俄罗斯和苏维埃帝国的终结，也是俄罗斯民族和国家复兴的开端。这一天的到来让美国的保守派提前庆祝哲学家弗朗西斯·福山的预言：苏联的分裂标志着“历史的终结”，而西方自由民主制将作为人类政府的最终形式得到普及。</p></blockquote></li><li><blockquote><p>在1991年12月25日，能够与1918年奥匈帝国覆灭或1923年土耳其帝国垮台相提并论的一个历史事件的发生，却没有国外战争或流血革命作为催化剂。共产主义南斯拉夫在烈火中分崩离析，而苏联却在全世界难以置信的目光中几乎无波无澜地解体了。强大的苏维埃军队毫不抵抗就将一个由众多附属共和国组成的帝国拱手让出。这一切发生得太快了。直到1991年初，都没有政治家或学者推测出即将在此年年末发生的历史剧变的规模和波及范围。</p></blockquote></li><li><blockquote><p>这一天是一个警醒，提醒他们曾经强大的超级大国的失势被美国当做冷战的胜利来庆祝，而不是当做人们和平推翻一个政权体系从而采纳民主制和自由市场经济制度的胜利来庆祝。前苏联总统参谋长亚历山大·里昂提耶夫在不久后这样描述：“美国人在苏联的葬礼上喝得太多了，以致现在还醒不过来。”</p></blockquote></li><li><blockquote><p>但是，成千上万的政治犯在拘留营里日渐憔悴，这是斯大林时期的遗留问题。那时候，没有独立的媒体，没有集会的权利，不能自由移民，没有民主政治，宗教自由受限，并且完全不能容忍大众对高层官员的批判。腐败和酗酒成了一种生活方式。法院听命于党，警察和克勃格可以逮捕任何人而不需要承担法律赔偿。秘密警察杜绝一切未授权的活动，不论是艺术展还是学生讨论组。外国书籍、杂志和电影如带有未经批准的内容将会被取缔。</p></blockquote></li><li><blockquote><p>社会需要一些改变。人们越来越意识到这个国家在自由度和生活水平方面被资本主义世界抛在了后面。新一代俄罗斯人变得对审查制度和旅游限制不满。这也是他们转向高层官员中最年轻也最有精力的同志米哈伊尔·戈尔巴乔夫的原因。</p></blockquote></li><li><blockquote><p>叶利钦喜欢给达到他高标准的官员送手表以资鼓励。他从手腕上脱下自己的手表送给能够取悦他的人，几分钟后，又从口袋里拿出一块一模一样的手表送给另一个人。有一次，他让他的助手把他的日本精工手表脱下来送给一名建筑工人。他的保镖科尔扎科夫已经学会总是在口袋里揣上备用的手表了。😂 我去苏联版大表哥🤣</p></blockquote></li><li><blockquote><p>铁幕”的唯一目的就是防止苏联公民知道外面的世界是什么样子的，因为这可能是他们无法承受的。</p></blockquote></li><li><blockquote><p>萨哈罗夫在沃斯特里亚科夫公墓入殓前，超过十万群众参加了在一个泥泞的停车场举行的葬礼集会，集会上最主要的呼声是要求结束苏联共产党的一党专政。驶过的一辆火车上，乘客打开窗户，一边喊叫一边挥手以资鼓励。群众的态度变得更加蔑视权威。对一个依靠控制麻木群众来掌握政权的政党来说，这样的表现是不利的。</p></blockquote></li><li><blockquote><p>戈尔巴乔夫坚持改革进程，他鼓励苏联十五个共和国进行各自的民主选举，选取对民众更加负责任的领导人。每个共和国都已经有了自己的议会，但是，投票的结果往往是由共产党领导人安排好的，立法机关也没有多少立法权。</p></blockquote></li></ul><h2 id="漫画"><a href="#漫画" class="headerlink" title="漫画"></a>漫画</h2><h3 id="1-《流浪神差》"><a href="#1-《流浪神差》" class="headerlink" title="1.《流浪神差》"></a>1.《流浪神差》</h3><h4 id="作者-26"><a href="#作者-26" class="headerlink" title="作者"></a>作者</h4><ul><li>[日]安达渡嘉</li></ul><h4 id="简介-25"><a href="#简介-25" class="headerlink" title="简介"></a>简介</h4><p>流浪神差又名野良神，是我真正意义上的入宅作。虽然我高中的时候也追过火影，但那时候并不是对二次元有多大的兴趣。那时候还是为火影的热血所吸引吧。高中的时候只知道死读书，没有时间和经历看喜欢的的动画和漫画。而大一的时候，有的是充裕的时间，包括整个大学期间也看了将近 300 部动漫作品。想要知道我看过那些的可以去看看我的番组计划  <a href="https://bgm.tv/anime/list/512178" target="_blank" rel="noopener">木子的番组计划</a> 。大一的时候看完的动画第一季和第二季，眼看着四年过去了，真希望这部作品能接着出第三季和第四季。今年十一月份的时候看的漫画，作者是两位妹子，前两年的时候因为身体原因停更了，去年的时候又开始连载了。</p><h3 id="2-《终将成为你》"><a href="#2-《终将成为你》" class="headerlink" title="2.《终将成为你》"></a>2.《终将成为你》</h3><h4 id="作者-27"><a href="#作者-27" class="headerlink" title="作者"></a>作者</h4><ul><li>[日]仲谷鳩</li></ul><h4 id="简介-26"><a href="#简介-26" class="headerlink" title="简介"></a>简介</h4><p>去年的时候看完的动画，今年每个月都等着更新看完了漫画，直到十月份才完结。是一部不错滴百合漫画，嘻嘻，我比较喜欢百合😂，单纯的女生之间超越友情的那份爱。我尊重理解并支持同性恋群体们❤。</p><h3 id="3-《-Happy-Sugar-Life-～幸福甜蜜生活～》"><a href="#3-《-Happy-Sugar-Life-～幸福甜蜜生活～》" class="headerlink" title="3.《 Happy Sugar Life ～幸福甜蜜生活～》"></a>3.《 Happy Sugar Life ～幸福甜蜜生活～》</h3><h4 id="作者-28"><a href="#作者-28" class="headerlink" title="作者"></a>作者</h4><ul><li>[日]鍵空とみやき</li></ul><h4 id="简介-27"><a href="#简介-27" class="headerlink" title="简介"></a>简介</h4><p>下班后回来躺床上花了三个小时一口气看完的动画，之后又在 Kindle Oasis 上看完了漫画。十一月三十号下午买的二手 Kindle Oasis 2，最大的动因就是在 Kindle Paperwhite 3 上已经无法满足我看漫画的需求了😂</p><h3 id="4-《-citrus-柑橘味香氣-》"><a href="#4-《-citrus-柑橘味香氣-》" class="headerlink" title="4.《 citrus 柑橘味香氣 》"></a>4.《 citrus 柑橘味香氣 》</h3><h4 id="作者-29"><a href="#作者-29" class="headerlink" title="作者"></a>作者</h4><ul><li>サブロウタ</li></ul><h4 id="简介-28"><a href="#简介-28" class="headerlink" title="简介"></a>简介</h4><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h2 id="2020-年阅读计划"><a href="#2020-年阅读计划" class="headerlink" title="2020 年阅读计划"></a>2020 年阅读计划</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>读懂<code>弗里德利希·奥古斯特·哈耶克</code> 和 <code>汉娜·阿伦特</code></li></ul><h3 id="阅读计划"><a href="#阅读计划" class="headerlink" title="阅读计划"></a>阅读计划</h3><ul><li>《开放社会与敌人》 第二遍</li><li>《通往奴役之路》第三遍</li><li>《极权主义的起源》第二遍</li><li>《 <em>Amusing Ourselves to Death</em> 》</li><li>《法律、立法与自由》</li><li>《自由宪章》</li><li>《致命的自负》</li><li>《自由秩序原理》</li><li>《科学的反革命》</li><li>《个人主义与经济秩序》</li><li>《资本主义与自由》</li><li>《轴心时代》</li><li>《自由与繁荣的过度》</li><li>《重申自由主义》</li><li>《秩序自由主义》</li><li>《宪政经济学》</li><li>《知识、自由与秩序》</li><li>《大国的崩溃：苏联解体的台前幕后》</li><li>《公正：该如何做是好》</li></ul><p>其中读第二遍或者第三遍的图书准备写几篇博客</p><h2 id="关于书籍"><a href="#关于书籍" class="headerlink" title="关于书籍"></a>关于书籍</h2><p>上面的书大部分 kindle 上有，因为我是  <em>Kindle Unlimited</em>  的会员，所以能免费借阅上面的书。有 kindle 的小伙伴推荐去订阅亚马逊的这个  <em>Kindle Unlimited</em>   会员，一年价格才 98块人民币，超值啊😂 支持一下正版嘛。</p><p>但有些书不得不看盗版，没办法，因为还在摸着石头过河的国家并没有出版自由和新闻自由，我也很无奈。</p><p>另外你会发现，我读过的书绝大多数都是外国作者写的，而且他们绝大多数也都是学术界很有名的经济学家，甚至有些都是诺贝尔经济学奖得主。我觉着这些获得诺奖的经济学家，他们或许都亲身目睹了共产主义运动在欧洲所带来的杀戮，见证了苏联的崛起和陨落，这些经历也让他们清楚地认识到共产主义的邪恶。启迪当下，他们的思想值得我们深读和研究。不像某些只会唱赞歌的人，比如胡某进的《 X领导的强大体制对XX意味着什么 》，写的书里面装的都是一堆屎，一看到书名就想吐的那种。读书最主要的目的是为了思辨，是为了思考，而不是教会我们如何唱赞歌。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><h4 id="读书是为了什么？"><a href="#读书是为了什么？" class="headerlink" title="读书是为了什么？"></a>读书是为了什么？</h4><p>我不会告诉你读书是快乐的，读书能带给你勇气之类的鸡汤话。而且我也讨厌这种觉着多读几本书就高人一等、读书是多么美好的事情这类的自豪感。我并不觉着读书多么快乐，因为我很少抱有这种非理性的期望。读书的过程需要你集中注意力和思考，而思考是费力的，读书的过程远不如你看场电影那么舒服。</p><blockquote><p><strong>独立之精神，自由之思想</strong>                                     ——陈寅恪</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;更新日志&quot;&gt;&lt;a href=&quot;#更新日志&quot;
        
      
    
    </summary>
    
    
      <category term="阅读" scheme="https://blog.502.li/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="读书笔记" scheme="https://blog.502.li/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="思考" scheme="https://blog.502.li/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Container Linux OS 从入坑到爬出来😂</title>
    <link href="https://blog.502.li/archives/container-linux-os.html"/>
    <id>https://blog.502.li/archives/container-linux-os.html</id>
    <published>2019-12-31T05:00:00.000Z</published>
    <updated>2020-01-02T14:44:08.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul><li>2019-12-31 初稿，可能完成不了，等到来年了😂</li><li>2020-01-01</li></ul><h2 id="容器优化型操作系统？"><a href="#容器优化型操作系统？" class="headerlink" title="容器优化型操作系统？"></a>容器优化型操作系统？</h2><h3 id="GKE-的-Container-Optimized-OS"><a href="#GKE-的-Container-Optimized-OS" class="headerlink" title="GKE 的  Container-Optimized OS"></a>GKE 的  <a href="https://cloud.google.com/container-optimized-os/docs/" target="_blank" rel="noopener">Container-Optimized OS</a></h3><p>Google 家的  GKE  中的每个节点都是使用 <a href="https://cloud.google.com/container-optimized-os/docs/" target="_blank" rel="noopener">Container-Optimized OS</a> 来运行工作负载，不过仅仅是针对 GCE 来进行优化的，可能在 OpenStack 或者 vSphere 上运行不起来，(瞎猜😂</p><blockquote><p>Container-Optimized OS 是适用于 <a href="https://cloud.google.com/compute" target="_blank" rel="noopener">Compute Engine</a> 虚拟机的操作系统映像，专为运行 Docker 容器而优化。借助 Container-Optimized OS，您可以快速、高效、安全地在  Google Cloud Platform 上启动 Docker 容器。Container-Optimized OS 由 Google  维护，基于 <a href="https://www.chromium.org/chromium-os" target="_blank" rel="noopener">Chromium OS</a> 开放源代码项目。</p></blockquote><h3 id="CoreOS-Container-Linux"><a href="#CoreOS-Container-Linux" class="headerlink" title="CoreOS Container Linux"></a>CoreOS Container Linux</h3><p>个人认为 CoreOS 的 CoreOS Container Linux 要比 Container-Optimized OS 和 Photon OS 要更加专业，尤其是针对容器来讲， CoreOS 就是专门用来运行容器的，它没有像 yum 或 apt 这样的包管理器来安装软件，在 CoreOS 中你不需要安装软件，因为所有的应用程序都要使用 docker 来打包。</p><blockquote><p>额外提一句，CoreOS 是一个团队，现如今已经被 Red Hat® 收购了，而 Red Hat® 已经被 IBM 收购了，按照关系来讲而 CoreOS 应该是 IBM 的孙子吧🙃。而 CoreOS Container Linux 仅仅是他们维护项目的其中一个，CoreOS 开源的项目还有：</p><ul><li>etcd：</li><li>Clair:</li><li>dex：</li><li>Prometheus：</li><li>flannel：</li></ul></blockquote><p>在 Linux 世界里有大量的发行版可以做为服务器系统使用, 但是这些系统大多部署复杂, 更新系统更是困难重重. 这些都是 CoreOS 试图解决的问题。</p><h4 id="特点如下"><a href="#特点如下" class="headerlink" title="特点如下"></a>特点如下</h4><ul><li>最小化的操作系统： 占用内存很少，比典型的服务器版本 Linux 少占 40%的内存。</li><li>易于升级： CoreOS 采用双系统分区（主动分区/被动分区）设计而不是采用传统的通过升级包来升级系统，这使得每次升级更加快速，可靠和易于回滚。</li><li>集成 Docker： CoreOS 默认集成 Docker 并作了很好的支持和优化，省去用户安装，配置，优化 Docker 的时间，极大地方便了用户。</li><li>易于集群化： CoreOS 本身提供了大型 Docker 容器集群的整体解决方案，通过内置的 fleet 工具在多台系统中部署容器并进行集群化管理。同时通过提供 Discovery Service，便于动态部署和管理集群，解决方案比较成熟。</li><li>自动化的大规模部署： CoreOS 自身提供的解决方案能够自动地大规模批量部署并操作系统，极大地减少用户工作量。</li><li>使用 systemd 做为系统服务管理工具，性能比较好，systemd 有现代化的日志功能，同时采用 socket 式与 D-Bus 总线式激活服务.</li></ul><h3 id="Photon-OS"><a href="#Photon-OS" class="headerlink" title="Photon OS"></a>Photon OS</h3><h4 id="官方宣传册"><a href="#官方宣传册" class="headerlink" title="官方宣传册"></a>官方宣传册</h4><p>PPT 做的不错呦😂</p><p><img src="../img/image-20191231163325900.png" alt="image-20191231163325900"></p><p><img src="../img/image-20191231163400135.png" alt="image-20191231163400135"></p><p>剽窃一段 VMware 官方的<a href="https://vmware.github.io/photon/" target="_blank" rel="noopener">文档</a>介绍：</p><blockquote><p>Project Photon OS™ is an open source, minimal Linux container host  that is optimized for cloud-native applications, cloud platforms, and  VMware infrastructure. Photon OS 3.0 introduces ARM64 support, installer improvements and updated packages. We invite partners, customers, and  community members to collaborate on using Photon OS to run  high-performance virtual machines and containerized applications.</p><ul><li><strong>Optimized for VMware vSphere®</strong>: The Linux kernel is tuned for performance when Photon OS runs on vSphere.</li><li><strong>Support for containers</strong>: Photon OS includes the Docker daemon and works with container orchestration frameworks, such as Mesos and Kubernetes.</li><li><strong>Efficient lifecycle management</strong>: Photon OS is easy to manage, patch, and update.</li><li><strong>Security hardened</strong>: The kernel and other aspects of the operating system are built with an emphasis on security.</li></ul><p>For more information, see the <a href="https://vmware.github.io/photon/assets/files/photon-os-datasheet.pdf" target="_blank" rel="noopener">datasheet</a>.</p><p>Track our progress in earning the Linux Foundation’s Core Infrastructure Initiative’s Best Practices Badge. </p></blockquote><p>可以看出 Photon OS™ 是针对 VMware vSphere® 虚拟化平台进行内核优化的容器专用操作系统，就和 CoreOS 一样。十分适合专门用来运行容器，当作 Kubernetes 集群中的工作负载来使用。</p><h3 id="RancherOS"><a href="#RancherOS" class="headerlink" title="RancherOS"></a>RancherOS</h3><p>剽窃一段官方的<a href="https://rancher.com/docs/os/v1.x/en/" target="_blank" rel="noopener">介绍</a>：</p><blockquote><p>RancherOS is the smallest, easiest way to run Docker in production. Every process in RancherOS is a container managed by Docker. This includes system services such as <code>udev</code> and <code>syslog</code>. Because it only includes the services necessary to run Docker, RancherOS is significantly smaller than most traditional operating systems. By removing unnecessary libraries and services, requirements for security patches and other maintenance are also reduced. This is possible because, with Docker, users typically package all necessary libraries into their containers.</p><p>Another way in which RancherOS is designed specifically for running Docker is that it always runs the latest version of Docker. This allows users to take advantage of the latest Docker capabilities and bug fixes.</p><p>Like other minimalist Linux distributions, RancherOS boots incredibly quickly. Starting Docker containers is nearly instant, similar to starting any other process. This speed is ideal for organizations adopting microservices and autoscaling.</p><p>Docker is an open-source platform designed for developers, system admins, and DevOps. It is used to build, ship, and run containers, using a simple and powerful command line interface (CLI). To get started with Docker, please visit the <a href="https://docs.docker.com/engine/userguide/" target="_blank" rel="noopener">Docker user guide</a>.</p></blockquote><p>RancherOS 是 Rancher 团队所维护的开源项目，也是对标 CoreOS 一样，专门用来运行容器，并且可以运行在生产环境（至少官方做了这么样的承诺，咱也没在生产用过，不好说。在 RancherOS 中所有的进程（包括系统所有的服务，比如 udev 和 syslog）都是用 docker 来管理，这一点要比 CoreOS 更加激进一些，而 CoreOS 还是使用传统 Linux 发行版中的 systemd 来管理系统中的服务。通过移除传统 Linux 发行版中不必要的服务和库来最小化系统，使他专注单一的功能，即运行 docker 容器。</p><blockquote><p>Everything in RancherOS is a Docker container. We accomplish this by launching two instances of Docker. One is what we call <strong>System Docker</strong> and is the first process on the system. All other system services, like <code>ntpd</code>, <code>syslog</code>, and <code>console</code>, are running in Docker containers. System Docker replaces traditional init systems like <code>systemd</code> and is used to launch <a href="https://rancher.com/docs/os/v1.x/en/installation/system-services/adding-system-services/" target="_blank" rel="noopener">additional system services</a>.</p><p>System Docker runs a special container called <strong>Docker</strong>, which is another Docker daemon responsible for managing all of the user’s containers. Any containers that you launch as a user from the console will run inside this Docker. This creates isolation from the System Docker containers and ensures that normal user commands don’t impact system services.</p><p>We created this separation not only for the security benefits, but also to make sure that commands like <code>docker rm -f $(docker ps -qa)</code> don’t delete the entire OS.</p></blockquote><p><code>Everything in RancherOS is a Docker container.</code> 感觉这个要比 CoreOS 更加容器化，甚至使用 docker 取代了 systemd 来管理系统的各种服务。系统启动后运行两个 docker 服务进程，一个是系统 docker ，在此之上在运行系统服务容器，和用户层面的 docker 。不过看一下下面的这张图你就会明白。总的来讲 RancherOS 是使用 docker 来管理整个系统的服务的，包括用户层面的 docker 。</p><p><img src="../img/rancheroshowitworks.png" alt="How it works"></p><h2 id="安装体验"><a href="#安装体验" class="headerlink" title="安装体验"></a>安装体验</h2><p>咱的虚拟化平台是 VMware vSphere ，因为硬件服务器大多数都是 Dell 的，而  Dell  是 VMware 母公司，对于我司这种传统企业来讲使用 VMware vSphere 这种用户 UI 友好的虚拟化无疑是最好的选择，哈哈😂。其他虚拟化平台比如 OpenStack 安装步骤会有所不同。</p><h3 id="Container-Optimized-OS"><a href="#Container-Optimized-OS" class="headerlink" title="Container-Optimized OS"></a>Container-Optimized OS</h3><p>因为仅仅是针对 GCE 进行优化的系统，传统的虚拟化比如 KVM 、 ESXi 可能用不了。另外还需要拿 <a href="https://www.chromium.org/chromium-os" target="_blank" rel="noopener">Chromium OS</a>  的源码来编译镜像，没有现成的  ISO 或者 OVA 虚拟机模板可用，咱就不折腾了。毕竟硬件资源有限，现场编译一个 <a href="https://www.chromium.org/chromium-os" target="_blank" rel="noopener">Chromium OS</a>  也需要十几个小时😥</p><h2 id="Photon-OS-1"><a href="#Photon-OS-1" class="headerlink" title="Photon OS"></a>Photon OS</h2><p>可以现成编译一个 ISO 镜像，也可以使用官方已经编译好的 ISO 镜像或者 OVA 虚拟机模板。不过也支持常见的公有云，比如 Amazon AMI 、Google GCE Image、Azure VHD。甚至还有 Raspberry Pi3 Image 树莓派3😂</p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><a href="https://vmware.github.io/photon/assets/files/html/3.0/photon_installation/" target="_blank" rel="noopener">官方文档</a></h3><p>官方的安装文档中都给出了各种环境的安装方式，选择自己的环境按照文档一步一步来就行，不过在此注意以下几点。</p><h3 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h3><ul><li><h4 id="ISO"><a href="#ISO" class="headerlink" title="ISO"></a><a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS" target="_blank" rel="noopener">ISO</a></h4></li></ul><p>通用的方案，适用于各种环境，无论是虚拟机还是物理机，由于咱使用的是 VMware vSphere 虚拟化，咱就使用 OVA 格式，因为后者对 vSphere 进行了优化。对于 VMware 用户来讲最好使用 OVA 格式来进行安装。</p><ul><li><h4 id="OVA"><a href="#OVA" class="headerlink" title="OVA"></a><a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS" target="_blank" rel="noopener">OVA</a></h4><blockquote><p>Pre-installed minimal environment, customized for VMware hypervisor  environments. These customizations include a highly sanitized and  optimized kernel to give improved boot and runtime performance for  containers and Linux applications. Since an OVA is a complete virtual  machine definition, we’ve made available a Photon OS OVA that has  virtual hardware version 11; this will allow for compatibility with  several versions of VMware platforms or allow for the latest and  greatest virtual hardware enhancements.</p></blockquote></li></ul><p>根据官方文档所描述的 OVA 虚拟机模板是针对  VMware hypervisor  虚拟化环境进行优化定制的。</p><ul><li><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5></li><li><p><a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS" target="_blank" rel="noopener">Amazon Machine Image</a></p></li><li><a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS" target="_blank" rel="noopener">Google Compute Engine image</a></li><li><a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS" target="_blank" rel="noopener">Azure VHD</a></li><li><a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS" target="_blank" rel="noopener">Raspberry Pi3</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载好 OVA 虚拟机模板后，登录到 ESXi 或者 vCenter 中直接使用 OVA 创建虚拟机模板即可，对于 <code>VMware® Workstation 1x Pro</code>  可以直接将 OVA 导入成为虚拟机来运行。</p><h4 id="1-导入-OVA-虚拟机模板"><a href="#1-导入-OVA-虚拟机模板" class="headerlink" title="1. 导入 OVA 虚拟机模板"></a>1. 导入 OVA 虚拟机模板</h4><p><img src="../img/image-20191231105906355.png" alt="image-20191231105906355"></p><h4 id="2-添加-OVA-虚拟机模板"><a href="#2-添加-OVA-虚拟机模板" class="headerlink" title="2.添加 OVA 虚拟机模板"></a>2.添加 OVA 虚拟机模板</h4><p><img src="../img/image-20191231110111943.png" alt="image-20191231110111943"></p><h4 id="3-选择存储"><a href="#3-选择存储" class="headerlink" title="3. 选择存储"></a>3. 选择存储</h4><p><img src="../img/image-20191231110153113.png" alt="image-20191231110153113"></p><h4 id="4-同意许可协议"><a href="#4-同意许可协议" class="headerlink" title="4. 同意许可协议"></a>4. 同意许可协议</h4><p><img src="../img/image-20191231110231422.png" alt="image-20191231110231422"></p><h4 id="5-部署选项"><a href="#5-部署选项" class="headerlink" title="5.部署选项"></a>5.部署选项</h4><ul><li>选择好网络</li><li>磁盘置备的方式：精简就是使用到的时候再对磁盘进行制令。厚置备就是创建虚拟机的时候对磁盘进行置零，性能会好一些。</li></ul><p><img src="../img/image-20191231110339494.png" alt="image-20191231110339494"></p><h4 id="6-即将完成"><a href="#6-即将完成" class="headerlink" title="6. 即将完成"></a>6. 即将完成</h4><p><img src="../img/image-20191231110531238.png" alt="image-20191231110531238"></p><h3 id="系统启动"><a href="#系统启动" class="headerlink" title="系统启动"></a>系统启动</h3><p><img src="../img/image-20191231111131193.png" alt="image-20191231111131193"></p><p>初始用户名是 <code>root</code> ，密码是 <code>changeme</code> ，输入完密码之后会强制要求你更改密码，在输入一次 <code>changeme</code> 之后输入两次修改的密码即可。</p><p>登录到系统之后使用 <code>ip addr</code> 命令查看由默认的 DHCP 获取到的方式来查看 IP，然后编辑 sshd_config 配置文件允许 root 登录。不得不说 ESXi 的 Web 控制台实在是太难用了，还是 ssh 上去使用吧。</p><ul><li><code>vi /etc/ssh/sshd_config</code> 把 <code>PermitRootLogin</code> 配置项修改为 <code>yes</code> 即可</li><li>重启 sshd 服务 <code>systemctl restart sshd</code></li></ul><h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Linux  4.19.79-1.ph3-esx <span class="comment">#1-photon SMP Tue Oct 22 23:53:27 UTC 2019 x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">"VMware Photon OS"</span></span><br><span class="line">VERSION=<span class="string">"3.0"</span></span><br><span class="line">ID=photon</span><br><span class="line">VERSION_ID=3.0</span><br><span class="line">PRETTY_NAME=<span class="string">"VMware Photon OS/Linux"</span></span><br><span class="line">ANSI_COLOR=<span class="string">"1;34"</span></span><br><span class="line">HOME_URL=<span class="string">"https://vmware.github.io/photon/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://github.com/vmware/photon/issues"</span></span><br></pre></td></tr></table></figure><p>目前的内核版本是 4.19.79 ，比 CentOS 7 系那种五年前的 3.18 内核高到不知道哪里去了。不过个人认为，对于容器虚拟化这种依赖于内核特性的技术来讲还是要选择高一点的版本比较好。像 CentOS 那种五年前的 3.18 版本，那时候容器所依赖的很多内核特性在这些版本上还不够成熟。从使用来讲，或外的公有云像 GKE 、AKS、AKE 等都是使用的 4.14 内核版本以上。</p><p>4.19 版本有个小问题，就是如果 kube-proxy 使用 IPVS 的话，需要开启相应的内核模块，主要依赖的内核模块有以下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br></pre></td></tr></table></figure><p>在 4.19 版本之后 nf_conntrack_ipv4 内核模块替换成了 nf_conntrack ，参看 <a href="https://github.com/coreos/bugs/issues/2518" target="_blank" rel="noopener">coreos/bugs#2518</a></p><h3 id="资源占用情况"><a href="#资源占用情况" class="headerlink" title="资源占用情况"></a>资源占用情况</h3><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><ul><li>系统初始化启动之后内存仅仅使用了 45Mi</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          2.0Gi        45Mi       1.8Gi       0.0Ki        93Mi       1.8Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><ul><li>启动 docker 进程之后的占用情况，也仅仅 109Mi</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          2.0Gi       109Mi       1.6Gi       0.0Ki       238Mi       1.8Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><h4 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h4><p>使用 OVA 虚拟机模板启动后的虚拟机，磁盘仅仅占用了 515MB ，确实是相当轻量化，这还是包含了 docker。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/root        16G  515M   15G   4% /</span><br><span class="line">devtmpfs        998M     0  998M   0% /dev</span><br><span class="line">tmpfs          1000M     0 1000M   0% /dev/shm</span><br><span class="line">tmpfs          1000M  532K  999M   1% /run</span><br><span class="line">tmpfs          1000M     0 1000M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs          1000M     0 1000M   0% /tmp</span><br><span class="line">/dev/sda2        10M  2.2M  7.9M  22% /boot/efi</span><br><span class="line">tmpfs           200M     0  200M   0% /run/user/0</span><br></pre></td></tr></table></figure><h4 id="负载"><a href="#负载" class="headerlink" title="负载"></a>负载</h4><p><img src="../img/image-20191231113306435.png" alt="image-20191231113306435"></p><h3 id="进程和服务"><a href="#进程和服务" class="headerlink" title="进程和服务"></a>进程和服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">● photon-machine</span><br><span class="line">    State: running</span><br><span class="line">     Jobs: 0 queued</span><br><span class="line">   Failed: 0 units</span><br><span class="line">    Since: Tue 2019-12-31 13:53:18 UTC; 11min ago</span><br><span class="line">   CGroup: /</span><br><span class="line">           ├─user.slice</span><br><span class="line">           │ └─user-0.slice</span><br><span class="line">           │   ├─session-c1.scope</span><br><span class="line">           │   │ ├─363 /bin/login -p --</span><br><span class="line">           │   │ └─396 -bash</span><br><span class="line">           │   ├─session-c2.scope</span><br><span class="line">           │   │ ├─408 sshd: root@pts/0</span><br><span class="line">           │   │ ├─415 -bash</span><br><span class="line">           │   │ └─560 systemctl status</span><br><span class="line">           │   └─user@0.service</span><br><span class="line">           │     └─init.scope</span><br><span class="line">           │       ├─388 /lib/systemd/systemd --user</span><br><span class="line">           │       └─389 (sd-pam)</span><br><span class="line">           ├─init.scope</span><br><span class="line">           │ └─1 /lib/systemd/systemd</span><br><span class="line">           └─system.slice</span><br><span class="line">             ├─systemd-networkd.service</span><br><span class="line">             │ └─255 /lib/systemd/systemd-networkd</span><br><span class="line">             ├─systemd-udevd.service</span><br><span class="line">             │ └─125 /lib/systemd/systemd-udevd</span><br><span class="line">             ├─vgauthd.service</span><br><span class="line">             │ └─197 /usr/bin/VGAuthService -s</span><br><span class="line">             ├─docker.service</span><br><span class="line">             │ ├─430 /usr/bin/dockerd</span><br><span class="line">             │ └─437 docker-containerd --config /var/run/docker/containerd/containerd.toml</span><br><span class="line">             ├─systemd-journald.service</span><br><span class="line">             │ └─100 /lib/systemd/systemd-journald</span><br><span class="line">             ├─sshd.service</span><br><span class="line">             │ └─361 /usr/sbin/sshd -D</span><br><span class="line">             ├─vmtoolsd.service</span><br><span class="line">             │ └─94 /usr/bin/vmtoolsd</span><br><span class="line">             ├─systemd-resolved.service</span><br><span class="line">             │ └─257 /lib/systemd/systemd-resolved</span><br><span class="line">             ├─dbus.service</span><br><span class="line">             │ └─198 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only</span><br><span class="line">             ├─systemd-timesyncd.service</span><br><span class="line">             │ └─167 /lib/systemd/systemd-timesyncd</span><br><span class="line">             └─systemd-logind.service</span><br><span class="line">               └─195 /lib/systemd/systemd-logind</span><br></pre></td></tr></table></figure><h3 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h3><p>Photon OS 默认的包管理工具是 tdnf ，不过也支持 yum ，两者使用方式有细微的差别，使用的也是相同的软件包源，而且对于国内用户来讲，软件包源在国外服务器上（<a href="https://dl.bintray.com/vmware/），速度感人，肉眼可见" target="_blank" rel="noopener">https://dl.bintray.com/vmware/），速度感人，肉眼可见</a> KB/s 级别的速度。你懂的，操他奶奶的 GFW，尼玛死了😡，搞网络封锁耽误这人搬砖。安装速度慢得一批，单单下载 50 MB 的软件包就下不下来，不得不用上我那台透明代理的旁路网关。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">root@photon-OS [ ~ ]<span class="comment"># tdnf upgrade</span></span><br><span class="line"></span><br><span class="line">Installing:</span><br><span class="line">runc                x86_64  1.0.0.rc9-1.ph3   photon-updates     10.24M 10736757</span><br><span class="line">containerd          x86_64  1.2.10-1.ph3      photon-updates     76.25M 79950751</span><br><span class="line">docker-engine       x86_64  18.09.9-1.ph3     photon-updates     91.29M 95721322</span><br><span class="line">docker-cli          x86_64  18.09.9-1.ph3     photon-updates     72.76M 76299393</span><br><span class="line"></span><br><span class="line">Total installed size: 250.54M 262708223</span><br><span class="line"></span><br><span class="line">Upgrading:</span><br><span class="line">sqlite-libs         x86_64  3.27.2-6.ph3      photon-updates      1.08M 1129424</span><br><span class="line">python3-setuptools  noarch  3.7.5-1.ph3       photon-updates      1.61M 1692186</span><br><span class="line">python3-xml         x86_64  3.7.5-1.ph3       photon-updates    333.69k 341698</span><br><span class="line">python3-libs        x86_64  3.7.5-1.ph3       photon-updates     22.88M 23990697</span><br><span class="line">python3             x86_64  3.7.5-1.ph3       photon-updates      2.90M 3044206</span><br><span class="line">openssl             x86_64  1.0.2t-2.ph3      photon-updates      4.53M 4750710</span><br><span class="line">openssh-server      x86_64  7.8p1-6.ph3       photon-updates    904.54k 926254</span><br><span class="line">openssh-clients     x86_64  7.8p1-6.ph3       photon-updates      3.65M 3831266</span><br><span class="line">openssh             x86_64  7.8p1-6.ph3       photon-updates        0.00b 0</span><br><span class="line">linux-esx           x86_64  4.19.87-1.ph3     photon-updates     12.67M 13284780</span><br><span class="line">libarchive          x86_64  3.3.3-4.ph3       photon-updates    804.34k 823648</span><br><span class="line">e2fsprogs-libs      x86_64  1.44.3-4.ph3      photon-updates     74.62k 76416</span><br><span class="line">e2fsprogs           x86_64  1.44.3-4.ph3      photon-updates      1.88M 1972142</span><br><span class="line">docker              x86_64  18.09.9-1.ph3     photon-updates        0.00b 0</span><br><span class="line">dhcp-libs           x86_64  4.3.5-7.ph3       photon-updates    264.25k 270588</span><br><span class="line">dhcp-client         x86_64  4.3.5-7.ph3       photon-updates      2.52M 2642853</span><br><span class="line"></span><br><span class="line">Total installed size:  56.05M 58776868</span><br><span class="line">Is this ok [y/N]:y</span><br><span class="line"></span><br><span class="line">Downloading:</span><br><span class="line">docker-engine                           302192      1%</span><br><span class="line"></span><br><span class="line">docker-engine                           515184      2%</span><br><span class="line">docker-engine                           523376      2%</span><br><span class="line">docker-engine                          4234352     15%</span><br><span class="line">docker-engine                         23477360     84%</span><br><span class="line"></span><br><span class="line">docker-engine                         23477360     84%</span><br></pre></td></tr></table></figure><ul><li>56.05M / 58776868B 大小的文件，下载了一上午都没搞完……气的我想掀桌子、砸键盘、摔鼠标😑</li></ul><p>不过可以根据官方的编译文档，把整个软件包源编译出来 ，放在本地使用，然后添加本的 yum 源码即可。</p><h3 id="docker-容器引擎"><a href="#docker-容器引擎" class="headerlink" title="docker 容器引擎"></a>docker 容器引擎</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]# docker info</span><br><span class="line">Containers: 0</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 0</span><br><span class="line">Server Version: 18.06.2-ce</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Supports d_type: true</span><br><span class="line"> Native Overlay Diff: true</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: local</span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line"> Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: runc</span><br><span class="line">Default Runtime: runc</span><br><span class="line">Init Binary: docker-init</span><br><span class="line">containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e</span><br><span class="line">runc version: a592beb5bc4c4092b1b1bac971afed27687340c5 (expected: 69663f0bd4b60df09991c08812a60108003fa340)</span><br><span class="line">init version: fec3683</span><br><span class="line">Security Options:</span><br><span class="line"> apparmor</span><br><span class="line"> seccomp</span><br><span class="line">  Profile: default</span><br><span class="line">Kernel Version: 4.19.79-1.ph3-esx</span><br><span class="line">Operating System: VMware Photon OS/Linux</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPUs: 1</span><br><span class="line">Total Memory: 1.951GiB</span><br><span class="line">Name: photon-machine</span><br><span class="line">ID: N53E:2APV:XYZX:QFPE:GGZU:7567:XBFB:M4VQ:F5HZ:XPRK:W33H:QYMI</span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br><span class="line">Debug Mode (client): false</span><br><span class="line">Debug Mode (server): false</span><br><span class="line">Registry: https://index.docker.io/v1/</span><br><span class="line">Labels:</span><br><span class="line">Experimental: false</span><br><span class="line">Insecure Registries:</span><br><span class="line"> 127.0.0.0/8</span><br><span class="line">Live Restore Enabled: false</span><br></pre></td></tr></table></figure><h3 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h3><p>总体来讲，除了安装软件速度极慢之外，使用起来和普通的 Linux 发行版无多大差别，系统资源占用比传统的 Linux 发行版要低的多。即便是运行了 docker 进程后系统内存也仅仅占用 100 Mb 左右，而磁盘占用才 500MB 算是比较轻量化的。至于性能方面，目前我还是找不到可以测试对比的方案。</p><p>较传统的 Linux 发行版，精简了大量不必要的服务和软件，甚至连 tar 命令都没有……。如果把它当作 kubenetes 工作负载 Node 节点来使用，需要注意的是，kube-proxy 依赖的一些工具并没有安装上。我使用 kubeadm 将该节点加入到集群当中的时候就提示缺少以下几个工具： <code>ipset socat ethtool ebtables</code> ，这些对于 IPVS 都是需要的。最好使用 tdnf 一并安装上，并且开启相应的 IPVS 内核模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tdnf install ipset socat ethtool ebtables tar -y </span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack</span><br></pre></td></tr></table></figure><p>虽然经过了 3 个版本的更新迭代，但 Photon OS 用于生产环境还需要进行稳定性测试，它不如 CoreOS 那样已经在大规模集群中得到的实践，目前用 Photon OS 的企业我目前还未见到过。而 CoreOS </p><blockquote><p>“作为 Linux 以及开源软件的支持者，我们相信与 CoreOS  这样的开源社区创新先锋合作是非常重要的。我们希望通过这样的合作来为云平台用户带来更多、更灵活的选择。” 微软 Azure 的首席技术官 Mark Russinovich 提到， “CoreOS Linux  与高性能、大规模的微软云相结合，无疑将会促进各种应用服务的创新、以及全球团队的协作。”</p></blockquote><blockquote><p>“我们已经在上千台物理机上成功部署并运行了 CoreOS  Linux。无论从操作系统的安装、升级，还是从容器的管理和应用部署上，她给我们带来了前所未有的体验！对于光音网络这种飞速发展的互联网公司来说，CoreOS 为我们平台的建设提供了有力的技术保障！在使用 CoreOS 的这两年中，我们不再去担心操作系统、Docker 以及 Kubernetes  的兼容性、版本升级以及稳定性，这使得我们可以更专注于应用、业务层上的管理和研发。”  光音网络技术负责人王鹏说，“我们的平台不仅可以跑在自己的物理机上，而且还可以轻松地部署到 AWS 及阿里云上，CoreOS  在这方面功不可没。我们现在很高兴地得知 CoreOS 将强势登陆中国市场，我们对于更好的技术支持和服务无比期待！”</p><p>此处引用 CoreOS <a href="https://coreos.com/blog/coreos-linux-available-in-china.html" target="_blank" rel="noopener">官网博客</a></p></blockquote><p>CoreOS 的稳定性以及生产实践已经相当成熟了，那么接下来就介绍 CoreOS 的使用体验。</p><h2 id="CoreOS-Container-Linux-1"><a href="#CoreOS-Container-Linux-1" class="headerlink" title="CoreOS Container Linux"></a>CoreOS Container Linux</h2><p>CoreOS 使用用来创建一套大规模的集群环境，单独使用的意义并不大。而且对于我司的 VMware vSphere 并没有进行优化。所以就按照裸金属部署的方式来安装体验。</p><h3 id="官方文档-1"><a href="#官方文档-1" class="headerlink" title="官方文档"></a><a href="http://coreos.com/os/docs/latest/" target="_blank" rel="noopener">官方文档</a></h3><h4 id="Cloud-Providers"><a href="#Cloud-Providers" class="headerlink" title="Cloud Providers"></a>Cloud Providers</h4><p>适用于公有云</p><ul><li><a href="http://coreos.com/os/docs/latest/booting-on-ec2.html" target="_blank" rel="noopener">Amazon EC2</a></li><li><a href="http://coreos.com/os/docs/latest/booting-on-digitalocean.html" target="_blank" rel="noopener">DigitalOcean</a></li><li><a href="http://coreos.com/os/docs/latest/booting-on-google-compute-engine.html" target="_blank" rel="noopener">Google Compute Engine</a></li><li><a href="http://coreos.com/os/docs/latest/booting-on-azure.html" target="_blank" rel="noopener">Microsoft Azure</a><a href="http://coreos.com/os/docs/latest/booting-with-qemu.html" target="_blank" rel="noopener">QEMU</a></li></ul><h4 id="Bare-Metal"><a href="#Bare-Metal" class="headerlink" title="Bare Metal"></a>Bare Metal</h4><p>适用于物理机</p><ul><li><a href="http://coreos.com/matchbox/" target="_blank" rel="noopener">Using Matchbox</a></li><li><a href="http://coreos.com/os/docs/latest/booting-with-ipxe.html" target="_blank" rel="noopener">Booting with iPXE</a></li><li><a href="http://coreos.com/os/docs/latest/booting-with-pxe.html" target="_blank" rel="noopener">Booting with PXE</a></li><li><a href="http://coreos.com/os/docs/latest/installing-to-disk.html" target="_blank" rel="noopener">Installing to Disk</a></li><li><a href="http://coreos.com/os/docs/latest/booting-with-iso.html" target="_blank" rel="noopener">Booting from ISO</a></li><li><a href="http://coreos.com/os/docs/latest/root-filesystem-placement.html" target="_blank" rel="noopener">Root filesystem placement</a></li></ul><h4 id="Community-Platforms"><a href="#Community-Platforms" class="headerlink" title="Community Platforms"></a>Community Platforms</h4><p>社区提供支持的</p><p>These <a href="http://coreos.com/os/docs/latest/community-platforms.html" target="_blank" rel="noopener">platforms and providers</a> offer support and documentation for running Container Linux.</p><ul><li><a href="http://coreos.com/os/docs/latest/booting-on-cloudstack.html" target="_blank" rel="noopener">CloudStack</a></li><li><a href="http://coreos.com/os/docs/latest/booting-on-eucalyptus.html" target="_blank" rel="noopener">Eucalyptus</a></li><li><a href="http://coreos.com/os/docs/latest/booting-with-libvirt.html" target="_blank" rel="noopener">libvirt</a></li><li><a href="http://coreos.com/os/docs/latest/booting-on-openstack.html" target="_blank" rel="noopener">OpenStack</a></li><li><a href="http://coreos.com/os/docs/latest/booting-on-vagrant.html" target="_blank" rel="noopener">Vagrant</a></li><li><a href="http://coreos.com/os/docs/latest/booting-on-virtualbox.html" target="_blank" rel="noopener">VirtualBox</a></li><li><a href="http://coreos.com/os/docs/latest/booting-on-vmware.html" target="_blank" rel="noopener">VMware</a></li></ul><h3 id="安装镜像-OVA"><a href="#安装镜像-OVA" class="headerlink" title="安装镜像 OVA"></a>安装镜像 <a href="https://stable.release.core-os.net/amd64-usr/current/coreos_production_vmware_ova.ova" target="_blank" rel="noopener">OVA</a></h3><p>下载下来 OVA 虚拟机模板 <a href="https://stable.release.core-os.net/amd64-usr/current/coreos_production_vmware_ova.ova" target="_blank" rel="noopener">OVA</a></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>和 Photon OS 安装步骤一样，在 ESXi 上导入 OVA 虚拟机模板即可，不过需要在最后一步配置好 OS ，包括主机名、配置文件数配置文件 url、加密的配置文件等等，根据自身需求配好即可。可以参照官方<a href="https://coreos.com/os/docs/latest/clc-examples.html" target="_blank" rel="noopener">配置文件的文档</a> 。这一步是必须要做的，不然没有 ssh 公钥和密码你是无法登录到系统中的。</p><p>注意，官方给了两种配置文件合适，一个是 yaml 一个是 json ，不过在这里要使用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"ignition"</span>: &#123;</span><br><span class="line">    <span class="attr">"config"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"timeouts"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.1.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"networkd"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"passwd"</span>: &#123;</span><br><span class="line">    <span class="attr">"users"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"core"</span>,</span><br><span class="line">        <span class="attr">"passwordHash"</span>: <span class="string">"$6$43y3tkl..."</span>,</span><br><span class="line">        <span class="attr">"sshAuthorizedKeys"</span>: [</span><br><span class="line">          <span class="string">"key1"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"storage"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"systemd"</span>: &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>password_hash</code> 可以通过 openssl 命令来生成，把生成的一整串内容填写到上面，包括后面那个点<code>.</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─@debian ~</span><br><span class="line">╰─$ openssl passwd -1                                                                         </span><br><span class="line">Password:</span><br><span class="line">Verifying - Password:</span><br><span class="line"><span class="variable">$1</span><span class="variable">$nCzW8953</span><span class="variable">$un</span>/JUMJDE2588l7Y6KkP.</span><br></pre></td></tr></table></figure><ul><li><code>ssh_authorized_keys</code> 通过 ssh-keygen 生成，生成的公钥填写在上面。</li></ul><p>配置完成之后就把整个内容复制粘贴到第二个框框 <code>CoreOS config data</code> 里</p><h4 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h4><p><img src="../img/image-20191231125441199.png" alt="image-20191231125441199"></p><h3 id="系统启动-1"><a href="#系统启动-1" class="headerlink" title="系统启动"></a>系统启动</h3><p>可能是 coreos config 配置文件没有配好，而导致启动后输入设置的密码提示错误😥，僵硬，只能通过修改 grub 启动参数来跳过了。</p><ul><li>1.打开 CoreOS 虚拟机电源，并打开控制台。</li><li>2.当 Boot Loader 提示出现的时候，按下 e 键来编辑 GRUB 菜单。选择第一个 coreos default 编辑。</li><li>3.添加 <code>coreos.autologin</code> 作为启动参数，并 Ctrl-x 或 F10 重启。这将使控制台跳过登录提示并直接进入用户 core 的 shell。</li><li><img src="../img/image-20191231133509428.png" alt="image-20191231133509428"></li><li>启动进入系统之后输入 <code>sudo passwd</code> 来修改 root 密码。然后切换到 root 用户下 <code>passwd core</code> 修改 core 这个用户的密码。修改之后就可以通过 ssh 登录啦😂，比 Photon OS 要折腾一番呀。不过啊，使用 OVA 部署最好结合 could-init 来设置虚拟机的 ssh 密钥，网络，主机名等参数。</li></ul><h3 id="资源占用情况-1"><a href="#资源占用情况-1" class="headerlink" title="资源占用情况"></a>资源占用情况</h3><h5 id="内存-1"><a href="#内存-1" class="headerlink" title="内存"></a>内存</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">core@localhost ~ $ free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          961Mi       177Mi       398Mi       199Mi       385Mi       445Mi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><h4 id="磁盘-1"><a href="#磁盘-1" class="headerlink" title="磁盘"></a>磁盘</h4><p>CoreOS 的磁盘分区和 Photon OS 略有不同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">core@localhost ~ $ df -h</span><br><span class="line">Filesystem       Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs         460M     0  460M   0% /dev</span><br><span class="line">tmpfs            481M     0  481M   0% /dev/shm</span><br><span class="line">tmpfs            481M  484K  481M   1% /run</span><br><span class="line">tmpfs            481M     0  481M   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda9        6.0G   60M  5.6G   2% /</span><br><span class="line">/dev/mapper/usr  985M  854M   80M  92% /usr</span><br><span class="line">none             481M  200M  282M  42% /run/torcx/unpack</span><br><span class="line">tmpfs            481M     0  481M   0% /media</span><br><span class="line">tmpfs            481M     0  481M   0% /tmp</span><br><span class="line">/dev/sda6        108M  7.9M   92M   8% /usr/share/oem</span><br><span class="line">/dev/sda1        127M   54M   73M  43% /boot</span><br><span class="line">tmpfs             97M     0   97M   0% /run/user/500</span><br></pre></td></tr></table></figure><h3 id="内核以及发行版信息"><a href="#内核以及发行版信息" class="headerlink" title="内核以及发行版信息"></a>内核以及发行版信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Linux localhost 4.19.86-coreos <span class="comment">#1 SMP Mon Dec 2 20:13:38 -00 2019 x86_64 Intel(R) Core(TM) i5-4590 CPU @ 3.30GHz GenuineIntel GNU/Linux</span></span><br><span class="line"></span><br><span class="line">core@localhost ~ $ cat /etc/os-release</span><br><span class="line">NAME=<span class="string">"Container Linux by CoreOS"</span></span><br><span class="line">ID=coreos</span><br><span class="line">VERSION=2303.3.0</span><br><span class="line">VERSION_ID=2303.3.0</span><br><span class="line">BUILD_ID=2019-12-02-2049</span><br><span class="line">PRETTY_NAME=<span class="string">"Container Linux by CoreOS 2303.3.0 (Rhyolite)"</span></span><br><span class="line">ANSI_COLOR=<span class="string">"38;5;75"</span></span><br><span class="line">HOME_URL=<span class="string">"https://coreos.com/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://issues.coreos.com"</span></span><br><span class="line">COREOS_BOARD=<span class="string">"amd64-usr"</span></span><br></pre></td></tr></table></figure><h3 id="docker-容器引擎-1"><a href="#docker-容器引擎-1" class="headerlink" title="docker 容器引擎"></a>docker 容器引擎</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">core@localhost ~ $ docker info</span><br><span class="line">Containers: 0</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 0</span><br><span class="line">Server Version: 18.06.3-ce</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Supports d_type: true</span><br><span class="line"> Native Overlay Diff: true</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: local</span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line"> Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: runc</span><br><span class="line">Default Runtime: runc</span><br><span class="line">Init Binary: docker-init</span><br><span class="line">containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e</span><br><span class="line">runc version: a592beb5bc4c4092b1b1bac971afed27687340c5</span><br><span class="line">init version: fec3683b971d9c3ef73f284f176672c44b448662</span><br><span class="line">Security Options:</span><br><span class="line"> seccomp</span><br><span class="line">  Profile: default</span><br><span class="line"> selinux</span><br><span class="line">Kernel Version: 4.19.86-coreos</span><br><span class="line">Operating System: Container Linux by CoreOS 2303.3.0 (Rhyolite)</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPUs: 2</span><br><span class="line">Total Memory: 961.7MiB</span><br><span class="line">Name: localhost</span><br><span class="line">ID: VUKA:LDLW:WECP:IZKO:A6ED:IKIN:6C3V:VRIL:S4ND:SCII:66EH:GDYP</span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br><span class="line">Debug Mode (client): false</span><br><span class="line">Debug Mode (server): false</span><br><span class="line">Registry: https://index.docker.io/v1/</span><br><span class="line">Labels:</span><br><span class="line">Experimental: false</span><br><span class="line">Insecure Registries:</span><br><span class="line"> 127.0.0.0/8</span><br><span class="line">Live Restore Enabled: false</span><br></pre></td></tr></table></figure><h3 id="负载-1"><a href="#负载-1" class="headerlink" title="负载"></a>负载</h3><p><img src="../img/image-20191231135348120.png" alt="image-20191231135348120"></p><h3 id="进程和服务-1"><a href="#进程和服务-1" class="headerlink" title="进程和服务"></a>进程和服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">● localhost</span><br><span class="line">    State: running</span><br><span class="line">     Jobs: 0 queued</span><br><span class="line">   Failed: 0 units</span><br><span class="line">    Since: Tue 2019-12-31 13:38:05 UTC; 7h left</span><br><span class="line">   CGroup: /</span><br><span class="line">           ├─user.slice</span><br><span class="line">           │ └─user-500.slice</span><br><span class="line">           │   ├─user@500.service</span><br><span class="line">           │   │ └─init.scope</span><br><span class="line">           │   │   ├─725 /usr/lib/systemd/systemd --user</span><br><span class="line">           │   │   └─726 (sd-pam)</span><br><span class="line">           │   ├─session-2.scope</span><br><span class="line">           │   │ ├─768 sshd: core [priv]</span><br><span class="line">           │   │ ├─781 sshd: core@pts/0</span><br><span class="line">           │   │ ├─782 -bash</span><br><span class="line">           │   │ └─978 systemctl status</span><br><span class="line">           │   └─session-1.scope</span><br><span class="line">           │     ├─713 /bin/login -f</span><br><span class="line">           │     ├─731 -bash</span><br><span class="line">           │     ├─762 su</span><br><span class="line">           │     ├─763 bash</span><br><span class="line">           │     ├─770 su core</span><br><span class="line">           │     ├─771 bash</span><br><span class="line">           │     ├─775 su</span><br><span class="line">           │     └─776 bash</span><br><span class="line">           ├─init.scope</span><br><span class="line">           │ └─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 16</span><br><span class="line">           └─system.slice</span><br><span class="line">             ├─locksmithd.service</span><br><span class="line">             │ └─718 /usr/lib/locksmith/locksmithd</span><br><span class="line">             ├─containerd.service</span><br><span class="line">             │ └─800 /run/torcx/bin/containerd --config /run/torcx/unpack/docker/usr/share/containerd/config.toml</span><br><span class="line">             ├─systemd-networkd.service</span><br><span class="line">             │ └─584 /usr/lib/systemd/systemd-networkd</span><br><span class="line">             ├─systemd-udevd.service</span><br><span class="line">             │ └─583 /usr/lib/systemd/systemd-udevd</span><br><span class="line">             ├─docker.service</span><br><span class="line">             │ └─802 /run/torcx/bin/dockerd --host=fd:// --containerd=/var/run/docker/libcontainerd/docker-containerd.sock --selinux-enabled=<span class="literal">true</span></span><br><span class="line">             ├─update-engine.service</span><br><span class="line">             │ └─663 /usr/sbin/update_engine -foreground -logtostderr</span><br><span class="line">             ├─systemd-journald.service</span><br><span class="line">             │ └─553 /usr/lib/systemd/systemd-journald</span><br><span class="line">             ├─systemd-resolved.service</span><br><span class="line">             │ └─635 /usr/lib/systemd/systemd-resolved</span><br><span class="line">             ├─dbus.service</span><br><span class="line">             │ └─674 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation</span><br><span class="line">             ├─systemd-timesyncd.service</span><br><span class="line">             │ └─634 /usr/lib/systemd/systemd-timesyncd</span><br><span class="line">             └─systemd-logind.service</span><br><span class="line">               └─672 /usr/lib/systemd/systemd-logind</span><br></pre></td></tr></table></figure><h3 id="包管理工具-1"><a href="#包管理工具-1" class="headerlink" title="包管理工具"></a>包管理工具</h3><p><strong>没得😂</strong>，你没看错，确实如此，在 CoreOS 上没有你可以用的包管理器，不像 PhotonOS 那样有个 tdnf/yum 让你爽一把😂。在 CoreOS 一切皆容器。可以看一下 <code>stackexchange.com</code> 这个答案😂：</p><blockquote><p>To do this on a CoreOS box, following the hints from the <a href="https://coreos.com/os/docs/latest/install-debugging-tools.html" target="_blank" rel="noopener">guide here</a>:</p><ol><li>Boot up the CoreOS box and connect as the <code>core</code> user</li><li>Run the <code>/bin/toolbox</code> command to enter the stock Fedora container.</li><li>Install any software you need. To install nano in this case, it would be as simple as doing a <code>dnf -y install nano</code> (dnf has replaced yum)</li><li>Use nano to edit files. “But wait – I’m in a container!” Don’t worry – the host’s file system is mounted at <code>/media/root</code> when inside the container. So just save a sample text file at <code>/media/root/home/core/test.txt</code>, then <code>exit</code> the container, and finally go list the files in <code>/home/core</code>. Notice your test.txt file?</li></ol><p>If any part of this is too cryptic or confusing, please ask follow up questions. :-)</p></blockquote><p>官方推荐使用 <a href="https://github.com/coreos" target="_blank" rel="noopener">coreos</a>/<strong><a href="https://github.com/coreos/toolbox" target="_blank" rel="noopener">toolbox</a></strong> 来安装所需要的软件，这个工具以后再详细讲解一下吧。</p><h3 id="使用体验-1"><a href="#使用体验-1" class="headerlink" title="使用体验"></a>使用体验</h3><p>安装过程要出于安全考虑比 Photon OS 多于个步骤来登录到系统，目前我还没有找到启动的时候添加 ssh 密钥的办法。总的来讲，再 CoreOS 里一切皆容器运行所需要的服务，这种里面要先进的多。下面的 RancherOS 更是将一切皆容器贯彻到底，甚至将 systemd 取代掉，使用 docker 来管理系统服务。</p><h2 id="RancherOS-1"><a href="#RancherOS-1" class="headerlink" title="RancherOS"></a>RancherOS</h2><p>目前 RancherOS 的版本是 v1.5.5</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Linux 4.14.138</span><br><span class="line">Buildroot: 2018.02.11</span><br><span class="line">Docker docker-19.03.5 by default</span><br><span class="line">RPi64: Linux 4.14.114</span><br><span class="line">Console:</span><br><span class="line">Alpine: 3.10</span><br><span class="line">CentOS: 7.7.1908</span><br><span class="line">Debian: stretch</span><br><span class="line">Fedora: 31</span><br><span class="line">Ubuntu: bionic</span><br></pre></td></tr></table></figure><h3 id="官方文档-2"><a href="#官方文档-2" class="headerlink" title="官方文档"></a><a href="https://rancher.com/docs/os/v1.x/en/" target="_blank" rel="noopener">官方文档</a></h3><p><a href="https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/" target="_blank" rel="noopener">安装文档</a></p><h4 id="Cloud-云平台"><a href="#Cloud-云平台" class="headerlink" title="Cloud 云平台"></a>Cloud 云平台</h4><p><a href="https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/cloud/aws" target="_blank" rel="noopener">Amazon EC2</a></p><p><a href="https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/cloud/gce" target="_blank" rel="noopener">Google Compute Engine</a></p><p><a href="https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/cloud/do" target="_blank" rel="noopener">DigitalOcean</a></p><p><a href="https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/cloud/azure" target="_blank" rel="noopener">Azure</a></p><p><a href="https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/cloud/openstack" target="_blank" rel="noopener">OpenStack</a></p><p><a href="https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/cloud/vmware-esxi" target="_blank" rel="noopener">VMware ESXi</a></p><p><a href="https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/cloud/aliyun" target="_blank" rel="noopener">Aliyun</a></p><h4 id="Bare-Metal-amp-Virtual-Servers-裸金属"><a href="#Bare-Metal-amp-Virtual-Servers-裸金属" class="headerlink" title="Bare Metal &amp; Virtual Servers 裸金属"></a>Bare Metal &amp; Virtual Servers 裸金属</h4><p><a href="https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/server/pxe" target="_blank" rel="noopener">PXE</a></p><p><a href="https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/server/install-to-disk" target="_blank" rel="noopener">Install to Hard Disk</a></p><p><a href="https://rancher.com/docs/os/v1.x/en/installation/running-rancheros/server/raspberry-pi" target="_blank" rel="noopener">Raspberry Pi</a></p><h3 id="安装镜像-1"><a href="#安装镜像-1" class="headerlink" title="安装镜像"></a><a href="https://github.com/rancher/os/releases/" target="_blank" rel="noopener">安装镜像</a></h3><p>RancherOS 将各个平台的安装镜像都放在了 GitHub <a href="https://github.com/rancher/os/releases/" target="_blank" rel="noopener">release</a> 页面上。对于 VMware 用户就使用 <a href="https://github.com/rancher/os/releases/download/v1.5.5/rancheros-vmware.iso" target="_blank" rel="noopener">rancheros-vmware.iso</a> 这个镜像即可。没得 OVA 虚拟机模板只能手动搓一个啦。下载完成之后将这个镜像上传到 vSphere 的数据存储中，按照创建常规虚拟机的方式来创建虚拟机。</p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p><img src="../img/image-20191231142454934.png" alt="image-20191231142454934"></p><p>使用 ISO 启动之后进入得是一个 liveCD 型得系统，并没有安装虚拟机得磁盘当中，我们需要将 RancherOS 安装到磁盘上。提前准备好 cloud-init 的配置文件，只需要执行 <code>ros install -c cloud-config.yml -d /dev/sda</code> 命令就行啦。-d 参数后面跟着安装到的磁盘。</p><p>不过需要像 CoreOS 那样准备给一个 <code>cloud-config.yml</code> 配置文件，将我们得 ssh 公钥和用户密码填写到里面，不过 <code>cloud-config</code> 能配置得选项非常多，在此就不赘述了，等抽空专门写一篇博客来讲讲 cloud-init 的使用。（又挖坑😂，不知何时能填上🙃</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@rancher rancher]<span class="comment"># ros install -c cloud-config.yml -d /dev/sda</span></span><br><span class="line">INFO[0000] No install <span class="built_in">type</span> specified...defaulting to generic</span><br><span class="line">Installing from rancher/os:v1.5.5</span><br><span class="line">Continue [y/N]: y</span><br><span class="line">INFO[0002] start !isoinstallerloaded</span><br><span class="line">INFO[0002] trying to load /bootiso/rancheros/installer.tar.gz</span><br><span class="line">69b8396f5d61: Loading layer [==================================================&gt;]  11.89MB/11.89MB</span><br><span class="line">cae31a9aae74: Loading layer [==================================================&gt;]  1.645MB/1.645MB</span><br><span class="line">78885fd6d98c: Loading layer [==================================================&gt;]  1.536kB/1.536kB</span><br><span class="line">51228f31b9ce: Loading layer [==================================================&gt;]   2.56kB/2.56kB</span><br><span class="line">d8162179e708: Loading layer [==================================================&gt;]   2.56kB/2.56kB</span><br><span class="line">3ee208751cd2: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">Loaded image: rancher/os-installer:latest</span><br><span class="line">INFO[0002] Loaded images from /bootiso/rancheros/installer.tar.gz</span><br><span class="line">INFO[0002] starting installer container <span class="keyword">for</span> rancher/os-installer:latest (new)</span><br><span class="line">Installing from rancher/os-installer:latest</span><br><span class="line">mke2fs 1.45.2 (27-May-2019)</span><br><span class="line">64-bit filesystem support is not enabled.  The larger fields afforded by this feature <span class="built_in">enable</span> full-strength checksumming.  Pass -O 64bit to rectify.</span><br><span class="line">Creating filesystem with 7863808 4k blocks and 7864320 inodes</span><br><span class="line">Filesystem UUID: fe29cb27-b4ac-4c75-a12d-895ea7e52af9</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,</span><br><span class="line">        4096000</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span></span><br><span class="line">Writing inode tables: <span class="keyword">done</span></span><br><span class="line">Creating journal (32768 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">Continue with reboot [y/N]:y</span><br><span class="line">INFO[0288] Rebooting</span><br><span class="line">INFO[0288] Setting reboot timeout to 60 (rancher.shutdown_timeout <span class="built_in">set</span> to 60)</span><br><span class="line">....^[            ] reboot:info: Setting reboot timeout to 60 (rancher.shutdown_timeout <span class="built_in">set</span> to 60)</span><br><span class="line">.=.[            ] reboot:info: Stopping /docker : 3d39a73e4089</span><br><span class="line">...........M..........[            ] reboot:info: Stopping /open-vm-tools : ccd97f8a7775</span><br><span class="line">:.[            ] reboot:info: Stopping /ntp : acf47c78a711</span><br><span class="line">.&gt;.[            ] reboot:info: Stopping /network : 08be8ef68e27</span><br><span class="line">..&lt;..[            ] reboot:info: Stopping /udev : 4986cd58a227</span><br><span class="line">.=.[            ] reboot:info: Stopping /syslog : 254137c5e66a</span><br><span class="line">.&lt;.[            ] reboot:info: Stopping /acpid : a2ededff859c</span><br><span class="line">..C..[            ] reboot:info: Stopping /system-cron : 899028a78e3a</span><br><span class="line">..H.[            ] reboot:info: Console Stopping [/console] : 6fc9ef66b43c</span><br><span class="line">Connection to 10.20.172.119 closed by remote host.</span><br><span class="line">Connection to 10.20.172.119 closed.</span><br></pre></td></tr></table></figure><h3 id="内核以及发行版信息-1"><a href="#内核以及发行版信息-1" class="headerlink" title="内核以及发行版信息"></a>内核以及发行版信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@rancher rancher]<span class="comment"># uname -a</span></span><br><span class="line">Linux rancher 4.14.138-rancher <span class="comment">#1 SMP Sat Aug 10 11:25:46 UTC 2019 x86_64 GNU/Linux</span></span><br><span class="line">[root@rancher rancher]<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">"RancherOS"</span></span><br><span class="line">VERSION=v1.5.5</span><br><span class="line">ID=rancheros</span><br><span class="line">ID_LIKE=</span><br><span class="line">VERSION_ID=v1.5.5</span><br><span class="line">PRETTY_NAME=<span class="string">"RancherOS v1.5.5"</span></span><br><span class="line">HOME_URL=<span class="string">"http://rancher.com/rancher-os/"</span></span><br><span class="line">SUPPORT_URL=<span class="string">"https://forums.rancher.com/c/rancher-os"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://github.com/rancher/os/issues"</span></span><br><span class="line">BUILD_ID=</span><br></pre></td></tr></table></figure><h3 id="docker-容器引擎-2"><a href="#docker-容器引擎-2" class="headerlink" title="docker 容器引擎"></a>docker 容器引擎</h3><p>在 RancherOS 中有两套 docker ，一套是用来容器化运行系统服务的，包括用户空间的 docker ，而另一套 docker 就是用户空间的 docker</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[root@rancher rancher]</span><span class="comment"># docker info</span></span><br><span class="line">Client:</span><br><span class="line"> Debug Mode: false</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 0</span><br><span class="line">  Running: 0</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 0</span><br><span class="line"> Images: 0</span><br><span class="line"> Server Version: 19.03.5</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: tmpfs</span><br><span class="line">  Supports d_type: true</span><br><span class="line">  Native Overlay Diff: true</span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: local</span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339</span><br><span class="line"> runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657</span><br><span class="line"> init version: fec3683</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 4.14.138-rancher</span><br><span class="line"> Operating System: RancherOS v1.5.5</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: x86_64</span><br><span class="line"> CPUs: 4</span><br><span class="line"> Total Memory: 3.855GiB</span><br><span class="line"> Name: rancher</span><br><span class="line"> ID: 2256:3I2G:WFHC:ZRTL:CKG6:GXD6:3RDL:645J:CD4J:GKJ7:55SG:U32I</span><br><span class="line"> Docker Root Dir: /var/lib/docker</span><br><span class="line"> Debug Mode: false</span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: false</span><br><span class="line"> Insecure Registries:</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Live Restore Enabled: false</span><br><span class="line"> Product License: Community Engine</span><br></pre></td></tr></table></figure><h3 id="rancher-引擎"><a href="#rancher-引擎" class="headerlink" title="rancher 引擎"></a>rancher 引擎</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@rancher rancher]<span class="comment"># du -sh /var/lib/rancher/engine/*</span></span><br><span class="line">116.0K  /var/lib/rancher/engine/completion</span><br><span class="line">33.0M   /var/lib/rancher/engine/containerd</span><br><span class="line">5.8M    /var/lib/rancher/engine/containerd-shim</span><br><span class="line">18.0M   /var/lib/rancher/engine/ctr</span><br><span class="line">62.6M   /var/lib/rancher/engine/docker</span><br><span class="line">748.0K  /var/lib/rancher/engine/docker-init</span><br><span class="line">2.7M    /var/lib/rancher/engine/docker-proxy</span><br><span class="line">68.8M   /var/lib/rancher/engine/dockerd</span><br><span class="line">8.3M    /var/lib/rancher/engine/runc</span><br></pre></td></tr></table></figure><h3 id="资源占用"><a href="#资源占用" class="headerlink" title="资源占用"></a>资源占用</h3><h4 id="负载-2"><a href="#负载-2" class="headerlink" title="负载"></a>负载</h4><ul><li>可以看出 RancherOS 运行着大量的 <code>system-docker-containerd-shim</code> 这是因为它将系服务也都容器化来运行，但奇怪的是无法使用 docker 命令来管理这些服务。</li></ul><p><img src="../img/image-20191231143958024.png" alt="image-20191231143958024"></p><h4 id="内存-2"><a href="#内存-2" class="headerlink" title="内存"></a>内存</h4><ul><li>初始化启动后内存使用了 1224MB😂，要比 CoreOS 和 Photon OS 加起来还多😂</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[rancher@rancher ~]$ free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          3947       1224       2722        993          0        993</span><br><span class="line">-/+ buffers/cache:        231       3715</span><br><span class="line">Swap:            0          0          0</span><br></pre></td></tr></table></figure><h4 id="磁盘-2"><a href="#磁盘-2" class="headerlink" title="磁盘"></a>磁盘</h4><p>由于系统服务是以容器的方式来运行的，而容器内的进程要访问系统文件系统的话就要将这些文件挂载到容器里去，所以会出现这么多的分区情况，不过绝大多数都是容器挂载的数据卷。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@rancher rancher]<span class="comment"># df -h</span></span><br><span class="line">Filesystem                Size      Used Available Use% Mounted on</span><br><span class="line">overlay                  28.0G      1.0G     25.5G   4% /</span><br><span class="line">tmpfs                     1.9G         0      1.9G   0% /dev</span><br><span class="line">tmpfs                     1.9G         0      1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /media</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /opt</span><br><span class="line">none                      1.9G    944.0K      1.9G   0% /run</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /mnt</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /home</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /etc/resolv.conf</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /etc/logrotate.d</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /usr/lib/firmware</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /usr/sbin/iptables</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /etc/docker</span><br><span class="line">none                      1.9G    944.0K      1.9G   0% /var/run</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /var/<span class="built_in">log</span></span><br><span class="line">devtmpfs                  1.9G         0      1.9G   0% /host/dev</span><br><span class="line">shm                      64.0M         0     64.0M   0% /host/dev/shm</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /etc/selinux</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /etc/hosts</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /usr/lib/modules</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /etc/hostname</span><br><span class="line">shm                      64.0M         0     64.0M   0% /dev/shm</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /usr/bin/system-docker</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /var/lib/boot2docker</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /usr/share/ros</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /var/lib/m-user-docker</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /var/lib/waagent</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /var/lib/docker</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /var/lib/kubelet</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /var/lib/rancher</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /usr/bin/ros</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /usr/bin/system-docker-runc</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /etc/ssl/certs/ca-certificates.crt.rancher</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /var/lib/rancher/cache</span><br><span class="line">/dev/sda1                28.0G      1.0G     25.5G   4% /var/lib/rancher/conf</span><br><span class="line">devtmpfs                  1.9G         0      1.9G   0% /dev</span><br><span class="line">shm                      64.0M         0     64.0M   0% /dev/shm</span><br></pre></td></tr></table></figure><h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@rancher rancher]<span class="comment"># mount</span></span><br><span class="line">overlay on / <span class="built_in">type</span> overlay (rw,relatime,lowerdir=/var/lib/system-docker/overlay2/l/TBWLXSEPWSCBGMNSU37HJXNRO3:/var/lib/system-docker/overlay2/l/DWK2WF5FKFYZTH74WUBGHTRF4V:/var/lib/system-docker/overlay2/l/HDUW6LV2DFEIJPW3IA33YTCNWX:/var/lib/system-docker/overlay2/l/ZDK3KMGDSN5O33AR6XJJF27NFO:/var/lib/system-docker/overlay2/l/TSWFV744M2LUOSPV2N6QHON4NP:/var/lib/system-docker/overlay2/l/QZ3U27554L5LKMJDYP3DC356L7:/var/lib/system-docker/overlay2/l/D6LSXZS2UGAZ7NMKQJKMQVT24P:/var/lib/system-docker/overlay2/l/KHB3OKMEQIL2P34QMHYF3HWTLT,upperdir=/var/lib/system-docker/overlay2/fc79b6b6cf5c6d0b34b5abb95a1a19d765c1a00d66d0cff1ef3778d109471522/diff,workdir=/var/lib/system-docker/overlay2/fc79b6b6cf5c6d0b34b5abb95a1a19d765c1a00d66d0cff1ef3778d109471522/work)</span><br><span class="line">proc on /proc <span class="built_in">type</span> proc (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line">tmpfs on /dev <span class="built_in">type</span> tmpfs (rw,nosuid,mode=755)</span><br><span class="line">devpts on /dev/pts <span class="built_in">type</span> devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)</span><br><span class="line">sysfs on /sys <span class="built_in">type</span> sysfs (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line">tmpfs on /sys/fs/cgroup <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,noexec,relatime,mode=755)</span><br><span class="line">none on /sys/fs/cgroup/freezer <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,freezer)</span><br><span class="line">none on /sys/fs/cgroup/devices <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,devices)</span><br><span class="line">none on /sys/fs/cgroup/net_cls,net_prio <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,net_cls,net_prio)</span><br><span class="line">none on /sys/fs/cgroup/perf_event <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)</span><br><span class="line">none on /sys/fs/cgroup/hugetlb <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)</span><br><span class="line">none on /sys/fs/cgroup/cpuset <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)</span><br><span class="line">none on /sys/fs/cgroup/cpu,cpuacct <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,cpu,cpuacct)</span><br><span class="line">none on /sys/fs/cgroup/blkio <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,blkio)</span><br><span class="line">none on /sys/fs/cgroup/memory <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,memory)</span><br><span class="line">none on /sys/fs/cgroup/pids <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,pids)</span><br><span class="line">mqueue on /dev/mqueue <span class="built_in">type</span> mqueue (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line">/dev/sda1 on /media <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /opt <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">none on /run <span class="built_in">type</span> tmpfs (rw,relatime)</span><br><span class="line">nsfs on /run/docker/netns/default <span class="built_in">type</span> nsfs (rw)</span><br><span class="line">nsfs on /run/system-docker/netns/default <span class="built_in">type</span> nsfs (rw)</span><br><span class="line">nsfs on /run/system-docker/netns/d15f3e062bb6 <span class="built_in">type</span> nsfs (rw)</span><br><span class="line">/dev/sda1 on /mnt <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /home <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /etc/resolv.conf <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /etc/logrotate.d <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /usr/lib/firmware <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /usr/sbin/iptables <span class="built_in">type</span> ext4 (ro,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /etc/docker <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">none on /var/run <span class="built_in">type</span> tmpfs (rw,relatime)</span><br><span class="line">nsfs on /var/run/docker/netns/default <span class="built_in">type</span> nsfs (rw)</span><br><span class="line">nsfs on /var/run/system-docker/netns/default <span class="built_in">type</span> nsfs (rw)</span><br><span class="line">nsfs on /var/run/system-docker/netns/d15f3e062bb6 <span class="built_in">type</span> nsfs (rw)</span><br><span class="line">/dev/sda1 on /var/<span class="built_in">log</span> <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">devtmpfs on /host/dev <span class="built_in">type</span> devtmpfs (rw,relatime,size=1949420k,nr_inodes=487355,mode=755)</span><br><span class="line">none on /host/dev/pts <span class="built_in">type</span> devpts (rw,relatime,mode=600,ptmxmode=000)</span><br><span class="line">shm on /host/dev/shm <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,noexec,relatime,size=65536k)</span><br><span class="line">mqueue on /host/dev/mqueue <span class="built_in">type</span> mqueue (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line">/dev/sda1 on /etc/selinux <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /etc/hosts <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /usr/lib/modules <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /etc/hostname <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">shm on /dev/shm <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,noexec,relatime,size=65536k)</span><br><span class="line">/dev/sda1 on /usr/bin/system-docker <span class="built_in">type</span> ext4 (ro,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /var/lib/boot2docker <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /usr/share/ros <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /var/lib/m-user-docker <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /var/lib/waagent <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /var/lib/docker <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /var/lib/kubelet <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /var/lib/rancher <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /usr/bin/ros <span class="built_in">type</span> ext4 (ro,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /usr/bin/system-docker-runc <span class="built_in">type</span> ext4 (ro,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /etc/ssl/certs/ca-certificates.crt.rancher <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /var/lib/rancher/cache <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">/dev/sda1 on /var/lib/rancher/conf <span class="built_in">type</span> ext4 (rw,relatime,data=ordered)</span><br><span class="line">devtmpfs on /dev <span class="built_in">type</span> devtmpfs (rw,relatime,size=1949420k,nr_inodes=487355,mode=755)</span><br><span class="line">none on /dev/pts <span class="built_in">type</span> devpts (rw,relatime,mode=600,ptmxmode=000)</span><br><span class="line">shm on /dev/shm <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,noexec,relatime,size=65536k)</span><br><span class="line">mqueue on /dev/mqueue <span class="built_in">type</span> mqueue (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line">cgroup on /sys/fs/cgroup/systemd <span class="built_in">type</span> cgroup (rw,relatime,name=systemd)</span><br><span class="line">none on /sys/fs/selinux <span class="built_in">type</span> selinuxfs (ro,relatime)</span><br></pre></td></tr></table></figure><h3 id="系统服务容器化"><a href="#系统服务容器化" class="headerlink" title="系统服务容器化"></a>系统服务容器化</h3><p>通过 top 命令和 ps 命令查看系统运行的进程可以发现以下几个重要的进程</p><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">PID  PPID USER     STAT   VSZ %VSZ %CPU COMMAND</span><br><span class="line">1695  1620 root     S     558m  14%   0% containerd --config /var/run/docker/containerd/containerd.toml --<span class="built_in">log</span>-level info</span><br><span class="line">1988  1922 root     S    11420   0%   0% top</span><br><span class="line">   1     0 root     S    1287m  32%   0% system-dockerd --storage-driver overlay2 --graph /var/lib/system-docker --config-file /etc/docker/system-docker.json --restart=<span class="literal">false</span> --group root --userland-proxy=<span class="literal">false</span> --bip 172.18.42.1/16 --<span class="built_in">log</span>-opt max-file=2 --<span class="built_in">log</span>-opt max-size</span><br><span class="line"> 489     1 root     S     833m  21%   0% system-docker-containerd -l unix:///var/run/system-docker/libcontainerd/system-docker-containerd.sock --metrics-interval=0 --start-timeout 2m --state-dir /var/run/system-docker/libcontainerd/containerd --shim system-docker-contai</span><br><span class="line">1370  1353 root     S     808m  20%   0% respawn -f /etc/respawn.conf</span><br><span class="line">1620  1415 root     S     658m  16%   0% dockerd --group docker --host unix:///var/run/docker.sock --<span class="built_in">log</span>-opt max-file=2 --<span class="built_in">log</span>-opt max-size=25m</span><br><span class="line">1398   489 root     S     472m  12%   0% system-docker-containerd-shim 3d39a73e4089dcbdd144277adb398d3e0d8ba62812a699be7cfeac9598539f6e /var/run/system-docker/libcontainerd/3d39a73e4089dcbdd144277adb398d3e0d8ba62812a699be7cfeac9598539f6e system-docker-runc</span><br><span class="line">1285   489 root     S     470m  12%   0% system-docker-containerd-shim 254137c5e66a7075c2104cca82fa2e6584509170688064fac1147fbfcda2f5c0 /var/run/system-docker/libcontainerd/254137c5e66a7075c2104cca82fa2e6584509170688064fac1147fbfcda2f5c0 system-docker-runc</span><br><span class="line">1588  1370 root     S     452m  11%   0% /usr/bin/autologin rancher:tty1</span><br><span class="line">1013   995 root     S     452m  11%   0% netconf</span><br><span class="line">1151   489 root     S     406m  10%   0% system-docker-containerd-shim ccd97f8a77756dcc4ae21c935dcaf35aa8f02399e9ca87811a5f4ec1d5d6d1a3 /var/run/system-docker/libcontainerd/ccd97f8a77756dcc4ae21c935dcaf35aa8f02399e9ca87811a5f4ec1d5d6d1a3 system-docker-runc</span><br><span class="line"> 995   489 root     S     398m  10%   0% system-docker-containerd-shim 08be8ef68e27d7e3b8f9d2a62914f9b581545ed96d65a751b487e7814f2bc795 /var/run/system-docker/libcontainerd/08be8ef68e27d7e3b8f9d2a62914f9b581545ed96d65a751b487e7814f2bc795 system-docker-runc</span><br><span class="line"> 784   489 root     S     335m   8%   0% system-docker-containerd-shim 899028a78e3a3baa42ad1e3042d49f23e9fe2d6cce8b824850aaca4270d681fd /var/run/system-docker/libcontainerd/899028a78e3a3baa42ad1e3042d49f23e9fe2d6cce8b824850aaca4270d681fd system-docker-runc</span><br><span class="line"> 803   489 root     S     335m   8%   0% system-docker-containerd-shim a2ededff859cc3d7c1a6342eb5d92606d4da605433d03abc92cc5f6503d53c6f /var/run/system-docker/libcontainerd/a2ededff859cc3d7c1a6342eb5d92606d4da605433d03abc92cc5f6503d53c6f system-docker-runc</span><br><span class="line">1076   489 root     S     334m   8%   0% system-docker-containerd-shim acf47c78a71194f1ef094302846855c777ef84fe613eb1ac1cc5f7ac868d618c /var/run/system-docker/libcontainerd/acf47c78a71194f1ef094302846855c777ef84fe613eb1ac1cc5f7ac868d618c system-docker-runc</span><br><span class="line"> 956   489 root     S     280m   7%   0% system-docker-containerd-shim 4986cd58a227547af8e4867da067cf9f066062536268bf025466f88b4b38d9c3 /var/run/system-docker/libcontainerd/4986cd58a227547af8e4867da067cf9f066062536268bf025466f88b4b38d9c3 system-docker-runc</span><br><span class="line">1353   489 root     S     270m   7%   0% system-docker-containerd-shim 6fc9ef66b43c9902e23cea7cfdd78b8b5842df2b981d8d7899eacb3b063294fd /var/run/system-docker/libcontainerd/6fc9ef66b43c9902e23cea7cfdd78b8b5842df2b981d8d7899eacb3b063294fd system-docker-runc</span><br><span class="line">1311  1285 root     S     238m   6%   0% rsyslogd -n</span><br><span class="line">1168  1151 root     S     146m   4%   0% /usr/bin/vmtoolsd</span><br><span class="line">1415  1398 root     S     122m   3%   0% system-docker-runc <span class="built_in">exec</span> -- 6fc9ef66b43c9902e23cea7cfdd78b8b5842df2b981d8d7899eacb3b063294fd env PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin HOSTNAME=rancher HOME=/ ros docker-init --group docker --host unix:</span><br><span class="line"> 907   784 root     S     109m   3%   0% container-crontab</span><br><span class="line">1105  1076 root     S    94084   2%   0% ntpd --nofork -g</span><br><span class="line"> 973   956 root     S    22544   1%   0% udevd</span><br><span class="line">1890  1888 rancher  S    22448   1%   0% sshd: rancher@pts/0</span><br><span class="line">1586  1370 root     S    22096   1%   0% /usr/sbin/sshd -D</span><br><span class="line">1888  1586 root     S    22096   1%   0% sshd: rancher [priv]</span><br><span class="line">1989  1586 root     S    22096   1%   0% sshd: rancher [priv]</span><br><span class="line">1991  1989 rancher  S    22096   1%   0% sshd: rancher@pts/1</span><br><span class="line">1922  1891 root     S    16244   0%   0% bash</span><br><span class="line">1641  1588 rancher  S    16116   0%   0% -bash</span><br><span class="line">1885  1641 root     S    16116   0%   0% bash</span><br><span class="line">1891  1890 rancher  S    16116   0%   0% -bash</span><br><span class="line">1992  1991 rancher  S    16116   0%   0% -bash</span><br><span class="line">1997  1992 rancher  R    11420   0%   0% top</span><br><span class="line">1589  1370 root     S     6404   0%   0% /sbin/agetty --noclear tty2 linux</span><br><span class="line">1591  1370 root     S     6404   0%   0% /sbin/agetty --noclear tty3 linux</span><br><span class="line">1592  1370 root     S     6404   0%   0% /sbin/agetty --noclear tty4 linux</span><br><span class="line">1594  1370 root     S     6404   0%   0% /sbin/agetty --noclear tty5 linux</span><br><span class="line">1595  1370 root     S     6404   0%   0% /sbin/agetty --noclear tty6 linux</span><br><span class="line">1112   995 root     S     4660   0%   0% dhcpcd -MA4 -e force_hostname=<span class="literal">true</span> --timeout 10 -w --debug eth0</span><br><span class="line"> 850   803 root     S     4276   0%   0% /usr/sbin/acpid -f</span><br><span class="line"> 477     1 root     Z        0   0%   0% [ros]</span><br><span class="line">  49     2 root     IW       0   0%   0% [kworker/1:1]</span><br><span class="line">   8     2 root     IW       0   0%   0% [rcu_sched]</span><br><span class="line">  33     2 root     IW       0   0%   0% [kworker/0:1]</span><br><span class="line">   7     2 root     SW       0   0%   0% [ksoftirqd/0]</span><br><span class="line">  39     2 root     SWN      0   0%   0% [khugepaged]</span><br><span class="line">1317     2 root     IW       0   0%   0% [kworker/3:2]</span><br><span class="line">  48     2 root     IW       0   0%   0% [kworker/u8:1]</span><br><span class="line">  76     2 root     SW       0   0%   0% [scsi_eh_1]</span><br><span class="line">1244     2 root     IW       0   0%   0% [kworker/2:2]</span><br><span class="line">   2     0 root     SW       0   0%   0% [kthreadd]</span><br><span class="line">   4     2 root     IW&lt;      0   0%   0% [kworker/0:0H]</span><br><span class="line">   6     2 root     IW&lt;      0   0%   0% [mm_percpu_wq]</span><br><span class="line">   9     2 root     IW       0   0%   0% [rcu_bh]</span><br><span class="line">  10     2 root     SW       0   0%   0% [migration/0]</span><br><span class="line">  11     2 root     SW       0   0%   0% [watchdog/0]</span><br><span class="line">  12     2 root     SW       0   0%   0% [cpuhp/0]</span><br><span class="line">  13     2 root     SW       0   0%   0% [cpuhp/1]</span><br><span class="line">  14     2 root     SW       0   0%   0% [watchdog/1]</span><br><span class="line">  15     2 root     SW       0   0%   0% [migration/1]</span><br><span class="line">  16     2 root     SW       0   0%   0% [ksoftirqd/1]</span><br><span class="line">  18     2 root     IW&lt;      0   0%   0% [kworker/1:0H]</span><br></pre></td></tr></table></figure><h3 id="ros"><a href="#ros" class="headerlink" title="ros"></a>ros</h3><blockquote><p>A system service is a container that can be run in either System Docker or Docker. Rancher provides services that are already available in RancherOS by adding them to the <a href="https://github.com/rancher/os-services" target="_blank" rel="noopener">os-services repo</a>. Anything in the <code>index.yml</code> file from the repository for the tagged release will be an available system service when using the <code>ros service list</code> command.</p></blockquote><p>RancherOS 移除了 systemd ，取而代之的是使用 ros 来管理系统服务。而相应的系统服务也是采用 docker 的方式来运行，包括用户空间的 docker 也是采用 docker 的方式来运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@rancher rancher]<span class="comment"># ros</span></span><br><span class="line">NAME:</span><br><span class="line">   ros - Control and configure RancherOS</span><br><span class="line">built: <span class="string">'2019-12-30T09:16:00Z'</span></span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   ros [global options] <span class="built_in">command</span> [<span class="built_in">command</span> options] [arguments...]</span><br><span class="line"></span><br><span class="line">VERSION:</span><br><span class="line">   v1.5.5</span><br><span class="line"></span><br><span class="line">AUTHOR(S):</span><br><span class="line">   Rancher Labs, Inc.</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">     config, c   configure settings</span><br><span class="line">     console     manage <span class="built_in">which</span> console container is used</span><br><span class="line">     engine      manage <span class="built_in">which</span> Docker engine is used</span><br><span class="line">     service, s</span><br><span class="line">     os          operating system upgrade/downgrade</span><br><span class="line">     tls         setup tls configuration</span><br><span class="line">     install     install RancherOS to disk</span><br><span class="line">     <span class="built_in">help</span>, h     Shows a list of commands or <span class="built_in">help</span> <span class="keyword">for</span> one <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">GLOBAL OPTIONS:</span><br><span class="line">   --<span class="built_in">help</span>, -h     show <span class="built_in">help</span></span><br><span class="line">   --version, -v  <span class="built_in">print</span> the version</span><br></pre></td></tr></table></figure><h3 id="系统进程"><a href="#系统进程" class="headerlink" title="系统进程"></a>系统进程</h3><ul><li>可以看到，使用 <code>ros service ps</code> 命令来查看正在运行的系统服务，这些服务都是以容器的方式来运行的。比如用户空间里的 <code>user-docker</code> 、<code>syslog</code> 、<code>udevd</code>   等等都是以容器的方式来运行的，而不是以传统进程服务来运行的。包括我们安装 RancherOS 到磁盘的时候  <code>starting installer container for rancher/os-installer:latest (new)</code> 这个安装程序也是由容器的方式来运行的，把磁盘设备和 <code>cloud-init</code> 配置文件一并挂载到容器中。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@rancher rancher]<span class="comment"># ros service ps</span></span><br><span class="line">Name                    Command                                                            State                     Ports</span><br><span class="line">docker                  ros user-docker                                                    Up 9 minutes             </span><br><span class="line">logrotate               /usr/bin/entrypoint.sh /usr/sbin/logrotate -v /etc/logrotate.conf  Created                  </span><br><span class="line">system-cron             container-crontab                                                  Up 9 minutes             </span><br><span class="line">container-data-volumes  /usr/bin/ros entrypoint <span class="built_in">echo</span>                                       Created                  </span><br><span class="line">console                 /usr/bin/ros entrypoint ros console-init                           Up 9 minutes             </span><br><span class="line">system-volumes          /usr/bin/ros entrypoint <span class="built_in">echo</span>                                       Created                  </span><br><span class="line">ntp                     /usr/bin/ros entrypoint /bin/start_ntp.sh                          Up 9 minutes             </span><br><span class="line">subscriber              /usr/bin/ros entrypoint os-subscriber                              Exited (0) 2 minutes ago </span><br><span class="line">syslog                  /usr/bin/entrypoint.sh rsyslogd -n                                 Up 9 minutes             </span><br><span class="line">media-volumes           /usr/bin/ros entrypoint <span class="built_in">echo</span>                                       Created                  </span><br><span class="line">preload-user-images     /usr/bin/ros entrypoint ros preload-images                         Exited (0) 9 minutes ago </span><br><span class="line">udev                    /usr/bin/ros entrypoint udevd                                      Up 9 minutes             </span><br><span class="line">udev-cold               /usr/bin/ros entrypoint ros udev-settle                            Exited (0) 9 minutes ago </span><br><span class="line">network                 /usr/bin/ros entrypoint netconf                                    Up 9 minutes             </span><br><span class="line">open-vm-tools           /usr/bin/ros entrypoint /usr/bin/vmtoolsd                          Up 9 minutes             </span><br><span class="line">acpid                   /usr/bin/ros entrypoint /usr/sbin/acpid -f                         Up 9 minutes             </span><br><span class="line"><span class="built_in">command</span>-volumes         /usr/bin/ros entrypoint <span class="built_in">echo</span>                                       Created                  </span><br><span class="line">cloud-init-execute      /usr/bin/ros entrypoint cloud-init-execute -pre-console            Exited (0) 9 minutes ago </span><br><span class="line">user-volumes            /usr/bin/ros entrypoint <span class="built_in">echo</span>                                       Created                  </span><br><span class="line">all-volumes             /usr/bin/ros entrypoint <span class="built_in">echo</span></span><br></pre></td></tr></table></figure><h3 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h3><p>和 CoreOS 一样，RancherOS 也没得相应的包管理器😂，都是采用容器来运行所需的服务，使用 <code>ros</code> 命令来管理相应的服务。如果想要运行一个服务的话，需要使用 ros 来创建相应的容器来运行才可以。而使用 ros 来创建服务</p><h3 id="使用体验-2"><a href="#使用体验-2" class="headerlink" title="使用体验"></a>使用体验</h3><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>文章写的太仓促了，感觉这些容器优化行操作系统都值得玩一玩得，尤其是 RancherOS 这种将 systemc 取代掉使用 docker 来管理系统服务得牛皮技术，值得研究一哈。因为时间有限，所以就没有详细地展开来将，就等到 2020 年吧😂。祝大家 2020 年元旦快乐，新的一年里……省略千字祝福😝</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;更新日志&quot;&gt;&lt;a href=&quot;#更新日志&quot;
        
      
    
    </summary>
    
    
      <category term="docker" scheme="https://blog.502.li/tags/docker/"/>
    
      <category term="容器" scheme="https://blog.502.li/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://blog.502.li/tags/Linux/"/>
    
      <category term="kubernees" scheme="https://blog.502.li/tags/kubernees/"/>
    
  </entry>
  
  <entry>
    <title>台式机装机方案</title>
    <link href="https://blog.502.li/archives/pc-e5v3-e3v3-amd2600.html"/>
    <id>https://blog.502.li/archives/pc-e5v3-e3v3-amd2600.html</id>
    <published>2019-12-26T05:00:00.000Z</published>
    <updated>2020-01-02T14:35:23.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL"><a href="#TL" class="headerlink" title="TL"></a>TL</h2><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">分享一个装机方案：<br>CPU: E5 2670V3 ×2<br>主板: Dell T7810 准系统<br>内存: 三星 DDR4 2133 16G×4<br>显卡: Quador K2000 2GB<br>硬盘: 西数 HC310 7K 4TB<br>固态: 三星 PM 981 256GB<br><br>价格: 550×2+1700+260×4+400+760+290=5290￥<br><br>你就能拥有一台 24C/48T CPU、64GB RAM 、256GB SDD/4TB HDD 配置的高性能工作站 <a href="https://t.co/NIkegB1Vck" target="_blank" rel="noopener">pic.twitter.com/NIkegB1Vck</a></p>&mdash; 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1209832133092528129?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 25, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="E3-V3"><a href="#E3-V3" class="headerlink" title="E3 V3"></a>E3 V3</h2><table><thead><tr><th style="text-align:center">硬件</th><th>配置</th><th style="text-align:center">价格</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td>E3-1270 V3 4C/8T 3.50 GHz~3.90 GHz</td><td style="text-align:center">520</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">主板</td><td>T1700 准系统：Intel ®C2261</td><td style="text-align:center">400</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">内存</td><td>三星 DDR3 ECC 16GB 1600 Mhz ×2</td><td style="text-align:center">260×2</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">显卡</td><td>GTX 950 2GB</td><td style="text-align:center">300</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">固态</td><td>三星 850 PRO SATA III 256GB</td><td style="text-align:center">210</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">机箱</td><td>T1700 准系统：</td><td style="text-align:center">0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">电源</td><td>T1700 准系统：290W 开关电源</td><td style="text-align:center">0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">总价</td><td></td><td style="text-align:center">1950</td></tr></tbody></table><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>如今的 E3 V3 价格已经跌破 500 左右了，但 AMD Ryzen R5 的价格散片也就 650 左右，加上 150 块钱就能提升 30% 的单核性能，外加 2 个核心和 4 个框框😂，总之 E3 V3 目前来讲性价比不如 AMD Ryzen R5。</li><li>E3 V3 是 Intel 第四代  CPU 1150 芯片组无法从 M.2 启动，速度只能达到 SATA III 也就是顶多 600 MB/s 的读写速度，而目前随便一块支持  PCI-e M.2 的主板普遍都能达到 3000MB/s 了。所以这一点来讲 E3 V3 已经不值得捡了。</li></ul><h2 id="AMD-Ryzen"><a href="#AMD-Ryzen" class="headerlink" title="AMD Ryzen"></a>AMD Ryzen</h2><table><thead><tr><th style="text-align:center">硬件</th><th>配置</th><th style="text-align:center">价格</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td>AMD Ryzen R5 2400G</td><td style="text-align:center">720</td><td></td></tr><tr><td style="text-align:center">主板</td><td>MSI B350M</td><td style="text-align:center">320</td><td></td></tr><tr><td style="text-align:center">内存</td><td>镁光 DDR4 16GB 2400 Mhz ×2</td><td style="text-align:center">300 ×2</td><td></td></tr><tr><td style="text-align:center">显卡</td><td>GTX 950 2GB</td><td style="text-align:center">300</td><td></td></tr><tr><td style="text-align:center">固态</td><td>三星 PM 981 256GB</td><td style="text-align:center">290</td><td></td></tr><tr><td style="text-align:center">机箱</td><td>Dell 3010 机箱</td><td style="text-align:center">170</td><td></td></tr><tr><td style="text-align:center">电源</td><td>Dell 3010 电源： 230W 光宝开关电源</td><td style="text-align:center">0</td><td></td></tr><tr><td style="text-align:center">总价</td><td></td><td style="text-align:center">2400</td></tr></tbody></table><h3 id="天梯图"><a href="#天梯图" class="headerlink" title="天梯图"></a><a href="http://itianti.sinaapp.com/index.php/cpu" target="_blank" rel="noopener">天梯图</a></h3><ul><li>仅供娱乐，实际性能还要做对比测试，只是让您心里有点 B 数</li><li>AMD Ryzen 5 2400G 的性能和 E3-1270 V3 性能相近，AMD Ryzen 5 2600 性能要比两者高大概 30% 的性能（个人瞎猜）。</li><li>AMD Ryzen 5 2400G 的散片价格，目前（2019-12-26）淘宝 720￥，而 AMD Ryzen 5 2600 的价格在 640￥ 左右。</li><li>AMD Ryzen 5 2400G 核显性能相当于 GTX 1030 2GB ，而 GTX 1030 价格在 300￥ 左右，所以说牺牲两个核心和四个框框外加 80 块钱买个 300 块的 GTX 1030 。性价比是相当高滴。如果是日常用不打游戏，买 AMD Ryzen 5 2400G 是最佳选择。</li><li>AMD Ryzen 5 3400G 的价格在 820￥ 左右</li></ul><table><thead><tr><th>165</th><th>AMD Ryzen 5 2600X</th><th>14377</th></tr></thead><tbody><tr><td>101</td><td>AMD Ryzen 7 2700X</td><td>16971</td></tr><tr><td>165</td><td>AMD Ryzen 5 2600X</td><td>14377</td></tr><tr><td>166</td><td>Intel Core i7-6850K @ 3.60GHz</td><td>14372</td></tr><tr><td>169</td><td>Intel Core i9-8950HK @ 2.90GHz</td><td>14259</td></tr><tr><td>170</td><td>AMD Ryzen 5 PRO 2600</td><td>14221</td></tr><tr><td>195</td><td>Intel Core i7-6800K @ 3.40GHz</td><td>13570</td></tr><tr><td>197</td><td>Intel Core i5-9600K @ 3.70GHz</td><td>13527</td></tr><tr><td>199</td><td><strong>AMD Ryzen 5 2600</strong></td><td>13507</td></tr><tr><td>202</td><td>AMD Ryzen 5 1600X</td><td>13203</td></tr><tr><td>203</td><td>Intel Xeon E5-2660 v2 @ 2.20GHz</td><td>13186</td></tr><tr><td>207</td><td>Intel Core i7-4930K @ 3.40GHz</td><td>13007</td></tr><tr><td>326</td><td>Intel Core i7-7920HQ @ 3.10GHz</td><td>9986</td></tr><tr><td>327</td><td>Intel Xeon E3-1285L v3 @ 3.10GHz</td><td>9981</td></tr><tr><td>328</td><td>AMD Ryzen 5 PRO 2400G</td><td>9963</td></tr><tr><td>329</td><td>Intel Core i7-7820HK @ 2.90GHz</td><td>9963</td></tr><tr><td>330</td><td><strong>AMD Ryzen 5 3400G</strong></td><td>9957</td></tr><tr><td>333</td><td><strong>Intel Xeon E3-1270 v3 @ 3.50GHz</strong></td><td>9919</td></tr><tr><td>387</td><td>Intel Xeon E3-1230 v3 @ 3.30GHz</td><td>9327</td></tr><tr><td>388</td><td><strong>AMD Ryzen 5 2400G</strong></td><td>9234</td></tr><tr><td>395</td><td>Intel Core i3-8350K @ 4.00GHz</td><td>9221</td></tr></tbody></table><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>这也是我目前的装机方案。我是在 7 月分的时组装的，那时候第三代 Ryzen 刚刚发布，而那时候的价格要比第二代 Ryzen 高出 500 多块钱，所以就没有使用第三代  Ryzen 。不过我当时买的是 U 板套装，加起来价格才 1180￥ ，那时候价格是相当便宜了，主板是华硕 B350M-K 丐板 的，理论上是支持第三代 Ryzen 的。虽然现在很后悔，但当时心切想买😂</p><h2 id="双路-E5-V3"><a href="#双路-E5-V3" class="headerlink" title="双路 E5 V3"></a>双路 E5 V3</h2><table><thead><tr><th style="text-align:center">硬件</th><th>配置</th><th style="text-align:center">价格</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td>Intel Xeon E5-2660 v3 @ 2.60GHz ×2</td><td style="text-align:center">600 ×2</td><td></td></tr><tr><td style="text-align:center">主板</td><td>Dell T7810 准系统 或者 Dell R630 准系统</td><td style="text-align:center">1700</td><td></td></tr><tr><td style="text-align:center">内存</td><td>三星 DDR4 2133 Mhz 16GB ×4</td><td style="text-align:center">260×4</td><td></td></tr><tr><td style="text-align:center">显卡</td><td>GTX 950 2GB</td><td style="text-align:center">300</td><td></td></tr><tr><td style="text-align:center">固态</td><td>三星 PM 981 256GB</td><td style="text-align:center">290</td><td></td></tr><tr><td style="text-align:center">机箱</td><td>Dell T7810 准系统</td><td style="text-align:center">0</td><td></td></tr><tr><td style="text-align:center">电源</td><td>Dell T7810 准系统</td><td style="text-align:center">0</td><td></td></tr><tr><td style="text-align:center">总价</td><td></td><td style="text-align:center">4530</td></tr></tbody></table><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>目前来讲 E5 V3 平台装机最令人头疼的就是主板死贵，主板价格都比两个 U 加起来的价格还要高。之所以选择 Dell T7810 准系统 准系统是因为相比来讲 Dell 塔式服务器的稳定性要比捡垃圾搞来的工包主板稳定性强很多，翻车概率要小一些。如果单独买主板的话还要和机箱象匹配，电源功率也要够。而 Dell T7810 准系统完美地解决了这些困扰，不用再考虑买合适的机箱和电源。一整套配合起来完美运行。</p></li><li><p>开箱博客 <a href="https://blog.silversky.moe/works/evaluation-of-out-of-the-box-dell-precision-t7910" target="_blank" rel="noopener">开箱测评——DELL PRECISION T7910</a></p></li><li><p>Dell T7810 有一些毛病，可以参考如下：</p></li><li><blockquote><ul><li>并不建议使用DELL T7910，非常伤 因为阵列卡的原因，系统速度会非常慢（肉眼可见的，比如说打开Windows Image Viewer，会等1-2秒才会显示（不管大小） 目测应该是什么硬件冲突，禁用板载阵列卡就好了（已经在国外论坛上看到很多案例了，很多公司/个人因为这个不去买DELL这个账</li><li>那是不是禁用阵列卡不用他不就好了呢 然而T7910的阵列卡和“背板”是12G的，接口使用的MiniSAS HD（SFF-8643）不管是再买阵列卡还是通道卡，都要有一笔不小的花费 还有K2000太烂了。</li><li>当然，我指的是这一代DELL Precision，不光是T7910</li><li>继续吐槽，T7910正面是三个风扇的，通过橡胶的减震钉固定在风扇架上。这些橡胶的减震钉，时间长了会老化，然后就会变得很恶心（最后被我拆掉用螺丝+螺帽代替）（我印象中我摸过其他的Lenovo的机器，甚至时间更长的都没有DELL这个老化之后的恶心 而且风扇的异响会变得比较讨厌（购入后1年内</li><li>顺便，应该是批次问题，如果你不幸买到了我这批的 你的电源会出现电弧的声音（没错，就是那个电弧 但是看不到任何东西，客服跟我讲可能我这边潮湿（你逗我，北方潮湿？？</li><li>电源，不管是T7910这样的模块化电源还是普通的电源，OEM机型你都会遇到一个问题，扩展电源接口不够 T7910只有一个SATA供电接口，本身设计是给光驱使用的 其他的电源接口是直接给硬盘笼供电的 如果你比较扭曲，像我这样可以直接剪掉重新焊接，或者你愿意多花钱买扩展线，那无所谓</li><li>以及前面提到的硬盘问题，别想着直接不用板载的SAS3008用板子上的SATA就完了 板子上就两个SATA。</li><li>这一代的Precision有巨多的问题（设计和硬件上的） 我是不可能推荐Precision的（至少是这代，因为我用了，用的还是旗舰） 相比之下，如果是OEM准系统组装的话，我更愿意推荐PowerEdge T630或者HPE的Z系列 T630有更好的电源配置，散热系统，扩展性，以及易于维护 HPE Z系列的模块化设计也是甩DELL10条街</li><li><p>btw, 我在6月把这台机器扔给我妈办公用之前，DELL的新固件我都会刷，然而并没有任何卵用</p><p>引用自 <a href="https://twitter.com/AkatsukiRyuu/status/1210157947906490368" target="_blank" rel="noopener">暁龍之介的推文</a></p></li></ul></blockquote></li></ul><h3 id="天梯图-1"><a href="#天梯图-1" class="headerlink" title="天梯图"></a><a href="http://itianti.sinaapp.com/index.php/cpu" target="_blank" rel="noopener">天梯图</a></h3><ul><li><p>仅供娱乐，具体实际性能还要看是实际的测试</p></li><li><p>可见  E5-2660 v3 的单核性能和 i7-8700K、Ryzen 7 2700x 相近</p></li></ul><table><thead><tr><th>排名</th><th>型号</th><th>得分</th></tr></thead><tbody><tr><td>101</td><td>AMD Ryzen 7 2700X</td><td>16971</td></tr><tr><td>104</td><td>Intel Core i7-8086K @ 4.00GHz</td><td>16688</td></tr><tr><td>115</td><td>Intel Xeon Gold 5120 @ 2.20GHz</td><td>16308</td></tr><tr><td>120</td><td><strong>Intel Xeon E5-2660 v3 @ 2.60GHz</strong></td><td>16184</td></tr><tr><td>123</td><td>AMD Ryzen Threadripper 1900X</td><td>16089</td></tr><tr><td>124</td><td>Intel Xeon E-2186G @ 3.80GHz</td><td>16057</td></tr><tr><td>127</td><td>Intel Core i7-8700K @ 3.70GHz</td><td>15960</td></tr><tr><td>128</td><td>Intel Core i7-5960X @ 3.00GHz</td><td>15944</td></tr><tr><td>129</td><td>Intel Core i7-9700 @ 3.00GHz</td><td>15923</td></tr><tr><td>136</td><td>AMD Ryzen 7 PRO 2700</td><td>15714</td></tr><tr><td>138</td><td>Intel Core i7-9700F @ 3.00GHz</td><td>15566</td></tr><tr><td>141</td><td>AMD Ryzen 7 1800X</td><td>15420</td></tr><tr><td>143</td><td>Intel Xeon E5-2640 v4 @ 2.40GHz</td><td>15380</td></tr><tr><td>144</td><td>AMD Ryzen 7 PRO 1700X</td><td>15367</td></tr></tbody></table><h4 id="双路"><a href="#双路" class="headerlink" title="双路"></a>双路</h4><table><thead><tr><th>43</th><th>[双路] AMD EPYC 7501</th><th>23727</th></tr></thead><tbody><tr><td>44</td><td>[双路] Intel Xeon E5-2687W v2 @ 3.40GHz</td><td>23727</td></tr><tr><td>45</td><td>[双路] Intel Xeon E5-2697 v2 @ 2.70GHz</td><td>23574</td></tr><tr><td>46</td><td>[双路] AMD EPYC 7401</td><td>23518</td></tr><tr><td>47</td><td>[双路] Intel Xeon Gold 6128 @ 3.40GHz</td><td>23396</td></tr><tr><td>51</td><td>[双路] Intel Xeon E5-2660 v4 @ 2.00GHz</td><td>23117</td></tr><tr><td>54</td><td>[双路] Intel Xeon E5-2673 v3 @ 2.40GHz</td><td>22959</td></tr><tr><td>55</td><td><strong>[双路] Intel Xeon E5-2660 v3 @ 2.60GHz</strong></td><td>22733</td></tr><tr><td>56</td><td>[双路] Intel Xeon E5-4660 v3 @ 2.10GHz</td><td>22461</td></tr><tr><td>57</td><td>[双路] Intel Xeon E7-4890 v2 @ 2.80GHz</td><td>22412</td></tr><tr><td>58</td><td>[双路] Intel Xeon E5-2670 v3 @ 2.30GHz</td><td>22383</td></tr></tbody></table><h2 id="单路-E5-V3"><a href="#单路-E5-V3" class="headerlink" title="单路 E5 V3"></a>单路 E5 V3</h2><table><thead><tr><th style="text-align:center">硬件</th><th>配置</th><th style="text-align:center">价格</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td>Intel Xeon E5-2660 v3 @ 2.60GHz</td><td style="text-align:center">600</td><td></td></tr><tr><td style="text-align:center">主板</td><td>Dell T5810 准系统</td><td style="text-align:center">1200</td><td></td></tr><tr><td style="text-align:center">内存</td><td>三星 DDR4 2133 Mhz 16GB ×4</td><td style="text-align:center">260×4</td><td></td></tr><tr><td style="text-align:center">显卡</td><td>GTX 950 2GB</td><td style="text-align:center">300</td><td></td></tr><tr><td style="text-align:center">固态</td><td>三星 PM 981 256GB M.2</td><td style="text-align:center">290</td><td></td></tr><tr><td style="text-align:center">机箱</td><td>Dell T7810 准系统</td><td style="text-align:center">0</td><td></td></tr><tr><td style="text-align:center">电源</td><td>Dell T7810 准系统</td><td style="text-align:center">0</td><td></td></tr><tr><td style="text-align:center">总价</td><td></td><td style="text-align:center">3430</td></tr></tbody></table><p>不过我倒是 jio 着，既然垃圾佬都上 E5 了，不玩玩双路对得起自己嘛，所以多花 1000 块相当于多一个 U ，多 12C/24T ，双路要比单路多 24 个框框啊，数起可好玩喽😂</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;TL&quot;&gt;&lt;a href=&quot;#TL&quot;
        
      
    
    </summary>
    
    
      <category term="捡垃圾" scheme="https://blog.502.li/tags/%E6%8D%A1%E5%9E%83%E5%9C%BE/"/>
    
      <category term="PC" scheme="https://blog.502.li/tags/PC/"/>
    
  </entry>
  
  <entry>
    <title>DockOne 社群分享汇总</title>
    <link href="https://blog.502.li/archives/dockone-post-index-archives.html"/>
    <id>https://blog.502.li/archives/dockone-post-index-archives.html</id>
    <published>2019-12-19T05:00:00.000Z</published>
    <updated>2020-01-02T14:35:23.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="README"><a href="#README" class="headerlink" title="README"></a>README</h2><p>目前国内有关容器和 kubernetes 的社区，<a href="http://dockone.io/" target="_blank" rel="noopener">DockOne</a> 无疑是最优秀的社群分享平台。每周都会在微信群中直播分享 kubernetes 相关的技术。在此整理和汇总一下每次分享的主题，方便读者们找到感兴趣的内容。</p><h2 id="社群分享汇总列表"><a href="#社群分享汇总列表" class="headerlink" title="社群分享汇总列表"></a>社群分享汇总列表</h2><table><thead><tr><th></th><th>分享内容</th></tr></thead><tbody><tr><td>二四二</td><td><a href="http://dockone.io/article/9560" target="_blank" rel="noopener">Open Policy Agent在Kubernetes中的应用</a></td></tr><tr><td>二四一</td><td><a href="http://dockone.io/article/9538" target="_blank" rel="noopener">Volcano介绍及其在深度学习场景下的应用</a></td></tr><tr><td>二四〇</td><td><a href="http://dockone.io/article/9526" target="_blank" rel="noopener">Knative Serverless 之道：如何 0运维、低成本实现应用托管？</a></td></tr><tr><td>二三九</td><td><a href="http://dockone.io/article/9517" target="_blank" rel="noopener">Kubernetes在信也科技的落地实战</a></td></tr><tr><td>二三八</td><td><a href="http://dockone.io/article/9432" target="_blank" rel="noopener">基于CDN的边缘计算平台设计和思考</a></td></tr><tr><td>二三七</td><td><a href="http://dockone.io/article/9412" target="_blank" rel="noopener">基于云原生日志分类处理方案与落地实践</a></td></tr><tr><td>二三六</td><td><a href="http://dockone.io/article/9386" target="_blank" rel="noopener">扇贝 Service Mesh发展历程</a></td></tr><tr><td>二三五</td><td><a href="http://dockone.io/article/9384" target="_blank" rel="noopener">k3s在边缘计算中的应用实践</a></td></tr><tr><td>二三四</td><td><a href="http://dockone.io/article/9369" target="_blank" rel="noopener">Kubernetes在宜信的落地实践</a></td></tr><tr><td>二三三</td><td><a href="http://dockone.io/article/9361" target="_blank" rel="noopener">Jenkins X：基于 Kubernetes 的 Serverless Jenkins</a></td></tr><tr><td>二三二</td><td><a href="http://dockone.io/article/9357" target="_blank" rel="noopener">基于 Ceph 的 Kubernetes 数据持久化</a></td></tr><tr><td>二三一</td><td><a href="http://dockone.io/article/9348" target="_blank" rel="noopener">玩转Kubernetes开发测试环境</a></td></tr><tr><td>二三〇</td><td><a href="http://dockone.io/article/9333" target="_blank" rel="noopener">Kubernetes在SHAREit的落地实战</a></td></tr><tr><td>二二九</td><td><a href="http://dockone.io/article/9313" target="_blank" rel="noopener">蔚来汽车的Kubernetes实践</a></td></tr><tr><td>二二八</td><td><a href="http://dockone.io/article/9286" target="_blank" rel="noopener">HC Bridge容器网络模式分享</a></td></tr><tr><td>二二七</td><td><a href="http://dockone.io/article/9270" target="_blank" rel="noopener">云原生可观察性之日志管理</a></td></tr><tr><td>二二六</td><td><a href="http://dockone.io/article/9269" target="_blank" rel="noopener">Prometheus架构与实践分享</a></td></tr><tr><td>二二五</td><td><a href="http://dockone.io/article/9254" target="_blank" rel="noopener">eBay Kubernetes集群的存储实践</a></td></tr><tr><td>二二四</td><td><a href="http://dockone.io/article/9234" target="_blank" rel="noopener">基于Kubernetes的DevOps平台实战</a></td></tr><tr><td>二二三</td><td><a href="http://dockone.io/article/9226" target="_blank" rel="noopener">Porter：面向裸金属环境的 Kubernetes 开源负载均衡器</a></td></tr><tr><td>二二二</td><td><a href="http://dockone.io/article/9207" target="_blank" rel="noopener">小公司如何优雅地推进应用上Kubernetes容器云</a></td></tr><tr><td>二二一</td><td><a href="http://dockone.io/article/9191" target="_blank" rel="noopener">初探云原生应用管理之：聊聊 Tekton 项目</a></td></tr><tr><td>二二〇</td><td><a href="http://dockone.io/article/9189" target="_blank" rel="noopener">PPmoney基于Kubernetes的DevOps实践</a></td></tr><tr><td>二一九</td><td><a href="http://dockone.io/article/9165" target="_blank" rel="noopener">跨境时尚电商SHEIN基于Kubernetes的DevOps实践</a></td></tr><tr><td>二一八</td><td><a href="http://dockone.io/article/9157" target="_blank" rel="noopener">基于OVS自研容器网络插件在金融类企业的落地实践</a></td></tr><tr><td>二一七</td><td><a href="http://dockone.io/article/9123" target="_blank" rel="noopener">TiDB Operator 的设计与实现</a></td></tr><tr><td>二一六</td><td><a href="http://dockone.io/article/9107" target="_blank" rel="noopener">基于Istio的灰度平台实践</a></td></tr><tr><td>二一五</td><td><a href="http://dockone.io/article/9076" target="_blank" rel="noopener">Kube-OVN的设计思路和实现原理</a></td></tr><tr><td>二一四</td><td><a href="http://dockone.io/article/9045" target="_blank" rel="noopener">震坤行的容器云实践</a></td></tr><tr><td>二一三</td><td><a href="http://dockone.io/article/9014" target="_blank" rel="noopener">智能工厂的容器云实践</a></td></tr><tr><td>二一二</td><td><a href="http://dockone.io/article/8994" target="_blank" rel="noopener">基于kubeadm搭建Kubernetes HA集群</a></td></tr><tr><td>二一一</td><td><a href="http://dockone.io/article/8977" target="_blank" rel="noopener">基于Actor模型的CQRS/ES解决方案分享</a></td></tr><tr><td>二一零</td><td><a href="http://dockone.io/article/8929" target="_blank" rel="noopener">平安证券Kubernetes容器集群的DevOps实践</a></td></tr><tr><td>二零九</td><td><a href="http://dockone.io/article/8825" target="_blank" rel="noopener">荔枝运维平台容器化实践</a></td></tr><tr><td>二零八</td><td><a href="http://dockone.io/article/8801" target="_blank" rel="noopener">华尔街见闻Istio生产实践</a></td></tr><tr><td>二零七</td><td><a href="http://dockone.io/article/8780" target="_blank" rel="noopener">瓜子云平台的实践经验</a></td></tr><tr><td>二零六</td><td><a href="http://dockone.io/article/8738" target="_blank" rel="noopener">容器环境下的持续集成最佳实践</a></td></tr><tr><td>二零五</td><td><a href="http://dockone.io/article/8718" target="_blank" rel="noopener">基于OVN的Kubernetes网络架构解析</a></td></tr><tr><td>二零四</td><td><a href="http://dockone.io/article/8695" target="_blank" rel="noopener">小团队微服务落地实践</a></td></tr><tr><td>二零三</td><td><a href="http://dockone.io/article/8622" target="_blank" rel="noopener">骞云科技DevOps实践</a></td></tr><tr><td>二零二</td><td><a href="http://dockone.io/article/8600" target="_blank" rel="noopener">房多多Service Mesh实践</a></td></tr><tr><td>二零一</td><td><a href="http://dockone.io/article/8538" target="_blank" rel="noopener">得到App的容器及Kubernetes实践</a></td></tr><tr><td>二零零</td><td><a href="http://dockone.io/article/8485" target="_blank" rel="noopener">龙腾出行基于Kubernetes的DevOps流水线实战</a></td></tr><tr><td>一九九</td><td><a href="http://dockone.io/article/8472" target="_blank" rel="noopener">如何评估Kubernetes持久化存储方案</a></td></tr><tr><td>一九八</td><td><a href="http://dockone.io/article/8469" target="_blank" rel="noopener">容器网络限流实践</a></td></tr><tr><td>一九七</td><td><a href="http://dockone.io/article/8464" target="_blank" rel="noopener">etcd 集群运维实践</a></td></tr><tr><td>一九六</td><td><a href="http://dockone.io/article/8442" target="_blank" rel="noopener">聚美优品云平台实践</a></td></tr><tr><td>一九五</td><td><a href="http://dockone.io/article/8403" target="_blank" rel="noopener">智融集团基于OpenShift的容器化PaaS平台实践</a></td></tr><tr><td>一九四</td><td><a href="http://dockone.io/article/8384" target="_blank" rel="noopener">猪八戒网DevOps容器云与流水线</a></td></tr><tr><td>一九三</td><td><a href="http://dockone.io/article/8365" target="_blank" rel="noopener">容器化落地实践的一个案例</a></td></tr><tr><td>一九二</td><td><a href="http://dockone.io/article/8353" target="_blank" rel="noopener">360搜索容器云探索与实践</a></td></tr><tr><td>一九〇</td><td><a href="http://dockone.io/article/8329" target="_blank" rel="noopener">Spring Cloud Kubernetes容器化实践</a></td></tr><tr><td>一八九</td><td><a href="http://dockone.io/article/8271" target="_blank" rel="noopener">有赞容器化实践</a></td></tr><tr><td>一八八</td><td><a href="http://dockone.io/article/8257" target="_blank" rel="noopener">唯品会Noah云平台实现内幕披露</a></td></tr><tr><td>一八七</td><td><a href="http://dockone.io/article/8217" target="_blank" rel="noopener">gVisor是什么？可以解决什么问题？</a></td></tr><tr><td>一八六</td><td><a href="http://dockone.io/article/8171" target="_blank" rel="noopener">有货基于Kubernetes容器环境的持续交付实践</a></td></tr><tr><td>一八五</td><td><a href="http://dockone.io/article/8149" target="_blank" rel="noopener">Nepxion Discovery：Spring Cloud灰度发布神器</a></td></tr><tr><td>一八四</td><td><a href="http://dockone.io/article/8139" target="_blank" rel="noopener">基于Spring Cloud的微服务容器化实践</a></td></tr><tr><td>一八三</td><td><a href="http://dockone.io/article/8133" target="_blank" rel="noopener">滴滴弹性云Kubernetes实践</a></td></tr><tr><td>一八二</td><td><a href="http://dockone.io/article/8103" target="_blank" rel="noopener">基于 GitLab 的 CI 实践</a></td></tr><tr><td>一八一</td><td><a href="http://dockone.io/article/7735" target="_blank" rel="noopener">小米弹性调度平台Ocean</a></td></tr><tr><td>一八十</td><td><a href="http://dockone.io/article/7720" target="_blank" rel="noopener">Hulu大规模容器调度系统Capos</a></td></tr><tr><td>一七八</td><td><a href="http://dockone.io/article/6049" target="_blank" rel="noopener">基于Pipeline的CI/CD在趣头条的应用实践</a></td></tr><tr><td>一七七</td><td><a href="http://dockone.io/article/6021" target="_blank" rel="noopener">苏宁容器云基于Kubernetes和Contiv的网络架构技术实现</a></td></tr><tr><td>一七六</td><td><a href="http://dockone.io/article/6020" target="_blank" rel="noopener">海信商业云平台的微服务落地实践</a></td></tr><tr><td>一七五</td><td><a href="http://dockone.io/article/5992" target="_blank" rel="noopener">盘点Kubernetes网络问题的4种解决方案</a></td></tr><tr><td>一七四</td><td><a href="http://dockone.io/article/5803" target="_blank" rel="noopener">腾讯云TSF微服务平台及ServiceMesh技术实践</a></td></tr><tr><td>一七三</td><td><a href="http://dockone.io/article/5716" target="_blank" rel="noopener">全面学习Prometheus</a></td></tr><tr><td>一七二</td><td><a href="http://dockone.io/article/5501" target="_blank" rel="noopener">Kubernetes网络安全之访问控制技术实践</a></td></tr><tr><td>一七一</td><td><a href="http://dockone.io/article/5418" target="_blank" rel="noopener">TalkingData的Spark On Kubernetes实践</a></td></tr><tr><td>一七〇</td><td><a href="http://dockone.io/article/5293" target="_blank" rel="noopener">贝壳找房权限服务的探索和实践</a></td></tr><tr><td>一六九</td><td><a href="http://dockone.io/article/5269" target="_blank" rel="noopener">Helm：强大的Kubernetes包管理工具</a></td></tr><tr><td>一六八</td><td><a href="http://dockone.io/article/5268" target="_blank" rel="noopener">DBaaS在金融生产环境的落地实践</a></td></tr><tr><td>一六六</td><td><a href="http://dockone.io/article/4896" target="_blank" rel="noopener">Kubernetes on DC/OS最佳实践</a></td></tr><tr><td>一六五</td><td><a href="http://dockone.io/article/4892" target="_blank" rel="noopener">为什么Kubernetes天然适合微服务？</a></td></tr><tr><td>一六四</td><td><a href="http://dockone.io/article/4891" target="_blank" rel="noopener">扇贝网微服务编排和治理实践</a></td></tr><tr><td>一六三</td><td><a href="http://dockone.io/article/4645" target="_blank" rel="noopener">Kubernetes官方集群部署工具kubeadm原理解析</a></td></tr><tr><td>一六二</td><td><a href="http://dockone.io/article/4622" target="_blank" rel="noopener">新东方利用容器技术在用户自服务方面的探索</a></td></tr><tr><td>一六一</td><td><a href="http://dockone.io/article/4057" target="_blank" rel="noopener">聊聊Docker监控那点事儿</a></td></tr><tr><td>一六零</td><td><a href="http://dockone.io/article/3601" target="_blank" rel="noopener">基于Kubernetes的DevOps实践之路</a></td></tr><tr><td>一五九</td><td><a href="http://dockone.io/article/3300" target="_blank" rel="noopener">TensorFlow on Kubernetes的架构与实践</a></td></tr><tr><td>一五八</td><td><a href="http://dockone.io/article/3063" target="_blank" rel="noopener">Kubernetes存储系统介绍及机制实现</a></td></tr><tr><td>一五七</td><td><a href="http://dockone.io/article/3041" target="_blank" rel="noopener">一个可供参考的企业应用容器化实践案例</a></td></tr><tr><td>一五六</td><td><a href="http://dockone.io/article/3039" target="_blank" rel="noopener">由浅入深SCF无服务器云函数实践</a></td></tr><tr><td>一五五</td><td><a href="http://dockone.io/article/2992" target="_blank" rel="noopener">分布式配置中心架构与实战</a></td></tr><tr><td>一五四</td><td><a href="http://dockone.io/article/2990" target="_blank" rel="noopener">在项目实践中，如何进行容器化改造和DevOps建设？</a></td></tr><tr><td>一五三</td><td><a href="http://dockone.io/article/2988" target="_blank" rel="noopener">JDOS 2.0：Kubernetes的工业级实践</a></td></tr><tr><td>一五二</td><td><a href="http://dockone.io/article/2973" target="_blank" rel="noopener">东方国信基于Kubernetes构建容器云平台的实践和思考</a></td></tr><tr><td>一五一</td><td><a href="http://dockone.io/article/2965" target="_blank" rel="noopener">Docker在测试中的应用</a></td></tr><tr><td>一五〇</td><td><a href="http://dockone.io/article/2931" target="_blank" rel="noopener">小型公司DevOps落地实践案例</a></td></tr><tr><td>一四九</td><td><a href="http://dockone.io/article/2885" target="_blank" rel="noopener">Kubernetes调度详解</a></td></tr><tr><td>一四八</td><td><a href="http://dockone.io/article/2867" target="_blank" rel="noopener">Kubernetes的多集群管理实践</a></td></tr><tr><td>一四七</td><td><a href="http://dockone.io/article/2845" target="_blank" rel="noopener">瓜子云的任务调度系统</a></td></tr><tr><td>一四六</td><td><a href="http://dockone.io/article/2799" target="_blank" rel="noopener">中小型互联网公司微服务实践之经验和教训</a></td></tr><tr><td>一四五</td><td><a href="http://dockone.io/article/2771" target="_blank" rel="noopener">乐高式微服务化改造</a></td></tr><tr><td>一四四</td><td><a href="http://dockone.io/article/2760" target="_blank" rel="noopener">BizCloud：基于Kubernetes的私有云实践</a></td></tr><tr><td>一四三</td><td><a href="http://dockone.io/article/2733" target="_blank" rel="noopener">FreeWheel基于Kubernetes容器云构建与实践：应用编排与服务质量保证</a></td></tr><tr><td>一四二</td><td><a href="http://dockone.io/article/2730" target="_blank" rel="noopener">容器云在万达的落地经验</a></td></tr><tr><td>一四一</td><td><a href="http://dockone.io/article/2721" target="_blank" rel="noopener">如何开发部署Kubernetes Native应用</a></td></tr><tr><td>一四零</td><td><a href="http://dockone.io/article/2677" target="_blank" rel="noopener">Serverless云函数架构精解</a></td></tr><tr><td>一三九</td><td><a href="http://dockone.io/article/2634" target="_blank" rel="noopener">基于Kubernetes的应用编排实践</a></td></tr><tr><td>一三八</td><td><a href="http://dockone.io/article/2616" target="_blank" rel="noopener">白话Kubernetes网络</a></td></tr><tr><td>一三七</td><td><a href="http://dockone.io/article/2602" target="_blank" rel="noopener">Kubernetes主机和容器的监控方案</a></td></tr><tr><td>一三六</td><td><a href="http://dockone.io/article/2583" target="_blank" rel="noopener">Kubernetes健康检查策略</a></td></tr><tr><td>一三五</td><td><a href="http://dockone.io/article/2575" target="_blank" rel="noopener">求取一份极致的简单：海量应用容器化改造之路</a></td></tr><tr><td>一三四</td><td><a href="http://dockone.io/article/2563" target="_blank" rel="noopener">国内某大型酒店管理集团基于Kubernetes的实践</a></td></tr><tr><td>一三三</td><td><a href="http://dockone.io/article/2529" target="_blank" rel="noopener">深入理解Kubernetes网络策略</a></td></tr><tr><td>一三二</td><td><a href="http://dockone.io/article/2520" target="_blank" rel="noopener">58 赶集基于 Docker的自动化部署实践</a></td></tr><tr><td>一三一</td><td><a href="http://dockone.io/article/2513" target="_blank" rel="noopener">Juice——一种基于MesosFramework的任务云框架</a></td></tr><tr><td>一三零</td><td><a href="http://dockone.io/article/2504" target="_blank" rel="noopener">探究PaaS网络模型设计</a></td></tr><tr><td>一二九</td><td><a href="http://dockone.io/article/2485" target="_blank" rel="noopener">聊聊Service Mesh：linkerd</a></td></tr><tr><td>一二八</td><td><a href="http://dockone.io/article/2476" target="_blank" rel="noopener">容器化部署OpenStack的正确姿势</a></td></tr><tr><td>一二八</td><td><a href="http://dockone.io/article/2468" target="_blank" rel="noopener">容器如何监控？</a></td></tr><tr><td>一二七</td><td><a href="http://dockone.io/article/2447" target="_blank" rel="noopener">Docker的另类用法，就是这么简单粗暴</a></td></tr><tr><td>一二六</td><td><a href="http://dockone.io/article/2446" target="_blank" rel="noopener">Kubernetes在微服务化游戏中的探索实践</a></td></tr><tr><td>一二五</td><td><a href="http://dockone.io/article/2428" target="_blank" rel="noopener">深信服容器云的负载均衡实现</a></td></tr><tr><td>一二四</td><td><a href="http://dockone.io/article/2424" target="_blank" rel="noopener">轻松筹监控系统实现方案</a></td></tr><tr><td>一二三</td><td><a href="http://dockone.io/article/2405" target="_blank" rel="noopener">如何扩展Kubernetes管理的资源对象</a></td></tr><tr><td>一二二</td><td><a href="http://dockone.io/article/2392" target="_blank" rel="noopener">探索Kubernetes的网络原理及方案</a></td></tr><tr><td>一二一</td><td><a href="http://dockone.io/article/2371" target="_blank" rel="noopener">喜马拉雅FM测试环境的Docker化实践案例</a></td></tr><tr><td>一二〇</td><td><a href="http://dockone.io/article/2351" target="_blank" rel="noopener">基于Kubernetes的私有容器云建设实践</a></td></tr><tr><td>一一九</td><td><a href="http://dockone.io/article/2345" target="_blank" rel="noopener">Elastic-Job-Cloud作业云在当当的SRE实践</a></td></tr><tr><td>一一八</td><td><a href="http://dockone.io/article/2335" target="_blank" rel="noopener">容器技术在企业级服务里的实践</a></td></tr><tr><td>一一七</td><td><a href="http://dockone.io/article/2322" target="_blank" rel="noopener">沪江容器化运维实践</a></td></tr><tr><td>一一六</td><td><a href="http://dockone.io/article/2308" target="_blank" rel="noopener">某股份制商业银行定制化PaaS介绍</a></td></tr><tr><td>一一五</td><td><a href="http://dockone.io/article/2261" target="_blank" rel="noopener">基于Neutron的Kubernetes SDN实践经验之谈</a></td></tr><tr><td>一一四</td><td><a href="http://dockone.io/article/2248" target="_blank" rel="noopener">Jenkins在Google Cloud的自动化安装</a></td></tr><tr><td>一一三</td><td><a href="http://dockone.io/article/2227" target="_blank" rel="noopener">从一个实际案例来谈容器落地的问题</a></td></tr><tr><td>一一二</td><td><a href="http://dockone.io/article/2216" target="_blank" rel="noopener">Flannel中vxlan backend的原理和实现</a></td></tr><tr><td>一一一</td><td><a href="http://dockone.io/article/2191" target="_blank" rel="noopener">LAIN 平台远程进入容器功能设计与实现</a></td></tr><tr><td>一一零</td><td><a href="http://dockone.io/article/2180" target="_blank" rel="noopener">Docker在沪江落地的实践</a></td></tr><tr><td>一零九</td><td><a href="http://dockone.io/article/2145" target="_blank" rel="noopener">中小型团队的容器化之路</a></td></tr><tr><td>一零八</td><td><a href="http://dockone.io/article/2114" target="_blank" rel="noopener">基于Jenkins和Kubernetes的CI工作流</a></td></tr><tr><td>一零七</td><td><a href="http://dockone.io/article/2098" target="_blank" rel="noopener">SRE工程实践——基于时间序列存储数据的报警</a></td></tr><tr><td>一零六</td><td><a href="http://dockone.io/article/2077" target="_blank" rel="noopener">乐视云基于Kubernetes的PaaS平台建设</a></td></tr><tr><td>一零五</td><td><a href="http://dockone.io/article/2021" target="_blank" rel="noopener">度量驱动的DevOps转型</a></td></tr><tr><td>一零四</td><td><a href="http://dockone.io/article/2019" target="_blank" rel="noopener">艺龙部署体系的演进</a></td></tr><tr><td>一零三</td><td><a href="http://dockone.io/article/2016" target="_blank" rel="noopener">Kubernetes 有状态集群服务部署与管理</a></td></tr><tr><td>一零二</td><td><a href="http://dockone.io/article/1992" target="_blank" rel="noopener">基于容器的日志管理实践</a></td></tr><tr><td>一零一</td><td><a href="http://dockone.io/article/1976" target="_blank" rel="noopener">构建容器服务平台（CaaS</a></td></tr><tr><td>一零零</td><td><a href="http://dockone.io/article/1971" target="_blank" rel="noopener">构建支持多编排引擎的容器基础设施服务</a></td></tr><tr><td>九十九</td><td><a href="http://dockone.io/article/1925" target="_blank" rel="noopener">海航生态科技舆情大数据平台容器化改造</a></td></tr><tr><td>九十八</td><td><a href="http://dockone.io/article/1902" target="_blank" rel="noopener">Insta360容器化&amp;DevOps之路</a></td></tr><tr><td>九十七</td><td><a href="http://dockone.io/article/1863" target="_blank" rel="noopener">现有系统实施微服务架构改进经验分享</a></td></tr><tr><td>九十六</td><td><a href="http://dockone.io/article/1847" target="_blank" rel="noopener">爱油科技基于SpringCloud的微服务实践</a></td></tr><tr><td>九十五</td><td><a href="http://dockone.io/article/1833" target="_blank" rel="noopener">树莓派上的Docker集群管理</a></td></tr><tr><td>九十四</td><td><a href="http://dockone.io/article/1815" target="_blank" rel="noopener">唯品会基于Kubernetes的网络方案演进</a></td></tr><tr><td>九十三</td><td><a href="http://dockone.io/article/1806" target="_blank" rel="noopener">魅族云Docker实践</a></td></tr><tr><td>九十二</td><td><a href="http://dockone.io/article/1803" target="_blank" rel="noopener">如何使用 Node.js 和 Docker构建高质量的微服务</a></td></tr><tr><td>九十一</td><td><a href="http://dockone.io/article/1798" target="_blank" rel="noopener">打造百亿级数据处理量的弹性调度容器平台</a></td></tr><tr><td>九十</td><td><a href="http://dockone.io/article/1794" target="_blank" rel="noopener">猎豹移动基于CoreOS在AWS上的项目实践</a></td></tr><tr><td>八十九</td><td><a href="http://dockone.io/article/1779" target="_blank" rel="noopener">恒生金融交易系统的Docker化实践</a></td></tr><tr><td>八十八</td><td><a href="http://dockone.io/article/1775" target="_blank" rel="noopener">PPTV聚力传媒的Docker与DevOps</a></td></tr><tr><td>八十七</td><td><a href="http://dockone.io/article/1767" target="_blank" rel="noopener">基于Docker的开发云提高资源利用率的实践</a></td></tr><tr><td>八十六</td><td><a href="http://dockone.io/article/1734" target="_blank" rel="noopener">深入解析DC/OS 1.8——高可靠的微服务及大数据管理平台</a></td></tr><tr><td>八十五</td><td><a href="http://dockone.io/article/1729" target="_blank" rel="noopener">Docker存储方式选型建议</a></td></tr><tr><td>八十四</td><td><a href="http://dockone.io/article/1724" target="_blank" rel="noopener">Docker在B站的实施之路</a></td></tr><tr><td>八十三</td><td><a href="http://dockone.io/article/1713" target="_blank" rel="noopener">Acttao 开发、运维容器化实践</a></td></tr><tr><td>八十二</td><td><a href="http://dockone.io/article/1704" target="_blank" rel="noopener">基于Docker技术的CI&amp;CD实践</a></td></tr><tr><td>八十一</td><td><a href="http://dockone.io/article/1691" target="_blank" rel="noopener">唯品会数据库备份恢复容器化项目实践经验总结</a></td></tr><tr><td>八十</td><td><a href="http://dockone.io/article/1687" target="_blank" rel="noopener">云计算应用技术发展与企业异构资源池统一管理案例分析</a></td></tr><tr><td>七十九</td><td><a href="http://dockone.io/article/1658" target="_blank" rel="noopener">基于容器技术构建企业级PaaS云平台实践</a></td></tr><tr><td>七十八</td><td><a href="http://dockone.io/article/1651" target="_blank" rel="noopener">中英人寿保险有限公司基于容器技术的实践分享</a></td></tr><tr><td>七十七</td><td><a href="http://dockone.io/article/1640" target="_blank" rel="noopener">用Harbor实现容器镜像仓库的管理和运维</a></td></tr><tr><td>七十六</td><td><a href="http://dockone.io/article/1636" target="_blank" rel="noopener">容器化ICT融合初体验</a></td></tr><tr><td>七十五</td><td><a href="http://dockone.io/article/1616" target="_blank" rel="noopener">应用容器化之Kubernetes实践</a></td></tr><tr><td>七十四</td><td><a href="http://dockone.io/article/1610" target="_blank" rel="noopener">传统金融 IT 对混合云管理的一些思考</a></td></tr><tr><td>七十三</td><td><a href="http://dockone.io/article/1601" target="_blank" rel="noopener">SAP Anywhere产品背后CD的实现</a></td></tr><tr><td>七十二</td><td><a href="http://dockone.io/article/1600" target="_blank" rel="noopener">Kubernetes容器集群中的日志系统集成实践</a></td></tr><tr><td>七十一</td><td><a href="http://dockone.io/article/1582" target="_blank" rel="noopener">基于Docker的负载均衡和服务发现</a></td></tr><tr><td>七十</td><td><a href="http://dockone.io/article/1573" target="_blank" rel="noopener">浅谈Docker安全合规建设</a></td></tr><tr><td>六十九</td><td><a href="http://dockone.io/article/1553" target="_blank" rel="noopener">微服务选型之Modern Node.js</a></td></tr><tr><td>六十八</td><td><a href="http://dockone.io/article/1541" target="_blank" rel="noopener">应用容器env化实战</a></td></tr><tr><td>六十七</td><td><a href="http://dockone.io/article/1518" target="_blank" rel="noopener">互联网场景下闪存优化测试和应用</a></td></tr><tr><td>六十六</td><td><a href="http://dockone.io/article/1489" target="_blank" rel="noopener">Docker 网络方案初探</a></td></tr><tr><td>六十五</td><td><a href="http://dockone.io/article/1476" target="_blank" rel="noopener">公有云上的容器实践分享</a></td></tr><tr><td>六十四</td><td><a href="http://dockone.io/article/1445" target="_blank" rel="noopener">基于Docker实现DevOps的一些探索</a></td></tr><tr><td>六十三</td><td><a href="http://dockone.io/article/1397" target="_blank" rel="noopener">传统企业PaaS平台功能设计与业务上云思考</a></td></tr><tr><td>六十二</td><td><a href="http://dockone.io/article/1355" target="_blank" rel="noopener">站在运维的角度讲如何打造一个Docker-Mesos平台</a></td></tr><tr><td>六十一</td><td><a href="http://dockone.io/article/1347" target="_blank" rel="noopener">虚拟化老兵介绍虚拟化技术</a></td></tr><tr><td>六十</td><td><a href="http://dockone.io/article/1326" target="_blank" rel="noopener">容器的配置管理</a></td></tr><tr><td>五十九</td><td><a href="http://dockone.io/article/1289" target="_blank" rel="noopener">基于Docker的分布式服务研发实践</a></td></tr><tr><td>五十八</td><td><a href="http://dockone.io/article/1267" target="_blank" rel="noopener">基于Docker、Mesos、Ceph全新技术栈的三地三中心容灾体系之大二层网络</a></td></tr><tr><td>五十七</td><td><a href="http://dockone.io/article/1257" target="_blank" rel="noopener">Docker容器对存储的定义（Volume 与 Volume Plugin</a></td></tr><tr><td>五十六</td><td><a href="http://dockone.io/article/1253" target="_blank" rel="noopener">Kubernetes代码贡献者谈Kubernetes的发展动态</a></td></tr><tr><td>五十五</td><td><a href="http://dockone.io/article/1232" target="_blank" rel="noopener">阿里云容器服务设计实践</a></td></tr><tr><td>五十四</td><td><a href="http://dockone.io/article/1213" target="_blank" rel="noopener">双模IT给你的企业装上双引擎</a></td></tr><tr><td>五十三</td><td><a href="http://dockone.io/article/1195" target="_blank" rel="noopener">搜狐基于Docker+Kubernetes的一站式运维管理实践</a></td></tr><tr><td>五十二</td><td><a href="http://dockone.io/article/1182" target="_blank" rel="noopener">DCOS中监控和弹性伸缩方案经验分享</a></td></tr><tr><td>五十一</td><td><a href="http://dockone.io/article/1172" target="_blank" rel="noopener">基于Docker、Mesos、Ceph全新技术栈的三地三中心容灾体系</a></td></tr><tr><td>五十</td><td><a href="http://dockone.io/article/1169" target="_blank" rel="noopener">太保DCOS平台——微信项目实践</a></td></tr><tr><td>四十九</td><td><a href="http://dockone.io/article/1137" target="_blank" rel="noopener">Kubernetes集成外部服务实践</a></td></tr><tr><td>四十八</td><td><a href="http://dockone.io/article/1106" target="_blank" rel="noopener">微博的MySQL数据库优化实践经验</a></td></tr><tr><td>四十七</td><td><a href="http://dockone.io/article/1091" target="_blank" rel="noopener">Docker在乐视的实践之路</a></td></tr><tr><td>四十六</td><td><a href="http://dockone.io/article/1044" target="_blank" rel="noopener">一个关于不可变基础设施的实践案例</a></td></tr><tr><td>四十五</td><td><a href="http://dockone.io/article/1017" target="_blank" rel="noopener">基于Docker搭建轻量的私有构建环境</a></td></tr><tr><td>四十四</td><td><a href="http://dockone.io/article/996" target="_blank" rel="noopener">IT基础架构的自动化编排</a></td></tr><tr><td>四十三</td><td><a href="http://dockone.io/article/982" target="_blank" rel="noopener">基于OVS的Docker多主机互联设计和实践</a></td></tr><tr><td>四十二</td><td><a href="http://dockone.io/article/958" target="_blank" rel="noopener">关于混合云的一点思考</a></td></tr><tr><td>四十一</td><td><a href="http://dockone.io/article/942" target="_blank" rel="noopener">思源基于Docker和OpenStack的私有云平台实践</a></td></tr><tr><td>四十</td><td><a href="http://dockone.io/article/930" target="_blank" rel="noopener">用Docker和Git搭建在线开发环境</a></td></tr><tr><td>三十九</td><td><a href="http://dockone.io/article/916" target="_blank" rel="noopener">基于Docker和Git的持续集成工作流</a></td></tr><tr><td>三十八</td><td><a href="http://dockone.io/article/904" target="_blank" rel="noopener">容器服务如何在企业客户落地？Rancher解决之道分享。</a></td></tr><tr><td>三十七</td><td><a href="http://dockone.io/article/883" target="_blank" rel="noopener">玩转Docker镜像和镜像构建</a></td></tr><tr><td>三十六</td><td><a href="http://dockone.io/article/869" target="_blank" rel="noopener">基于Mesos，面向业务企业级云平台的实战分享</a></td></tr><tr><td>三十五</td><td><a href="http://dockone.io/article/860" target="_blank" rel="noopener">微服务架构云端应用</a></td></tr><tr><td>三十四</td><td><a href="http://dockone.io/article/852" target="_blank" rel="noopener">搭建企业私有Docker Registry实战分享</a></td></tr><tr><td>三十三</td><td><a href="http://dockone.io/article/831" target="_blank" rel="noopener">接触AWS近5年，谈谈我的运维经验</a></td></tr><tr><td>三十二</td><td><a href="http://dockone.io/article/812" target="_blank" rel="noopener"> 一篇文章带你了解Cloud Native</a></td></tr><tr><td>三十一</td><td><a href="http://dockone.io/article/801" target="_blank" rel="noopener">细节｜谈谈CoreOS的etcd</a></td></tr><tr><td>三十</td><td><a href="http://dockone.io/article/799" target="_blank" rel="noopener">Docker1.9新特性解读</a></td></tr><tr><td>二十九</td><td><a href="http://dockone.io/article/795" target="_blank" rel="noopener">蘑菇街基于Docker的私有云实践</a></td></tr><tr><td>二十八</td><td><a href="http://dockone.io/article/776" target="_blank" rel="noopener">OCI标准和runC原理解读</a></td></tr><tr><td>二十七</td><td><a href="http://dockone.io/article/753" target="_blank" rel="noopener">中兴软创（ZTEsoft基于Jenkins和Docker的CI实践</a></td></tr><tr><td>二十六</td><td><a href="http://dockone.io/article/747" target="_blank" rel="noopener">Docker Registry V1 to V2</a></td></tr><tr><td>二十五</td><td><a href="http://dockone.io/article/740" target="_blank" rel="noopener">企业级云平台的实践和思考</a></td></tr><tr><td>二十四</td><td><a href="http://dockone.io/article/722" target="_blank" rel="noopener">容器和IaaS：谁动了谁的奶酪</a></td></tr><tr><td>二十三</td><td><a href="http://dockone.io/article/718" target="_blank" rel="noopener">暴走漫画的Docker实践</a></td></tr><tr><td>二十二</td><td><a href="http://dockone.io/article/700" target="_blank" rel="noopener">基于Docker和Java的持续集成实践</a></td></tr><tr><td>二十一</td><td><a href="http://dockone.io/article/675" target="_blank" rel="noopener">Mesos在去哪儿网的应用</a></td></tr><tr><td>二十</td><td><a href="http://dockone.io/article/662" target="_blank" rel="noopener">Docker三剑客之Swarm介绍</a></td></tr><tr><td>十九</td><td><a href="http://dockone.io/article/635" target="_blank" rel="noopener">畅谈PaaS</a></td></tr><tr><td>十八</td><td><a href="http://dockone.io/article/618" target="_blank" rel="noopener">一篇文章带你了解Flannel</a></td></tr><tr><td>十七</td><td><a href="http://dockone.io/article/600" target="_blank" rel="noopener">360的容器化之路</a></td></tr><tr><td>十六</td><td><a href="http://dockone.io/article/578" target="_blank" rel="noopener">闲谈Kubernetes的主要特性和经验分享</a></td></tr><tr><td>十五</td><td><a href="http://dockone.io/article/563" target="_blank" rel="noopener">如何在裸机中自动安装部署CoreOS和Kubernetes</a></td></tr><tr><td>十四</td><td><a href="http://dockone.io/article/537" target="_blank" rel="noopener">腾讯蓝鲸数据平台之告警系统</a></td></tr><tr><td>十三</td><td><a href="http://dockone.io/article/519" target="_blank" rel="noopener">十个问题带你了解WindowsDocker</a></td></tr><tr><td>十二</td><td><a href="http://dockone.io/article/505" target="_blank" rel="noopener">新浪是如何分析处理32亿条实时日志的？</a></td></tr><tr><td>十一</td><td><a href="http://dockone.io/article/487" target="_blank" rel="noopener">DockerCon 见闻</a></td></tr><tr><td>十</td><td><a href="http://dockone.io/article/478" target="_blank" rel="noopener">跨主机的 –link</a></td></tr><tr><td>九</td><td><a href="http://dockone.io/article/470" target="_blank" rel="noopener">持续集成和”云”</a></td></tr><tr><td>八</td><td><a href="http://dockone.io/article/445" target="_blank" rel="noopener">OpenStack Magnum社区及项目介绍</a></td></tr><tr><td>七</td><td><a href="http://dockone.io/article/425" target="_blank" rel="noopener">基于Hypervisor的Docker引擎——Hyper</a></td></tr><tr><td>六</td><td><a href="http://dockone.io/article/416" target="_blank" rel="noopener">新浪SCE Docker最佳实践</a></td></tr><tr><td>五</td><td><a href="http://dockone.io/article/402" target="_blank" rel="noopener">Docker网络详解及Libnetwork前瞻</a></td></tr><tr><td>四</td><td><a href="http://dockone.io/article/383" target="_blank" rel="noopener">AppC和Docker的对比</a></td></tr><tr><td>三</td><td><a href="http://dockone.io/article/375" target="_blank" rel="noopener">Docker Registry的定制和性能分析</a></td></tr><tr><td>二</td><td><a href="http://dockone.io/article/355" target="_blank" rel="noopener">集群规模下日志处理和网络方案</a></td></tr><tr><td>一</td><td><a href="http://dockone.io/article/346" target="_blank" rel="noopener">Dockerfile与Docker构建流程解读</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;README&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://blog.502.li/tags/kubernetes/"/>
    
      <category term="docker" scheme="https://blog.502.li/tags/docker/"/>
    
      <category term="分享" scheme="https://blog.502.li/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="DockOne 微信分享汇总" scheme="https://blog.502.li/tags/DockOne-%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>给 VMware vSphere 用户的 Kubernetes 简介</title>
    <link href="https://blog.502.li/archives/Kubernetes-Introduction-for-VMware-Users-zh.html"/>
    <id>https://blog.502.li/archives/Kubernetes-Introduction-for-VMware-Users-zh.html</id>
    <published>2019-12-10T05:00:00.000Z</published>
    <updated>2020-01-02T14:35:23.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul><li>2019-12-10 初步开始翻译</li><li>2019-12-11 补充完整</li><li>2019-12-20 校稿</li></ul><h2 id="README"><a href="#README" class="headerlink" title="README"></a>README</h2><p>本文翻译自 <a href="https://blogs.vmware.com/cloudnative/2017/10/25/kubernetes-introduction-vmware-users/" target="_blank" rel="noopener">Kubernetes Introduction for VMware Users – Part 1: The Theory</a></p><p>By Hany Michaels, Senior Staff Solutions Architect NSBU, VMware</p><p>October 25, 2017</p><p>四六级未过的工地英语翻译、希望各位读者雅正翻译不当的部分😁</p><blockquote><h2 id="Kubernetes-Introduction-for-VMware-Users-–-Part-1-The-Theory"><a href="#Kubernetes-Introduction-for-VMware-Users-–-Part-1-The-Theory" class="headerlink" title="Kubernetes Introduction for VMware Users – Part 1: The Theory"></a>Kubernetes Introduction for VMware Users – Part 1: The Theory</h2></blockquote><h2 id="给-VMware-用户的-Kubernetes-简介——第一部分：理论"><a href="#给-VMware-用户的-Kubernetes-简介——第一部分：理论" class="headerlink" title="给 VMware 用户的 Kubernetes 简介——第一部分：理论"></a>给 VMware 用户的 Kubernetes 简介——第一部分：理论</h2><blockquote><p>This is the second part of my “Kubernetes in the Enterprise” blog series. As I mentioned in my <a href="http://www.hanymichaels.com/2017/10/04/kubernetes-in-the-enterprise-a-vmware-guide-on-how-to-design-deploy-and-operate-k8saas-with-nsx-t-and-vra/" target="_blank" rel="noopener">last article</a>, it is important to get everyone to the same level of understanding about Kubernetes (<a href="https://kubernetes.io/" target="_blank" rel="noopener">K8s</a>) before we can proceed to the design and implementation guides.</p></blockquote><p>这是我的“ kubernetes 在企业中应用” 博客系列的第二篇文章。正如我在上一篇文章提到的，在我们继续设计与实现指南之前，重要的是让每个人对 kubernetes 的理解都是相同水平的。</p><blockquote><p>I am not going to take the traditional approach here to explain the Kubernetes architecture and technologies. I will explain everything through comparisons with the <a href="https://www.vmware.com/products/vsphere.html" target="_blank" rel="noopener">vSphere platform</a> that you, as a VMware user, are already familiar with. You can say that this was the approach I would have liked someone to use to introduce K8s to me. The latter could be very confusing and overwhelming to understand at the beginning. I’d like to add also that I used this approach internally at VMware to introduce Kubernetes to some audiences from different practices, and it has proven to work great and get people up to speed with the core concepts.</p></blockquote><p>在这里，我不打算采用传统的方法来讲解 Kubernetes 的架构和技术。我将通过与 <a href="https://www.vmware.com/products/vsphere.html" target="_blank" rel="noopener">vSphere 平台</a> 的比较来为你解释所有的概念，对你来讲 VMware 已经相当熟悉了。你可以说，这就是我希望别人向我介绍 k8s 的方法。后者在一开始可能会让人感到非常困惑和难以理解。我还想补充一点，我在 VMware 内部也是使用这种方法向来自不同实践的听众们介绍 Kubernetes。</p><blockquote><p>An important note before we kick this off: I am not using this comparison for the sake of it, or to prove any similarities or differences between vSphere and Kubernetes. Both are distributed systems at heart, and they must have similarities like any other similar system out there. What I am trying to achieve here at the end of the day is to introduce an incredible technology like Kubernetes to the broader VMware community.</p></blockquote><p>在此之前有一个重要提示：我不是为了介绍 Kubernetes 而使用这个比较，也不是为了证明 vSphere 和 Kubernetes 之间存在的任何异同之处。两者的核心都是分布式系统，它们肯定有着其他分布式系统的相似之处。最后，我想在这里实现的目标是向更广泛的 VMware 社区介绍像 Kubernetes 这样不可思议的技术。</p><p><img src="../img/kubernetes-architecture-1024x512.png" alt="Kubernetes"></p><blockquote><p>Figure: The Kubernetes overall architecture compared to vSphere</p></blockquote><p>图片：Kubernetes 和 vSphere 整体架构对比</p><blockquote><h2 id="A-little-bit-of-history"><a href="#A-little-bit-of-history" class="headerlink" title="A little bit of history"></a>A little bit of history</h2></blockquote><h2 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h2><blockquote><p>You should already be familiar with containers before reading this post. I am not going to go through those basics as I am sure there are so many resources out there that talk about this. What I see very often though when I speak with my customers is that they cannot make much sense of why containers have taken our industry by storm and become very popular in record time. To answer this question, and in fact set the context for what is coming, I may have to tell you a little bit about my history as a practical example of how I personally made sense of all the shift that is happening in our industry.</p></blockquote><p>在阅读这篇文章之前，你应该已经熟悉容器技术了。在此我就不再赘述这些基础知识了，因为我敢肯定网上有很多教程在讲解这些。不过，当我与客户交谈时，我经常注意到，他们无法理解为什么容器技术席有史以来席卷了我们的行业并变得非常流行。为了回答这个问题，并为接下来的内容做铺垫，我可能需要向你介绍一下我的历史，以此作为一个实际的例子，来阐述我个人如何理解行业中正在发生的转变。</p><blockquote><p>I used to be a web developer back in 2003 before I got introduced to the telecom world, and it was my second paying job after being a network engineer/admin. (I know, I was a jack-of-all-trades back then). I used to code in PHP, and I’ve done all sorts of applications from small internal apps used by my employer, to professional voting apps for TV programs, to telco apps interfacing with VSAT hubs and interacting with satellite systems. Life was great, except for one major hurdle that I am sure every developer can relate to: the dependencies.</p></blockquote><p>早在 2003 年进入电信行业之前，我刚成为一名 web 开发者，这是我在成为网络工程师/管理员之后的第二份有薪工作。（我知道，那时的我是个万事通）。我过去使用 PHP 编写代码，我开发过各种各样的应用，从我的雇主使用的小型内部应用，到电视节目的专业投票应用，再到与 VSAT 集线器接口和卫星系统交互的电信应用程序。生活是美好的，除了一个主要的障碍，我相信每个开发人员涉及到：依赖。</p><blockquote><p>I first code my app on my laptop using something like the LAMP stack, and when it works well, I upload the source code to the servers, be it hosted out on the internet (anyone remember RackShack?) or on private servers for our end-customers. As you can imagine, as soon as I do that, my app is broken and it just won’t work on those servers. The reason, of course, is that the dependencies I use (like Apache, PHP, MySQL, etc.) have different releases than what I used on my laptop. So I have to figure out a way to either upgrade those releases on the remote servers (bad idea) or just re-code what I did on my laptop to match the remote stacks (worse idea). It was a nightmare, and sometimes I hated myself and questioned why I’m doing this for a living.</p></blockquote><p>首先我在我的笔记本电脑上用 LAMP 技术栈编写我的应用程序。当就绪时，我上传源代码到托管在互联网的服务器上（谁还记得 RackShack？）或者我们终端客户的私有服务器上。可以想象，只要我这样做，我的应用程序是不完整的，它就无法在这些服务器上运行。原因当然是我在这些服务器上所使用的依赖环境（如 Apache、PHP、MySQL 等）的版本与我在笔记本电脑上使用的版本不同。因此，我必须想办法升级远程服务器上的这些版本（馊主意），或者只是重新编写我在笔记本电脑上所做的代码，以匹配远程技术栈（更糟糕的办法）。那是一场噩梦，有时我恨自己并质疑我为什么要这么做。</p><blockquote><p>Fast forward 10 years, and along came a company called Docker. I was a VMware consultant in professional services (2013) when I heard about Docker, and let me tell you that I couldn’t make any sense of that technology back in those days. I kept saying things like: “Why would I run containers when I can do that with VMs?” “Why would I give up important features like vSphere HA, DRS or vMotion for those weird benefits of booting up a container instantly or skipping the “hypervisor” layer?” In short, I was looking at this from a pure infrastructure perspective.</p></blockquote><p>快进10年，随之而来的是一家名为 Docker 的公司。当我听说 Docker 时，我是一名 VMware 专业服务顾问（2013 年）。你有所不知，那时的我对这种技术一无所知。我总是这样说：”为什么当我能够使用 VM 时非要运行容器呢？“，”我为什么要放弃重要特性，如 vSphere HA、DRS 或 vMotion，为了快速启动容器或跳过 <code>虚拟机管理程序</code>层所带来的好处？”。简而言之，我是从纯粹的基础架构角度来看待这个问题的。</p><blockquote><p>But then I started looking closer until it just hit me. Everything Docker is all about relates to developers. Only when I started thinking like one did it click. What if I had this technology back in 2003 and packaged my dependencies? My web apps would work no matter what server they run on. Better yet, I don’t have to keep uploading source code or setting up anything special. I can just “package” my app in an image and tell my customer to download that image and run it. That’s a web developer’s dream!</p></blockquote><p>但后来我开始基础容器技术，直到它刚刚冲击到我。Docker 的所有内容都与开发者有关。只有当我开始像一个人一样思考时，它才击中要害。如果我在 2003 年拥有此技术并打包了依赖关系，该怎么办？无论在什么服务器上运行，我的 Web 应用都会工作。更好的是，我不需要继续上传源代码或设置任何特别的东西。我可以在镜像中”打包”我的应用程序，并告诉我的客户下载该镜像并运行它。这是一个 web 开发者的梦想！</p><blockquote><p>Docker solved a huge issue for interop and packaging, but now what? As an enterprise customer, how can I operate this app at scale? I still want my HA, my DRS, my vMotion and my DR. It solved my developer problems and it created a whole bunch of new ones for my DevOps team. They need a platform to run those containers the same way they used to run VMs.</p></blockquote><p>Docker 解决了交互和打包的一个大问题，但现在怎么办？作为企业客户，我如何大规模操作此应用程序？我仍然想要我的 HA、我的 DRS、我的 vMotion 和我的 DR。它解决了我的开发人员的问题，并为我的 DevOps 团队创建了一大堆新的问题。他们需要一个平台来运行这些容器，就像他们用来运行 VM 一样。</p><blockquote><p>But then along came Google to tell the world that it has been actually running containers for years (and in fact invented them – Google: cgroups), and that the proper way to do that is through a platform they called Kubernetes. They then open sourced it, gave it as gift to the community, and that changed everything again.</p></blockquote><p>但是后来 Google 告诉世界，他们实际上运行容器很多年了（其实是他们发明的 - Google: cgroups），而这样做的正确方法是通过一个称为 Kubernetes平台，然后他们把 Kubernetes 作为礼物开源给了社区 ，这再次改变了一切。</p><blockquote><h2 id="Understanding-Kubernetes-by-comparing-it-to-vSphere"><a href="#Understanding-Kubernetes-by-comparing-it-to-vSphere" class="headerlink" title="Understanding Kubernetes by comparing it to vSphere"></a>Understanding Kubernetes by comparing it to vSphere</h2></blockquote><h2 id="通过和-vSphere-的比较来理解-Kubernetes"><a href="#通过和-vSphere-的比较来理解-Kubernetes" class="headerlink" title="通过和 vSphere 的比较来理解 Kubernetes"></a>通过和 vSphere 的比较来理解 Kubernetes</h2><blockquote><p>So what is Kubernetes? Simply put: it is to containers what vSphere was for VMs to make them data center ready. If you used to run VMware Workstation back in the early 2000s, you know that they were not seriously considered for running inside data centers. Kubernetes brings a way to run and operate containers in a production-ready manner. This is why we will start to compare vSphere side-by-side with Kubernetes in order to explain the details of this distributed system and get you up to speed on its features and technologies.</p></blockquote><p>那么什么是 Kubernetes 呢？简单地说：Kubernetes 之于容器就像 vSphere 之于 VM 为 VM 准备好数据中心。如果你曾经在 21 世纪初运行过 VMware 工作站，你知道他们并未认真考虑在数据中心内部运行。Kubernetes 带来了一种以生产可用的方式来运行和操作容器的方法。这就是为什么我们将开始将 vSphere 与 Kubernetes 进行横向比较，以便解释此分布式系统的细节，并让你快速了解 Kubernetes 的特性和技术。</p><p><img src="../img/p2p3-1024x375.png" alt="Kubernetes"></p><blockquote><p>Figure: The VM evolution from Workstation to vSphere compared to the current evolution for containers to Kubernetes</p></blockquote><p>图片：从容器到 Kubernetes 的与VM 从 Workstation 到 vSphere 演进的对比</p><blockquote><h2 id="System-Overview"><a href="#System-Overview" class="headerlink" title="System Overview"></a>System Overview</h2></blockquote><h2 id="系统概览"><a href="#系统概览" class="headerlink" title="系统概览"></a>系统概览</h2><blockquote><p>Just like vSphere’s vCenter and ESXi hosts, Kuberentes has the concept of master and nodes. In this context, the K8s master is equivalent to vCenter in that it is the management plane of the distributed system. It is also the APIs’ entry point where you interact with your workloads management. Similarly, the K8s nodes act as the compute resources like ESXi hosts. This is where you run your actual workloads (in K8s’ case we call them pods). The nodes could be virtual machines or physical servers. In vSphere’s case, of course, the ESXi hosts have to be physical always.</p></blockquote><p>与 vSphere 的 vCenter 和 ESXi 主机一样，Kuberentes 具有 master 节点和 node 节点的概念。在此处，K8s 中的 master 等效于 vCenter，因为它是分布式系统中的控制平面。也是你在集群中管理工作负载的 API 的入口。同样，K8s 中的节点充当像 ESXi 主机一样的计算资源。这里运行着实际工作负载（在 K8s 的实例中，我们称之为 Pod）。节点可以是虚拟机或物理服务器。当然，在 vSphere 中，ESXi 主机必须是物理机。</p><p><img src="../img/kubernetes-system-1024x624.png" alt="Kubernetes"></p><p>You can see also that K8s has a key-value store called “etcd.” It is similar to vCenter Server DB in that you store the cluster configuration as the desired state you want to adhere to there.</p><blockquote><p>你还可以看到 K8s 具有名为”etcd”的数据库来存储键值对。它类似于 vCenter 服务器 DB，将群集配置存储为你期望的期望状态。</p></blockquote><blockquote><p>On the differences side, K8s master can also run workloads, but vCenter cannot. The latter is just a virtual appliance dedicated to management. In K8s master case, it’s still considered a compute resource, but it’s not a good idea to run enterprise apps on it. Only system related apps would be fine.</p></blockquote><p>不同的是，K8s master 节点也可以运行工作负载，但 vCenter 不能运行。后者只是专用于管理的虚拟机。在 K8s master 节点，它仍然被视为计算资源，但并不建议用来运行企业应用。 master 节点只适合运行与 kubernetes 系统相关的应用。</p><blockquote><p>So, how does this look in the real world? You will mainly use CLI to interact with this system (GUI is also a viable option). In the screenshot below, you can see that I am using a Windows machine to connect to my Kubernetes cluster via command like (I am using cmder in case you are wondering). We see in the screenshot that I have one master and 4 x nodes. They run K8s v1.6.5, and the nodes operating system is Ubuntu 16.04. At the time of this writing, we are mainly living in a Linux world where your master and nodes are always based on Linux distributions.</p></blockquote><p>那么，在现实世界中是怎样的呢？你将主要使用 CLI 与此系统进行交互（GUI 也是一个可行的选项）。在下面的截图中，你可以看到我在 Windows 计算机上使用类似的命令（使用的是 cmder）连接到我的 Kubernetes 群集。我们在截图中看到，我有一个 master 节点和 4 个 node 节点。集群运行 K8s v1.6.5，节点操作系统为 Ubuntu 16.04。在撰写本文时，我们主要生活在 Linux 世界中，master 节点和 node 节点始终基于 Linux 发行版。</p><p><img src="../img/clidash-1024x563.png" alt="Kubernetes"></p><blockquote><h2 id="Workloads-Form-factor"><a href="#Workloads-Form-factor" class="headerlink" title="Workloads Form-factor"></a>Workloads Form-factor</h2></blockquote><h2 id="工作负载"><a href="#工作负载" class="headerlink" title="工作负载"></a>工作负载</h2><blockquote><p>In vSphere, a virtual machine is the logical boundary of an operating system. In Kubernetes, pods are the boundaries for containers. Just like an ESXi host that can run multiple VMs, a K8s node can run multiple pods. Each Pod gets a routed IP address just like VMs to communicate with other pods.</p></blockquote><p>在 vSphere 中，虚拟机是操作系统的逻辑边界。而在 Kubernetes ，pods 是容器的边界。与可以运行多个 VM 的 ESXi 主机一样，K8s 节点可以运行多个 Pod。每个 Pod 获取路由 IP 地址，就像 VM 一样与其他 Pod 进行通信。</p><blockquote><p>In vSphere, applications run inside OS. In Kubernetes, applications run inside containers. A VM can run one single OS, while a Pod can run multiple containers.</p></blockquote><p>在 vSphere 中，应用程序在操作系统内运行。而在 Kubernetes 中，应用程序在容器内运行。VM 可以运行单个操作系统，而 Pod 却可以运行多个容器。</p><p><img src="../img/kubernetes-pods-1024x486.png" alt="Kubernetes"></p><blockquote><p>This is how you can list the pods inside a K8s cluster using the kubectl tool from the CLI. You can check the health of the pods, the age, the IP addresses and the nodes they are currently running inside.</p></blockquote><p>这是使用 CLI 中的 kubectl 工具列出 K8s 群集中的 Pod 的方式。你可以检查 Pod 的运行状况、创建时间、IP 地址以及它们当前运行在哪个节点。</p><p><img src="../img/cli2-1024x450.png" alt="Kubernetes"></p><blockquote><h2 id="Management"><a href="#Management" class="headerlink" title="Management"></a>Management</h2></blockquote><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><blockquote><p>So how do we manage our master, nodes and pods? In vSphere, we use the Web Client to manage most (if not all) the components in our virtual infrastructure. This is almost the same with Kubernetes with the use of the Dashboard. It is a nice GUI-based web portal where you can access your browser similarly to  Web Client. We’ve also seen in the previous sections that you can manage your K8s cluster using the kubectl command from the CLI. It’s always debatable where you will spend most of your time — the CLI or the Dashboard, especially because the latter is becoming more powerful every day (check <a href="https://www.youtube.com/watch?v=3lhf7T9Bp2E" target="_blank" rel="noopener">this video</a> for more details). I personally find the Dashboard very convenient for quickly monitoring the health or showing the details of the various K8s components rather than typing long commands. It’s a preference, and you will find the balance between them naturally.</p></blockquote><p>那么，我们如何管理主机、节点和 Pod 呢？在 vSphere 中，我们使用 Web 客户端来管理虚拟化基础架构中的大多数（如果不是全部）组件。这和在 Kubernetes 使用仪表盘一样。这是一个通过浏览器访问、基于 GUI 、类似于 web 客户端的门户网站。我们在前几节中还看到，你可以使用  kubectl 命令来管理 K8s 群集。你总是在大部分时间里花在哪里——CLI 或仪表盘，特别是因为后者每天都在变得更强大（请查看<a href="https://www.youtube.com/watch?v3lhf7T9Bp2E" target="_blank" rel="noopener">此视频</a>，了解更多详情）。我个人认为仪表盘非常方便，可以快速查看运行状况或显示各种 k8s 组件的详细信息，而不是输入很长的命令。这是个人喜好，你会自然地在两者之间找到平衡。</p><p><img src="../img/kubernetes-management-1024x469.png" alt="Kubernetes"></p><blockquote><h2 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h2></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>One of the very profound concepts in Kubernetes is the desired state of configurations. You declare what you want for almost any Kubernetes component through a YAML file, and you create that using your kubectl (or through dashboard) as your desired state. Kubernetes will always strive from this moment on to keep that as a running state in your environment. For example, if you want to have four replicas of one pod, K8s will keep monitoring those pods. If one dies or the nodes it’s running have issues, it will self-heal and automatically create that pod somewhere else.</p></blockquote><p>Kubernetes 中非常重要的概念之一是所描述的配置状态。通过 YAML 文件几乎可以声明任何 Kubernetes 组件所需的资源，并使用 kubectl 命令（或通过仪表盘）创建该对象作为所描述的状态。从创建后开始，在你的集群中Kubernetes 始终会努力将保持为所描述的运行状态。例如，如果要有一个 pod 的四个副本，K8s 将继续监视这些pod。如果一个 pod 挂掉或它正在运行的节点有问题，它将自我修复，并自动在其他节点创建该 pod 。</p><blockquote><p>Back to our YAML configuration files — you can think of them like a .VMX file for a VM, or a .OVF descriptor for a virtual appliance that you want to deploy in vSphere. Those files define the configuration of the workload/component you want to run. Unlike VMX/OVF files that are exclusive to VMs/Appliances, the YAML configuration files are used to define any K8s component like ReplicaSets, Services, Deployments, etc. as we will see in the coming sections.</p></blockquote><p>回到我们的 YAML 配置文件 — 你可以将它们想象成 一个描述 VM 或 的 .VMX 文件或者在 vSphere 中部署虚拟设备所需的 .OVF 描述符文件。这些文件定义要运行的工作负载/组件的配置。与 VMX/OVF 文件是 VM/设备独有的不同的是，YAML 配置文件用于定义任何 K8s 组件，如 ReplicaSets、Services、 Deployments 等，我们将在下一节中讨论。</p><p><img src="../img/kubernetes-confiugrations-1024x511.png" alt="Kubernetes"></p><blockquote><h2 id="Virtual-Clusters"><a href="#Virtual-Clusters" class="headerlink" title="Virtual Clusters"></a>Virtual Clusters</h2></blockquote><h2 id="虚拟化集群"><a href="#虚拟化集群" class="headerlink" title="虚拟化集群"></a>虚拟化集群</h2><p>In vSphere, we have physical ESXi hosts grouped logically to form clusters. We can slice those clusters into other virtual clusters called “Resource Pools.” Those resource pools are mostly used for capping resources. In Kubernetes, we have something very similar. We call them “namespaces,” and they could also be used to ensure resource quotas as we will see in the next section. They are most commonly used, however, as a means of multi-tenancy across applications (or users if you are using shared K8s clusters). This is also one of the ways  we can perform security segmentation with NSX-T across those namespaces as we will see in future posts.</p><p>在 vSphere 中，我们将 ESXi 物理机逻辑分组以形成群集。我们可以将这些群集分割成其他虚拟化群集，称为”资源池”。这些资源池主要用于限制资源。在 Kubernetes 中，我们有一些非常相似的东西。我们称之为”命名空间”，它们还可用于确保资源配额，我们将在下一节中看到。但是，它们最常用作跨应用程序（或者使用共享 K8s 群集的用户）的多租户方法。这也是我们可以在这些命名空间使用 NSX-T 执行安全分段的方法之一，我们将在以后的帖子中看到。</p><p><img src="../img/kubernetes-namespaces-1024x651.png" alt="Kubernetes"></p><blockquote><h2 id="Resource-Management"><a href="#Resource-Management" class="headerlink" title="Resource Management"></a>Resource Management</h2></blockquote><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><blockquote><p>As I mentioned in the previous section, namespaces in Kubernetes are commonly used as a means of segmentation. The other use case for it is resource allocation, and it is referred to as “Resource Quotas.” As we saw in previous sections, the definition of that is through YAML configuration files where we declare the desirted state. In vSphere, we similarly define this from the Resource Pools settings as you see in the screenshot below.</p></blockquote><p>正如我在上一节中提到的那样，Kubernetes 中通常用命名空间来进行划分。它的另一个用途是资源分配，称之为”资源配额”。正如我们在前面各节中所看到的，它的定义是通过 YAML 配置文件来声明期所望的状态。在 vSphere 中，我们同样从资源池设置中定义这一点，如下图所示。</p><p><img src="../img/kubernetes-resource-quotas.png" alt="Kubernetes"></p><blockquote><h2 id="Workloads-Identification"><a href="#Workloads-Identification" class="headerlink" title="Workloads Identification"></a>Workloads Identification</h2></blockquote><h2 id="标记工作负载"><a href="#标记工作负载" class="headerlink" title="标记工作负载"></a>标记工作负载</h2><blockquote><p>This is fairly easy and almost identical between vSphere and Kubernetes. In the former, we use the concepts of tags to identify or group similar workloads, while in the latter we use the term “labels” to do this. In Kubernetes’ case, this is mandatory where we use things like “selectors” to identify our containers and apply the different configurations for them.</p></blockquote><p>标记工作负载相当容易且 vSphere 和 Kubernetes 几乎一样。在 vSphere 中，我们使用 tags 的概念来识别或分组相似的工作负载，而在 Kubernetes 中，我们使用术语”labels”来执行此操作。在 Kubernetes 的案例中，我们强制使用”选择器”之类来识别我们的容器并为其应用不同的配置。</p><p><img src="../img/kubernetes-labels-1024x331.png" alt="Kubernetes"></p><blockquote><h2 id="Redundancy"><a href="#Redundancy" class="headerlink" title="Redundancy"></a>Redundancy</h2></blockquote><h2 id="冗余"><a href="#冗余" class="headerlink" title="冗余"></a>冗余</h2><blockquote><p>Now to the real fun. If you were/are a big fan of vSphere FT like me, you will love this feature in Kubernetes despite some differences in the two technologies. In vSphere, this is a VM with a running instance and a shadow one in a lock-step. We record the instructions from the running instance and replay it in the shadow VM. If the running instance goes down, the shadow VM kicks in immediately. vSphere then tries to find another ESXi host to bring another shadow instance to maintain the same redundancy. In Kubernetes, we have something very similar here. The ReplicaSets are a number you specify to run multiple instances of a pod. If one pod goes down, the other instances are available to serve the traffic. In the same time, K8s will try to bring up a substitute for that pod on any available node to maintain the desired state of the configuration. The major difference, as you may have already noticed, is that in the case of K8s, the pod instances are always live and service traffic. They are not shadowed workloads.</p></blockquote><p>精彩现在开始。如果你和我一样热衷于 vSphere FT，在 Kubernetes 中你会喜欢这个特性，尽管这两个技术有一些差异。在 vSphere 中，vSphere FT 是一个具有正在运行的 VM 影子实例 。我们记录正在运行的实例中的指令，并在卷影 VM 中重新执行它。如果正在运行的实例出现故障，则卷影 VM 会立即启动。然后，vSphere 会尝试寻找另一台 ESXi 主机，来导入另一个卷影 VM 实例以维护相同的冗余。在 Kubernetes 中也有类似的特性。副本集用来运行指定的数量 pod 的实例。如果一个 pod 出现故障，则其他 pod 实例可继续对外流量提服务。与此同时，K8s 将尝试将该 pod 调度到任何可用节点上，以维持配置文件所描述的状态。你可能已经注意到，主要区别是，在 K8s 中，pod 实例始终是存活状态并对外提供服务，它们并不是隐藏的工作负载。</p><p><img src="../img/kuberentes-replicasets-1024x546.png" alt="Kubernetes"></p><blockquote><h2 id="Load-Balancing"><a href="#Load-Balancing" class="headerlink" title="Load Balancing"></a>Load Balancing</h2></blockquote><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><blockquote><p>While this might not be a built-in feature in vSphere, it is still a common thing to run load-balancers on that platform. In the vSphere world, we have either virtual or physical load-balancers to distribute the network traffic across multiple VMs. This could be running in many different configuration modes, but let’s assume here that we are referring to the one-armed configuration. In this case, you are load-balancing your network traffic east-west to your VMs.</p></blockquote><p>虽然负载均衡可能不是 vSphere 中的内置功能，但在该平台上运行负载均衡器很普遍。在 vSphere 中，我们有虚拟或物理负载均衡器，用于在多个 VM 之间均衡网络流量。这可能在许多不同的配置模式下运行，但让我们在这里假设我们指的是单兵配置。在这种情况下，你将从东到西到 VM 的网络流量进行负载平衡。</p><blockquote><p>Similarly in Kubernetes, we have the concepts of “Services.” A K8s Service could also be used in different configuration modes, but let’s pick the “ClusterIP” configuration here to compare to the one-armed LB. In this case, our K8s Service will have a virtual IP (VIP) that is always static and does not change. This VIP will distribute the traffic across multiple pods. This is especially important in the Kubernetes world were pods are ephemeral by nature and where you lose the pod IP address the moment it dies or gets deleted. So you have to always be able to maintain a static VIP.</p></blockquote><p>同样，在 Kubernetes 中，我们有”服务”的概念。K8s 服务，但让我们在这里选择”ClusterIP”配置，以便与单臂 LB 进行比较。在这种情况下，我们的 K8s 服务将有一个始终静态且不会更改的虚拟 IP （VIP）。此 VIP 将在多个 Pod 上分配流量。这一点在 Kubernetes 世界尤其重要，因为吊舱本质上是短暂的，当你死或被删除的时候，你失去了 pod IP地址。因此，你必须始终能够维护静态 VIP。</p><blockquote><p>As I mentioned, the Services have many other configurations like “NodePort,” where you basically assign a port on the node level and then do a port-address-translation down to the pods. There is also the “LoadBalancer,” where you spin up an LB instance from a 3rd-party or a cloud provider.</p></blockquote><p>正如我提到的， Services 具有许多其他配置，如”NodePort”，其中你基本上在节点级别上分配一个端口，然后向下到 Pod 执行端口地址转换。还有”LoadBalancer”，从第三方或云提供商启动 LB 实例。</p><p><img src="../img/kubernetes-services-1024x389.png" alt="Kubernetes"></p><blockquote><p>There is another very important load-balancing mechanism in Kuberentes called “Ingress Controller.” You can think of this like an in-line application load-balancer. The core concept behind this is that an ingress-controller (in a form of pod) would be spun up with an externally visible IP address, and that IP could have something like a wild card DNS record. When traffic hits an ingress-controller using the external IP, it will inspect the headers and determine through a set of rules you pre-define to which pod that hostname should belong. Example: <em>sphinx-v1</em>.esxcloud.net will be directed to the service “sphinx-svc-1”, while the <em>sphinx-v2</em>.esxcloud.net will be directed to the service “sphinx-svc2” and so on and so forth.</p></blockquote><p>在 Kuberentes 中还有另一个非常重要的负载均衡机制，称之为” Ingress 控制器”。你可以把它当作一个在线应用负载均衡器。The core concept behind this is that an ingress-controller (in a form of pod) would be spun up with an externally visible IP address, and that IP could have something like a wild card DNS record. 当流量使用 external IP 进入 ingress 控制器时，它将检查请求头部并通过主机名来判断流量应属于哪个一组 pod 。示例：<em>sphinx-v1</em>.esxcloud.net 将定向到服务”sphinx-svc-1”，而 <em>sphinx-v2</em>.esxcloud.net 将重定向到服务”sphinx-svc2”等。</p><p><img src="../img/kubernetes-ingress-1024x532.png" alt="Kubernetes"></p><blockquote><h2 id="Storage-amp-Networking"><a href="#Storage-amp-Networking" class="headerlink" title="Storage &amp; Networking"></a>Storage &amp; Networking</h2></blockquote><h2 id="存储和网络"><a href="#存储和网络" class="headerlink" title="存储和网络"></a>存储和网络</h2><blockquote><p>Storage and networking are rich topics when it comes to Kubernetes. It is almost impossible to talk briefly about these two topics in an introduction blog post, but you can be sure that I will be blogging in details soon about the different concepts and options for each subject. For now, let’s quickly examine how the networking stack works in Kubernetes since we will have a dependency on it in a later section.</p></blockquote><p>当谈到到 Kubernetes 时，存储和网络是重点关注的话题。在介绍性的博客文章中简要地谈论这两个主题几乎是不可能的，但你可以肯定，我将很快在博客上详细介绍每个主题的不同概念和特性。现在，让我们快速研究一下网络堆栈在 Kubernetes 中是如何工作的，因为我们将在后面的一节中依赖于它。</p><blockquote><p>Kubernetes has different networking “plugins” that you can use to set up your nodes and pods network. One of the common plugins is “kubenet,” which is currently used on mega-clouds like Google Cloud Provider (GCP) and Amazon Web Services. I am going to talk briefly here about the GCP implementation and then show you a practical example later to examine this yourself on Google Container Engine (GKE).</p></blockquote><p>Kubernetes 具有不同的网络”插件”，你可以使用这些插件来设置节点和 Pod 网络。常见的插件之一是”kubenet”，它目前用于像谷歌云提供商（GCP）和亚马逊网络服务这样的云服务商巨头。我将在这里简要地谈谈 GCP 的实现，然后向你展示一个可以在谷歌容器引擎（GKE）上亲自研究的实例。</p><p><img src="../img/gke-kubernetes-networking-1024x747.png" alt="Kubernetes"></p><blockquote><p>This might be a bit too much to take in from a first glance, but hopefully you will be able to make sense of all that by the end of this blog post. First, we see that we have two Kubernetes nodes here: node 1 and node (m). Each node has an eth0 interface like any Linux machine, and that interface has an IP address to the external world—in our case here on subnet 10.140.0.0/24. The upstream L3 device is acting as our default gateway to route our traffic. This could be a L3 switch in your data center or a VPC router in a public cloud like GCP as we will see later. So far so good?</p></blockquote><p>乍一看，这也许有点太过分了，但希望你能在博客文章的结尾理解这一切。首先，我们看到我们这里有两个 Kubernetes 节点：节点 1 和节点 （m）。每个节点都像其他 Linux 机器一样具有 eth0 接口，并且该接口具有 10.140.0.0/24 子网内的 IP 地址。上游 L3 设备充当我们的默认网关，用于路由我们的流量。这可能是数据中心中的 L3 交换机，也可以是公共云中的 VPC 路由器（如 GCP），我们稍后将对此进行介绍。目前为止，还可以理解吗？</p><blockquote><p>Next, we see inside the node that we have a <strong>cbr0</strong> bridge interface. That interface has the default gateway of an IP subnet—10.40.1.0/24 in case of node 1. This subnet gets assigned by Kubernetes to each node. The latter usually get a /24 subnet, but you can control that in case of NSX-T as we will see in future posts. For now, this subnet is the one that we will allocate the pod’s IP addresses from. Any pod inside node 1 will get an IP address from this subnet rage—in our case here, Pod 1 has an IP address of 10.40.1.10. Notice however that this pod has two nested containers within. Remember, a pod can run one or more containers that are tightly coupled together in terms of functionality. This is what we see here. Container 1 is listening to port 80, while container 2 is listening to port 90. Both containers share the same IP address of 10.40.1.10. but they do not own that networking namespace. Alright, so who owns this networking stack then? It’s actually a special container that we call the “Pause Container.” You see it in the diagram as the interface of that pod to the outer world. It owns this networking stack, including the IP address 10.40.1.10 and, of course, it forwards the traffic to container 1 using port 80 and traffic to container 2 using port 90.</p></blockquote><p>接下来，我们看到在节点内，有一个 <code>cbr0</code> 网桥接口。该接口具有 IP 子网的默认网关 —在节点 1 的情况下—：10.40.1.0/24。此子网由 Kubernetes 分配给每个节点。后者通常得到一个 24 位的子网，但你可以控制在 NSX-T 的情况下，我们将在以后的帖子中看到。现在，此子网是我们将从中分配 Pod 的 IP 地址的子网。节点 1 内的任何 pod 都将从此子网中获得 IP 地址， 在我们的实例中，Pod 1 的 IP 地址为 10.40.1.10。但请注意，此 pod 内有两个容器。请记住，pod 可以运行一个或多个在功能方面紧密相关的容器。这就是我们在这里看到的。容器 1 监听端口 80，而容器 2 监听端口 90。两个容器共享同一个 IP 地址 10.40.1.10。但他们并不独自拥有网络命名空间。好吧，那么谁拥有这个网络堆栈呢？它实际上是一个特殊容器，我们称之为” puse 容器”。在图中，你将其视为该 pod 与外部世界的接口。它拥有此网络堆栈，包括 IP 地址 10.40.1.10，当然，它使用端口 80 将流量转发到容器 1，使用端口 90 将流量转发到容器 2。</p><blockquote><p>Now you should be asking, how is traffic forwarded to the external world? You see that we have a standard Linux IP forwarding enabled here to forward the traffic from cbr0 to eth0. This is great, but then how does the L3 device know how to forward this to the destination? We do not have dynamic routing here to advertise this network in this particular example. And so, this is why we need to have some kind of “static route” on that L3 device to know that in order to reach subnet 10.40.1.0/24, your entry point is the external IP of node 1 (10.140.0.11), and in order to reach subnet 10.40.2.0/24, your next hope is node (m) with the IP address 10.140.0.12.</p></blockquote><p>现在你可能会问，流量是如何转发到集群外的呢？你看，我们在此启用了标准的 Linux IP 转发功能，将流量从 cbr0 转发到 eth0。这是非常棒的，但然后 L3 设备如何知道如何转发到目的地？在此特定示例中，我们没有动态路由来通告此网络。因此，这就是为什么我们需要有某种”静态路由”在 L3 设备上知道，为了达到子网10.40.1.0/24，你的入口点是节点1（10.140.0.11）的外部IP，并为了达到子网10.40.2.0/24，你的下一跳（m） 与 IP 地址 10.140.0.12。</p><blockquote><p>This is great, but you must be thinking that it’s a very unpractical way to manage your networks. This would be an absolute nightmare for network administrators to maintain all those routes as you scale with your cluster. And you’re right—this is why we need some kind of solution like the CNI (container network plugin) in Kubernetes to use a networking mechanism to manage this for you. NSX-T is one of those solutions with a powerful design for both the networking and security stacks.</p></blockquote><p>这太好了，但你一定认为，这是一个非常不实际的方式来管理你的网络。对于网络管理员来说，在与群集进行扩展时维护所有这些路由绝对是一场噩梦。你说得对，这就是为什么我们需要某种解决方案，如 Kubernetes 中的CNI（容器网络插件），以使用网络机制为你管理。NSX-T 是这些解决方案之一，具有强大的网络和安全堆栈设计。</p><blockquote><p>Remember, we are examining here the kubernetes plugin, not CNI. The former is what GKE uses, and the way they do this is quite fascinating as it’s completely programmable and automated on their cloud. Those subnet allocations and associated routes are taken care of by GCP for you, as we will see in the next part.</p></blockquote><p>请记住，我们正在测试 kubernetes 插件而不是CNI。前者是 GKE 使用的，他们这样做的方式是相当棒的，因为它是完全可编程和自动化的云。这些子网分配和相关路由由 GCP 为你负责，我们将在下一部分中看到。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;更新日志&quot;&gt;&lt;a href=&quot;#更新日志&quot;
        
      
    
    </summary>
    
    
      <category term="翻译" scheme="https://blog.502.li/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="kubernetes" scheme="https://blog.502.li/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 社群分享 QA 汇总</title>
    <link href="https://blog.502.li/archives/kubernetes-QA.html"/>
    <id>https://blog.502.li/archives/kubernetes-QA.html</id>
    <published>2019-12-04T05:00:00.000Z</published>
    <updated>2020-01-02T14:35:23.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="README"><a href="#README" class="headerlink" title="README"></a>README</h2><p>内容主要来自在社群里有关企业 Kubernetes 实践过程的直播分享，下面截取聊天记录的自 QA 部分 。由于提问链接在石墨文档上协作编辑，而石墨文档里的内容是无法被搜索引擎检索到的。这些问题不整理起来就永远地躺尸在石墨文档了，所以就把这些提问的问题汇总到一起，方便大家自查。</p><h2 id="20191219：阿里云如何基于标准-K8s-打造边缘计算云原生基础设施"><a href="#20191219：阿里云如何基于标准-K8s-打造边缘计算云原生基础设施" class="headerlink" title="20191219：阿里云如何基于标准 K8s 打造边缘计算云原生基础设施"></a>20191219：阿里云如何基于标准 K8s 打造边缘计算云原生基础设施</h2><p><a href="https://shimo.im/docs/KH6cCkrKHW33CJx6" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q1：如何适配不同的平台？OS不同（linux及各种发行版、非linux）、硬件架构不同（x86、ARM等等）。不同平台的节点能在同一个集群内管理吗？</p></blockquote><p>A1：可以的；当前ack@edge支持OS类型：linux（centos、ubuntu），windows server；CPU架构：X86，arm边缘节点接入；支持异构节点在同一个集群管理；k8s管控托管在云上，异构节点的支持主要在边缘端实施；</p><blockquote><p>Q2：如何应对worker节点网络不一定通的问题，通过servicename或者clusterIP是否还能访问？</p></blockquote><p>A2: 分两个角度：1. ACK@Edge提供了完整的标准的k8s能力，所以servicename和clusterIP默认是可以work的；2. 如果worker节点间网络不通，那么Pod间东西向流量是不可达的；所以我们扩展了service的scope能力，service的流量只会被限制在一组网络可达的节点之间转发（就是分享中提到的edgeunit）；</p><blockquote><p>Q： 边缘能自治到什么程度，还能正常做增删改查吗？apiserver资源发生变化时节点还能感知和同步吗？目前如果触发了边缘自治，对我的应用程序会有哪些影响？</p></blockquote><p>A3: 首先，明确边缘自治工作的时机是在边缘节点和云端管控失联后，此时为了防止脑裂云端会限制相关应用和节点资源的操作；apiserver资源的变化只能够在网络恢复后同步到worker节点，并且网络恢复后，woker节点相关的资源状态仍然以apiserver数据为准；进入自治状态后，节点上agent和应用都只能够消费断网前一刻的资源状态，自治组件edgehub替代apiserver接管了所有发往apiserver的请求；</p><blockquote><p>Q： k8s具备很好的应用容灾能力，ack@edge在应用容灾方面具备哪些能力？</p></blockquote><p>A4: ack@edge就是标准的k8s；除了具备k8s原生的应用、资源管理能力之外，在边缘场景还提供了断网自治，元信息保持等等能力，这些也都是为应用容灾考虑；除此之外，因为提供的标准k8s完整能力，k8s周边生态servicemesh、knative等都能很好支持；</p><blockquote><p>Q： 项目是否有开源的计划</p></blockquote><p>A5: edgehub、edgetunnel、edgeunit、knative-edge等相关边缘能力都在开源流程中，敬请期待；</p><blockquote><p>Q：可否直接打通云，边，端的网络，比如我边上的pod访问云上的服务，直接通过servicename.namespace.cluster.svc.local，而不是用ingress暴露云上服务，目前kubeedge经过定制是具备这个能力的，还未做生产验证。,,,阿里的和kubeedge及k3s有什么区别</p></blockquote><p>A6: 这个问题的本质是容器网络能否跨云，边，端；在ack@edge中我们也支持overlay跨公网的安全方案，支持反向网络穿透打通云、边，支持VPN网络等；</p><blockquote><p>Q：ack@edge是否有提供原生k8s API?还是经过封装后的API?云边直连的安全问题，要把apiserver直接暴露到外网是不是不太安全？</p></blockquote><p>A7: ack@edge的设计理念是将原生的k8s托管在云上，支持接入边缘算力；用户可以很便捷的通过产品界面配置并生产出一个原生的高可用的k8s集群，并默认安装上支持边缘能力的addons和operator，因此边缘k8s提供了原生的API；云上apiserver通过阿里云slb暴露，对外提供服务，通过云上slb服务的安全能力结合k8s的认证、鉴权能力保证了云上apiserver的安全；</p><blockquote><p>Q： ack@edge容器化后的程序与激光雷达、深度相机、imu、com通信协议的底层控制板等传感器的通信和数据交互是如何进行的？是否能够提供稳定的数据交互通道？点云及图像数据的传输与直接运行在操作系统上的程序是否会有差别 ？</p></blockquote><p>A8: 应用容器化与否和对物联网协议的支持不冲突；传统的裸进程部署和容器化部署对应用而言是不感知的；数据通道需要依赖其他的物联网协议支持</p><blockquote><p>Q9：ack@edge在面向IoT设备接入是通过什么实现的？是通过容器加载的IoT PaaS还是有一些专门的组件支持，例如设备接入、M2M引擎、MQTT Broker、设备影子这些。</p><p>Q10: 请问operator为k8s带来的意义是什么呢？operator的应用现状可以给简单介绍吗。</p></blockquote><h2 id="20191218-：Open-Policy-Agent在Kubernetes中的应用"><a href="#20191218-：Open-Policy-Agent在Kubernetes中的应用" class="headerlink" title="20191218:：Open Policy Agent在Kubernetes中的应用"></a>20191218:：Open Policy Agent在Kubernetes中的应用</h2><p><a href="https://shimo.im/docs/thXyGRP36CHpjvTk" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：规则是否会对性能有影响，是否有压测的数据</p></blockquote><p>A：决策过程就是一次RPC调用，因为策略的定义是声明式的数据都是静态存储，决策耗时可以忽略不计（在整个请求阶段中），即使是内部代理也会带来网络上的损耗。</p><blockquote><p>Q：  规则是否可以动态修改，即使生效，不需要重启服务</p></blockquote><p>A：不需要重启服务，实时生效，这也是OPA的目的，不会因为策略的变动而改动代码或是重启服务。</p><blockquote><p>Q：是否可以与istio结合，实现微服务权限管理下沉到网格？</p></blockquote><p>A：当然可以，社区有相关的实现，这个得去关注具体的项目，我还没有深入了解。</p><blockquote><p>Q：是否可以与spring cloud结合使用，或是与docker配合使用，因为没有用到k8s</p></blockquote><p>A：当然可以，OPA可以用做第三方库集成到你的代码中，通过API进行调用，一次决策就是一次RPC调用，OPA的核心理念在于把决策这个步骤给解耦出来，而不是和上下文逻辑混在一起。</p><blockquote><p>Q：OPA可以调用数据库吗？它能实现鉴权吗？</p></blockquote><p>A：可以，可以自己实现外部调用的模块，但通用的做法是事先把需要决策的数据查询组装好发送给OPA进行决策。鉴权就是一种特殊的策略，策略需要关联到用户、用户组。可以把OPA和网关进行整合，每次用户请求都进行鉴权（通过OPA进行决策，该次请求是否放行）。</p><blockquote><p>Q：微服务和OPA是不是结合的更紧密？可以把决策提出来？</p></blockquote><p>A：和微服务概念本身关系不大，即使是单体应用，只要你可以把决策过程剥离出来就可以用到OPA，这个很符合微服务的理念，OPA就是一个集中的决策服务。</p><h2 id="20191210：Volcano介绍及其在深度学习场景下的应用"><a href="#20191210：Volcano介绍及其在深度学习场景下的应用" class="headerlink" title="20191210：Volcano介绍及其在深度学习场景下的应用"></a>20191210：Volcano介绍及其在深度学习场景下的应用</h2><p><a href="https://shimo.im/docs/RtV63PGyjPhGKCvk" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q1：针对kubeflow这种工作流有没有计划做出针对性优化？#274号PR提出要做拓扑优化，最后也close了，这是为什么？</p></blockquote><p>A：针对volcano与kubeflow的结合，volcano社区一直在推动，希望kubeflow下各个operator对接volcano，现在，这一推动在kubeflow中的一些计算框架已经取得了比较明显的进展。task-topology的算法已在内网实现，推入github的计划正在制定中，如您有切实需求，可到volcano社区留言<a href="https://github.com/volcano-sh/volcano/issues" target="_blank" rel="noopener">讨论</a></p><blockquote><p>Q2：针对数据局部性有没有优化</p></blockquote><p>A： data aware scheduling 已列入特性计划</p><blockquote><p>Q3：资源敏感型的深度学习任务具体有什么挑战？</p></blockquote><p>A：本次分享，针对解决为深度学习提供算力方面的挑战，其他方面的挑战，不能为您解答。关于算力方面的挑战和应对策略，请留意后续分享文档。</p><blockquote><p>Q4：请问对一个分布式tensorflow训练，worker节点的gpu型号不同，会不会有问题，比如v100和p40混用</p></blockquote><p>A：v100和p40均为扩展资源，在调度过程中均同等对待，是否指定多个gpu卡对调度进程无影响，欢迎您使用volcano进行相关测试。</p><blockquote><p>Q5：在使用k8s中，对于IB网络和RDMA的支持会不会有什么问题</p></blockquote><p>A：没有问题，支持过程中，k8s需要做一些适配。据我所知，一些云厂商使用k8s对IB网络和RDMA的支持已经商用。</p><blockquote><p>Q6：对于tf的分布式训练，worker节点之间共享数据集，您推荐用哪种分布式存储</p></blockquote><p>A：对象存储和NFS均可以，取决于您使用的底层存储的读取和写入速度。</p><blockquote><p>Q7：虽然一开始批调度成功。但是如果一个训练作业时间比较长，运行过程中一个pod挂了怎么办，重新调度之后ip端口等相关的信息可能都变了？</p></blockquote><p>A：volcano支持为job配置生命周期管理策略，支持配置计算节点失败后，计算集群重启。如果计算模型不支持容错，可进行相关配置。</p><blockquote><p>Q8：大佬，最后这个分享内容能同步到 github 嘛，讲的很详细，使用 kubeflow 开发中，对 volcano 很感兴趣</p></blockquote><p>A：下周公众号会发，发出后再同步。</p><blockquote><p>Q9：volcano是并行调度多个pod吗？调度过程中会不会发生冲突。</p></blockquote><p>A：是并行调度，不会冲突。batch调度，主要针对于同一批计算任务下任务的批量调度。调度过程中，仍然存在多个维度的优先级。优先级内有先后。</p><blockquote><p>Q10：现在volcano是先来先服务模型是吗？有没有考虑通过调整作业顺序提高集群资源利用率和作业完成时间。比如一个作业有资源请求量和运行时间两个维度的话，就可以贪心的使执行时间少的作业排在前面以减少总体执行时间。《Y. Fan, Z. Lan, P. Rich, W. Allcock, M. Papka, B. Austin, and D. Paul, “Scheduling Beyond CPUs for HPC”, Proc. of HPDC’19 , 2019.》这篇论文就是通过滑动窗口调整顺序优化了集群资源利用率。</p></blockquote><p>A：volcano调度过程遵循优先级调度，优先级高的pod具有更高的优先级获取集群资源。优先级有多个维度，namespace、queue、job等。随着集群下资源状况和pod运行情况不同，各维度优先级均会动态调整。虽有多个优先级维度，但均没有涵盖您提到的这种场景，欢迎到volcano社区留言<a href="https://github.com/volcano-sh/volcano/issues" target="_blank" rel="noopener">讨论</a></p><blockquote><p>Q11：提交VCJOB时可否只指定任务GPU总数，由调度器自己根据集群GPU空闲情况决定分配几个worker以及每个worker的卡数呢？</p></blockquote><p>A：不支持</p><blockquote><p>Q12：请问volcano和原生的kube-scheduler有做到调度cache的共享吗？也就是同一个节点可以同时被这俩个调度器管理而不冲突？</p></blockquote><p>A：不支持。使用两个调度器调度同一个pod，不可避免会出现调度冲突。目前，volcano只处理配置调度器名称为volcano的pod调度</p><h2 id="20191205：Knative-Serverless-之道-如何-0-运维、低成本实现应用托管？"><a href="#20191205：Knative-Serverless-之道-如何-0-运维、低成本实现应用托管？" class="headerlink" title="20191205：Knative Serverless 之道 - 如何 0 运维、低成本实现应用托管？"></a>20191205：Knative Serverless 之道 - 如何 0 运维、低成本实现应用托管？</h2><p><a href="https://shimo.im/docs/RhvYRWy8W3RqGYtW" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q1：开发怎么远程调试k8s中的应用</p></blockquote><p>A1：Kubernetes 底层首先是一个容器，那咱们就从容器谈起。容器相对于宿主机来说其实只是把业务进程限制在一个更合理的权限范围内。在调试容器里面的业务进程时可以直接 docker exec 到容器内。到了容器内部就和一个 vm 没有什么差别了。而 Kubernetes 的 Deployment 可以认为是编排很多容器，每一个 容器都可以通过 宿主机 docker exec 进去。当然也可以通过 Kubernetes 的方式 kubectl exec 到容器内进行调试。如果实在初期调试阶段建议使用比较完整的 CentOS 或者 Ubuntu 镜像，基础镜像内要有一些基本的调试工具。摸索熟悉了之后可以使用精简的基础镜像，这样更经济。</p><blockquote><p>Q2：knative的build和开发流程管理可以代替jenkins吗</p></blockquote><p>A2：Knative 的 Build 现在长大了，单独开启了一个项目就是  Tekton。Tekton 的定位不是替换 Jenkins ，这两者在使用方式上差别还是很大的。对于比较习惯 Jenkins 的用户来说切换成 Tekton 是需要一个适应过程的。那么为什么要搞一个 Tekton 呢，Jenkins 不是已经很好了吗？具体 Tekton 的详细设计和实现咱们以后可以单独说明，这里选几个重要的介绍一下区别：<br>Tekton 的 Kubernetes 原生特性体现在如下几点：<br>Tekton 的所有 Task 都是以 Pod 的粒度执行的，每一个 Task 可以包含很多个 Step。一个 Task 的所有 Step 在同一个 Pod 内串行执行。不同的 Task 通过 Tekton Controller 编排，是跨 Node 节点执行的；<br>Tekton 的最基本的执行单元是 Pod，这和 Kubernetes 云原生操作系统是非常契合的。一个人如果掌握了 Kubernetes，再学习 Tekton 就是一件非常容易的事情。但是想一下如果掌握了 Kubernetes 会对学习 Jenkins 有所帮助吗？不太可能。随着 Kubernetes 的流行这种影响也会变的越来越明显；<br>再说一下被集成的特性，Tekton 如果现在和 Jenkins 拼生态现在资历还不够，但是他的设计和云原生生态位决定了他可以很容易的通过 Kubernetes api 被集成，而 Jenkins 的 API 需要单独学习，这些都是成本；<br>Kubernetes 生态的很多已有的工具，比如 Chart 等等都可以和 Tekton 非常容易的契合在一起，Jenkins 的生态自己比较孤单。长远看 Tekton 是有优势的，但 Tekton 自己的领域能力也需要不断完善；</p><blockquote><p>Q3：knative编排和K8S应用编排的区别及应用场景?</p></blockquote><p>A3：Kubernetes 的最大价值是把对 IaaS 资源的操作标准化了，比如无论是在 aws 还是在阿里云上面使用计算、存储、网络等资源都可以直接通过 Kubernetes 语义完成，不需要关心不同厂商底层差异化的实现。而 Knative 才是面向应用的编排。Knative 对应用的 Serverless 编排主要体现在对：流量的管理、灰度策略和弹性的管理。并且流量、灰度和弹性这三者是完美的契合在一起的。从另一个角度来说 Knative 是建立在 Kubernetes 之上的，Knative 需要使用 Kubernetes 提供的对 IaaS 的标准化服务。这二者是上下层的依赖和被依赖的关系，不是竞争关系。</p><blockquote><p>Q4：knative有哪些成功的行业应用实践？</p></blockquote><p>A4：在阿里云上面已经有很多用户在使用了。另外 Google 的 CloudRun 产品完全是建立在 Knative 之上的。</p><blockquote><p>Q5：knative的现状和预期达到的目的?</p></blockquote><p>A5：Knative 现在已经被众多厂商开始支持了，Knative 的目标是标准化应用 Serverless 编排模型。比如：<br>通过 Knative 对应用进行编排<br>通过 Knative 支撑上层 faas 系统实现<br>这里说的应用其实不限于在线服务，很多 AI 任务也是通过 Knative 驱动的，比如分享中提到的 KFServing</p><blockquote><p>Q6：缩容时，怎么才能当pod内的流量消耗完？在销毁？</p></blockquote><p>A6：Kubernetes 中 Pod 是可以设置 Prestop 的，Prestop 可以保证先卸载流量，然后再摘除服务</p><blockquote><p>Q7：k8s 应用服务器内网无网络，入口只有一台nginx 在dmz区域可以出公网（nginx 与应用服务器网络只开放访问31380/31390），当pods 容器直接回调第三方域名时，该如何解决这个问题。</p></blockquote><p>A7：这个涉及到了具体业务模型和系统架构，可以单独联系我下线沟通</p><blockquote><p>Q8：感觉knative就是另一种形式的配置即服务，和jenkins X发展的异同?</p></blockquote><p>A8：Knative 是一个应用 Serverless 编排引擎，可以快速给普通应用赋予 Serverless 能力。比如流量、灰度和弹性的完美结合。另外 Knative 的事件模型可以对接外部事件做基于事件驱动的 Serverless 模型。</p><blockquote><p>Q9：在企业私有云环境部署knative会有哪些挑战？</p></blockquote><p>A9：只要是标准的 Kubernetes 集群之上就能部署 Knative，不过很多镜像需要翻墙</p><blockquote><p>Q10：阿里云上的容器镜像服务是如何处理鉴权的？</p></blockquote><p>A10：可以参考阿里云镜像仓库的官方文档：</p><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/authorize" target="_blank" rel="noopener">link</a></p><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/credentials" target="_blank" rel="noopener">link</a></p><blockquote><p>Q11: istio层面的管控和维护成本比较高，如envoy性能问题，网络问题等，这部分工作是由云平台负责的吗，knative这边有没有相应措施</p></blockquote><p>A11: 目前阿里云容器服务 Kubernetes 集群控制台可以通过 UI 管理 Istio 和 Knative，可以快速上手。控制台也提供了很多便捷操作降低运维成本。Knative 主要依赖了 Istio 的 Gateway，Gateway 本身是可以横向扩展的，不会有太大影响。</p><blockquote><p>Q12：容器的冷启动问题如何解决，第一个流量岂不是延时很高?</p></blockquote><p>A12: 如果缩容到零以后，到一个请求的延时是会很高。第一个请求冷启动的问题是一个公认的业界难题，这也是各大云厂商在竞相解决的问题。相比使用云的客户而言，云厂商自己其实更迫切解决这个问题，敬请关注….</p><blockquote><p>Q13: knative的组件本身怎么部署？如何保证HA？谢谢</p></blockquote><p>A13: Knative 是建立在 Kubernetes 之上的，Knative 组件其实就是 CRD 的 Controller。在 Kubernetes 中 Controller 是可以部署多个实例，通过抢锁保证只有一个 Controller 可以执行写操作。HA 的问题容易解决。</p><h2 id="20191203：Kubernetes-在信也科技的落地实战"><a href="#20191203：Kubernetes-在信也科技的落地实战" class="headerlink" title="20191203：Kubernetes 在信也科技的落地实战"></a>20191203：Kubernetes 在信也科技的落地实战</h2><p><a href="https://shimo.im/docs/3RkcgcPq3JjVtxwr" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：dns记录是如何维护的，还有maclvlan的记录的维护？谢谢老师回答</p></blockquote><p>A：dns系统我们实现了2个服务，一个是监听在53端口提供dns查询的服务，一个是前台管理站点，前台站点负责dns记录的增删改查。支持单独设置和批量导入功能。这2个服务共享同一个数据库。内容的话是由信也科技各个研发团队共同维护的。macvlan是在每台宿主机上创建的。我们一般会在每台宿主机上创建多个macvlan网段。</p><blockquote><p>Q：Macvlan是没有service，选择MacVLan是基于哪些考虑呢？MacVLan使用过程中，对于不同的内核版本，不同的高可用组网，是存在兼容性问题的，这一块实践能分享下么？</p></blockquote><p>A：选择macvlan一是因为它的简单，使用docker命令就可以创建出来，不需要其他配套的服务或数据库来管理。二是因为它有独立的IP和MAC地址，这样可以让信也科技之前跑在虚拟机上的服务能够快速的迁移到容器。我们对于宿主机的内核版本是严格控制的，不存在内核版本不同的情况。但是macvlan的缺点也比较明显，它依赖于硬件，宿主机需要连到交换机trunk口。并且它的灵活性也不够高，不适合大规模的组网。由于目前信也科技内部的网络结构还是比较简单的，并没有遇到兼容性的问题。</p><blockquote><p>Q：为什么不试着对k8s自动更新呢，每一次手动更新都需要一定的时间成本吧？</p></blockquote><p>A：目前我们认为手动更新比较稳妥，并且更新不是一个频繁的操作，时间成本还好。</p><blockquote><p>Q：请问下，这个是自建机房环境上的集群？是否适用公有云环境？外部访问流量是如何接入的呢？ingress controller基于什么考虑来选择的，谢谢。</p></blockquote><p>A：这个是自建机房环境上的集群。外部的流量会先经过F5，然后经过nginx集群，所有的容器实例和虚拟机都是通过nginx负载均衡的。在nginx上面我们使用了新浪微博的nginx-upsync-module模块，可以从consul同步upstream中的实例。我们并没有使用ingress controller，而是通过用户在我们的容器发布平台上去手动的拉入和拉出流量。用户拉入流量的操作会在consul里面添加实例的IP和端口，nginx自动从consul同步实例后该实例就接入流量了。</p><blockquote><p>Q：直接使用Pod的话，副本控制是如何做的</p></blockquote><p>A：副本控制目前是比较静态的。用户在容器发布平台部署可以选择副本数。此后如果用户不添加和删除实例那么副本数是不会变的。</p><blockquote><p>Q: 如何更新证书</p></blockquote><p>A：先重新生成证书，然后先在master节点上更新，需要依次重启etcd、apiserver、controller-manager和scheduler服务。master更新完毕后，再把所有的node节点上证书更新一下，需要重启kubelet。证书的更新过程中除了造成集群的短暂不可用之外不会影响已经运行的容器的，所以是安全的。</p><blockquote><p>Q：蓝绿发布和灰度发布是如何实现的？</p></blockquote><p>A：这2个都是通过我们的容器发布平台实现。蓝绿发布是通过创建2个发布组，每个发布组含有相同的实例数。通常一个发布组含有当前版本的实例并且是接入流量的，另外一个发布组包含上一版本的实例或者是即将上线版本的实例。通过在2个发布组切换流量来上线新版本或回滚到旧版本。灰度发布可以先上线一个实例的流量，没问题之后可以把剩下的实例都接入流量。这些操作目前都是平台上用户手动操作实现的。</p><blockquote><p>Q：集群平台的高可用是怎么做了？有没有做多集群多活或者灾备？</p></blockquote><p>A：我们生产环境有部署多个k8s集群，也有2个不同的机房部署。我们的容器发布平台会把实例均衡分发到不同的k8s集群。</p><blockquote><p>Q：开发测试环境的镜像仓库如何同步到生产镜像仓库？</p></blockquote><p>A：镜像仓库我们测试和生产用的是同一套。 公司使用的是阿里云的托管版k8s与,发现托管版的k8s并没有多个主节点,问一下阿里的托管版k8s与标准版k8s</p><blockquote><p>Q：问一个细节问题，请问k8s集群扩容是通过什么手段实现的？</p></blockquote><p>A:我们实现了一套ansible脚本去实现自动添加node节点。</p><blockquote><p>Q：我们也是用的macvlan，这个模式下，你们为什么没用cni配置网络，而是用的docker来配置，这样维护成本高一些。另外，macvlan模式，主机无法访问本机内的容器，这个怎么解决的？</p></blockquote><p>A：我们是用docker命令去创建macvlan，实际还是使用k8s的cni。使用vlan之后可以解决主机无法访问本机内的容器。</p><blockquote><p>Q：ingress用的什么，为什么选择它？</p></blockquote><p>A：见Q5问题的回答</p><blockquote><p>Q：刚才提到节点证书过期导致集群异常，k8s本身会在节点异常以后，调度迁移非正常节点的实例的。我的问题是，如果证书更新需要一个过程，那么，节点恢复也是一个过程，这个时候，仍在异常的节点实例，会迁移到正常节点，而且，因为coredns和ingress对接的是apiserver，那么，节点异常基本上等同于这个节点上的实例，都会被apisercer摘掉，虽然容器也还在，但是流量入口和dns侧实例不在了，这样一来，证书过期，不就等同于所有实例全部不可用嘛？</p></blockquote><p>A：因为我们只用了k8s中的pod，并且关闭了k8s中的异常节点自动迁移实例的功能。这些高可用功能我们自己实现了一个类似的，这样可以按我们的需要去定制。coredns我们只是简单的用来作为dns服务器，并没有和apiserver对接，也没有使用ingress，见Q5的回答。</p><blockquote><p>Q：想问下老师你们目前是前后端完全分离的么？目前的前端应用部署方式是怎样的？如何控制一些前端的发布工作流？以及与前端相关的后端微服务部分，是如何保证发布顺序以及关联性的。</p></blockquote><p>A:目前我们上容器的还是以java为主的后端服务偏多。目前能了解到的是前端应用都是放到nginx中来对外提供服务的。对于前端发布的工作流以及如何保证发布顺序以及关联性的目前都是通过人肉去控制和完成的，没有做到自动化。</p><h2 id="20191126：基于CDN的边缘计算平台设计和思考"><a href="#20191126：基于CDN的边缘计算平台设计和思考" class="headerlink" title="20191126：基于CDN的边缘计算平台设计和思考"></a>20191126：基于CDN的边缘计算平台设计和思考</h2><p><a href="https://shimo.im/docs/pkxrK9PGDcVgXpkx" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：阿里的edge 有用在阿里的cdn上吗</p></blockquote><p>A：目前我们以及有对外的产品ENS，形态上就是在CDN节点售卖虚拟机。另外我们在做的另一见事情，就是把CDN业务迁移到容器里面，这样到目的就是最大化释放CDN的资源和能力。</p><blockquote><p>Q：能否介绍一下，目前cdn节点改造成边缘计算节点，主要涉及哪些方面改造，阿里的实践情况，谢谢。</p></blockquote><p>A：目前CDN改造有3个部分：基础设施到改造（交换机、机型)，软件层面的改造（容器化)，CDN节点架构的改造（比如把传统的7层负载均衡改成K8S的Ingress Controller)</p><blockquote><p>Q：目前在边缘的ENS节点，有提供GPU，物理机等产品吗？</p></blockquote><p>A：ENS能力上是对齐阿里云ECS的，目前提供CPU和GPU，神龙裸金属如果有需要也是可以支持的。</p><blockquote><p>Q：CDN场景的落地场景来说，形态上就是在云中心部署Kuberentes Master，将云中心所在Region附近的CDN节点接入到Kubrentes中 ，指的是在各个Region 里面的节点当作k8的node 处理吗 ？</p></blockquote><p>A：比如我们在阿里云中心的杭州Region创建一个K8S Master，然后会把杭州整个省的CDN节点，全部接入到这个K8S Master里面，CDN节点指的是一个机房，一个机房会有1～100台机器，整个CDN节点的机器都会接入。</p><blockquote><p>Q：请问阿里边缘计算有和5g结合的计划吗?具体有哪些结合点?</p></blockquote><p>A：在今年云栖大会上，我们以及发布了5G边缘计算战略，这个可以网上找下视频回放。具体的结合点目前来看是城市大脑和城市云。不过因为5G还未大规模商用，所以我们也在探索。<br><a href="https://yunqi.youku.com/2019/hangzhou/review?spm=a2c4e.11165380.1395223.1" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：请问未来docker会向安全容器转型嘛？安全容器是趋势,作为开发者要注意哪些点？</p></blockquote><p>A：其实kata和普通runc容器，在行为上没有太大差别，如果非要说关注点的话，目前我觉得是内核部分，因为kata容器对于内核要求是比较高的，稳定性方面还需要打磨。</p><blockquote><p>Q：目前阿里有没有什么比较成熟的或者已经在计划中的边缘计算相关项目？公司内部对于边缘计算的支持程度是怎么样的?（落点很多，结合5g等新形式，相对感觉视频分析等传统cv方面可能应用性更强一点</p></blockquote><p>A：ENS就是我们成熟的对外产品，我们对于边缘计算的投入也是不惜代价的。具体场景我们现在也在跟我们的客户、运营商都有广泛合作。只要有需求或者合作意向都可以找我沟通。</p><blockquote><p>Q：在云上部署k8s master节点，cdn节点作为边缘节点。对k8s来说，节点之前的网络通讯要求会比较高，那当网络不稳定时，边缘节点和master节点断开，这时如何实现边缘节点上的服务自治呢？</p></blockquote><p>A：这个就是ACK@Edge解决的问题了，ACK@Edge在边缘测机器上部署了一个Edgehub的组件，kubelet并不是直接请求kube-apiserver，而是通过edgehub然后再请求到APIServer。edgehub做了缓存和代理的能力，即使在断网的情况下，也能保障边缘节点的kubelet正常工作。这个能力叫做边缘自治，是ACK加强的能力。</p><blockquote><p>Q：请谈谈阿里看到的边缘计算cover的真实价值场景或者客户群，感觉很多现有场景中心计算也能满足，不一定要用边缘计算。特别是边缘计算节点也卖虚机，价值不大。谢谢。</p></blockquote><p>A：以cdn为例，cdn就是通过边缘做加速来提高用户体验。虚拟只是一种形态，比如你购买虚拟机自建cdn。所以边缘的场景肯定是跟中心不一样，比如城市大脑，就是需要在就近有个节点可以做接入，如果全部回中心，对中心的压力也很大。</p><blockquote><p>Q：阿里在边缘存储上有什么计划吗，能介绍一下是否有业务会需要把大量数据存储在边缘？</p></blockquote><p>A：ENS节点的虚拟机提供云盘的，但是并不建议把大量存储放在 边缘。因为边缘的存储冗余并没有中心那么高，就像我说的，目前不建议在边缘部署对数据可靠性要求非常高的业务。</p><blockquote><p>Q：请问安全容器的存储性能有考虑过么？接入点在边缘还是放云端？</p></blockquote><p>A：安全容器最终是跑着边缘上的，安全容器的存储目前是一个大的问题，kata开源的存储方案性能并不好。阿里云的内核团队做了大量的优化，目前应该有了比较大的性能改进。</p><blockquote><p>Q：请问ACK@Edge是开源的吗？</p></blockquote><p>A：ACK@Edge是阿里云上的产品，目前已经在公测中，可以直接在阿里云官网开通使用。</p><blockquote><p>Q： 容器安全方面有什么需要注意的？除了kata之外，使用dockerd 与k8s有什么安全建议psp之类的？</p></blockquote><p>A：安全容器的使用，第一K8S需要做适配runtimeClass，第二内核也要求比较高（应该是要4.*内核比较文档)<br>安全建议：就是加证书、改端口，不然容易被外部注入容器。其他的安全建议：就是直接使用云上产品，云上产品具备了比较高的安全能力。</p><blockquote><p>Q：  接Q8问题，如果云上master和边缘节点网络恢复了，但master节点上的pod的状态和边缘节点上的服务的状态不一致（断开时间长后，云上pod的状态通常是terminating状态，而边缘节点上的服务仍能正常工作)，这时候如何解决呢？网络恢复后，会将边缘节点的服务重启吗？比如pod重建？</p></blockquote><p>A：网络恢复后，就是继续往K8S设置的终态变化了，比如中心把Pod删了，那么网络恢复后自然相应的Pod就会被删除。因为有edghub的存在，pod是不会处于terminating状态的。不过具体细节可以仔细ACK的同学，场景和需求可能不大一样。</p><blockquote><p>Q：CDN的流量分配是在哪里做的？是DNS还是GSLB那种?异地灾备也可以用同样的方式?</p></blockquote><p>A：CDN的流量分配就有DNS、HTTPDNS、302调度，CDN 本身就是成熟的技术了，调度这块都是非常成熟的技术。</p><blockquote><p>Q： 想问edge节点的升级问题？比如有了重大CVE 或者 0day？或者和master版本差太多？</p></blockquote><p>A：升级的话，我们目标保持跟ACK中心同步的节奏。主要根据ACK提供的信息。<br>q18请问您那块容器主要跑在虚拟机还是物理机上？<br>都有</p><h2 id="20191121：给-K8s-API-“做减法”：阿里云原生应用管理的挑战和实践"><a href="#20191121：给-K8s-API-“做减法”：阿里云原生应用管理的挑战和实践" class="headerlink" title="20191121：给 K8s API “做减法”：阿里云原生应用管理的挑战和实践"></a>20191121：给 K8s API “做减法”：阿里云原生应用管理的挑战和实践</h2><p><a href="https://shimo.im/docs/TX63YhJ8VjVvYXkW" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q： rudr是有某公司实际线上使用后开源的，还是纯开源项目？</p></blockquote><p>A1：rudr是一个reference项目，意思是用来做OAM实现的一个参考，目前是纯开源项目，不排除以后会演进为生产可用的项目。</p><blockquote><p>Q：oam spec中目前还没有看到属于infra operator的管理对象（补充：Component是面向app developer， Traits和AppConfiguration面向app operator，哪个对象是面向infra operator的？)</p></blockquote><p>A2：OAM本身就是基础设施运维手里的武器，包括Kubernetes、Terraform等一系列平台层的开源项目，基础设施运维可以通过这些开源项目构建OAM的实现（如rudr基于Kubernetes)。所以OAM的实现层就是基础设施运维提供的，他们不需要额外的对象来使用OAM。</p><blockquote><p>Q：oam controller和admission controller的分工标准是什么</p></blockquote><p>A3：OAM项目中的 admission controller用于转换和检验spec，定位完全等价于K8s中admission controller。目前实现的功能包括转换 [fromVariable(VAR)] 这种spec中的函数，检验AppConfig、Component、Trait、Scope等CR是否符合规范，是否合法等。<br>OAM Controller，即目前的开源项目rudr，就是整个OAM的实现层，它负责解释OAM的spec并转换为真实运行的资源，这里的资源可以是K8s原有的一些，也可以是像阿里云上的RDS这类云资源。目前rudr项目是Rust语言写的，考虑到K8s生态大多数都是用Go语言写的，我们后续也会开源一个go语言编写的OAM-Framework，用于快速实现像rudr这样的OAM实现层。</p><blockquote><p>Q：计划啥时候开源go的oam-framework呀？</p></blockquote><p>A4： 已经在走内部流程了。同时我们也需要进一步打磨oam-framework，让它适配大家的场景。</p><blockquote><p>Q：想问个问题，阿里是如何降低k8s的复杂度来满足运维和研发一些共性诉求的？在k8s中的用户user角色可能是开发也可能是运维。</p></blockquote><p>A5：目前我们遇到的大多数场景都能区分哪些是运维要关心的，哪些是研发要关心的。OAM降低K8s复杂度的主要方法就是关注点分离，给K8s的API 做减法，尽量让某一方可以少关注一些内容。如果你有这样一个无法分割的场景，其实我们也很感兴趣，欢迎把case提出来一起探讨。另一方面，我们并不是屏蔽掉K8s，OAM spec预留了充足的扩展性，完全可以把K8s原有的能力提供给用户。</p><blockquote><p>Q：我认为OAM是基于k8s针对于不同应用上的抽象层，现在我们有很多应用都是用Helm包包装好的，如果切换成OAM的话，我们需要注意哪些地方呢？</p></blockquote><p>A6：其实我们上半年一直在推广helm在国内的使用，包括提供了阿里的helm<a href="https://developer.aliyun.com/hub" target="_blank" rel="noopener">镜像站</a>等，所以OAM跟helm也是相辅相成的。简单的说，OAM其实就是helm包里面template文件夹里面的内容。Helm是OAM做参数渲染（template)和打包（chart)的工具。如果切换到OAM，helm的使用方式不需要变，里面的spec换成OAM的spec即可。</p><blockquote><p>Q：请问，rudr 用起来了吗，效果如何。rudr 的架构有没更丰富的资料</p></blockquote><p>A7: rudr一直是可以用的，大家要是用不起来可以提issue，想要什么方面的资料或者疑问也可以提issue，我们也在完善文档。目前相关的材料都在这里：<a href="https://github.com/oam-dev/rudr/tree/master/docs" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：rudr的hello world没跑起来，是不是k8s版本需要&gt;1.14 ?</p></blockquote><p>A8：具体这个问题就在github上提issue吧，我们每天都会关注issue，可以贴一些错误日志之类的。</p><blockquote><p>Q：我们一直在用helm打包我们的应用，去做gitops ，一个通用的chart 对应不同的values.yaml 做到了复用。听了分享，很期待OAM，当然还有openkruise。</p></blockquote><p>A9：openkruise 是开源的哈，大家可以关注 <a href="https://github.com/openkruise/kruise" target="_blank" rel="noopener">openkruise kruise</a> 我们也一直在迭代。</p><blockquote><p>Q：oam有哪些公司在用？实际体验反馈如何？</p></blockquote><p>A10：OAM刚刚发布一个月左右，具体有哪些公司已经在使用我们还没有来得及统计。阿里和微软内部都已经在使用，并且都有对外的产品使用OAM。就我们接触到的用户来说，无论是社区的用户还是阿里内部，都对OAM的关注点分离等理念非常认同，也都在积极落地。</p><blockquote><p>Q： rust 内部有哪些场景和业务使用了？贵司后续会继续运用在哪些场景？</p></blockquote><p>目前有一些小的场景在使用，具体还没有统计过，后续会继续用在一些需要较高性能的场景。</p><h2 id="20191119：基于云原生日志分类处理方案与落地实践"><a href="#20191119：基于云原生日志分类处理方案与落地实践" class="headerlink" title="20191119：基于云原生日志分类处理方案与落地实践"></a>20191119：基于云原生日志分类处理方案与落地实践</h2><p><a href="https://shimo.im/docs/RKYXGj6hvYJWTPQD" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：filebeat 与flunted的区别大不？该如何选择</p></blockquote><p>A：Fluentd 针对结构化的数据，灵活性是一个考量。</p><blockquote><p>Q：filebeat单纯采集docker日志发现不能获取docker.container.name，docker.container.image信息不知为何？</p></blockquote><p>A：filebeat支持多种采集方式，可以将filebeat以进程运行在docker容器中，收集容器日志，也可以单独部署filebeat采集docker生成的日志文件，可以参考filebeat官方yaml配置文件。</p><blockquote><p>Q：能否对采集到的日志信息做到告警处理？</p></blockquote><p>A：告警需要分场景，入库ES可以通过sentinl插件接入告警。 规范处理方式应将各类落地日志对接中心告警平台。</p><blockquote><p>Q: es的机器学习功能是否有实际价值？</p></blockquote><p>A：在机器学习方面没有太多接触。</p><blockquote><p>Q：采集agent是sidecar还是daemon模式？</p></blockquote><p>A：守护进程与二进制部署。分场景部署，大部分采集场景使用daemonset，部分集群外中间件等组件以systemd部署。</p><blockquote><p>Q：有没有EFKoperator相关项目推荐？</p></blockquote><p>A：暂时没有相关推荐。</p><blockquote><p>Q：对于日志采集系统占用资源过多，怎么解决？</p></blockquote><p>A：需要从各方面优化，技术层面也是优化项，如提取偏移量方式对流量有很大影响，如文件扫描频率，对cpu有很大影响。 优化点首先从原生参数根据业务场景进行适配调整，特殊场景考虑原生扩展。</p><blockquote><p>Q：能用filebeat采集journald日志吗？怎么将系统日志和pod日志用同一个filebeat采集？</p></blockquote><p>有journalbeat 开源插件可以采集journald日志。系统日志和pod日志都落地文件，以多源目录采集，一般采用对接logstash做区分处理，若转发不采用logstash，需要扩展filebeat组件支持多目录指定不同的输出采集。<br>A：有没有调研过阿里开源的log-pilot来采集pod日志？<br>没有做过相关调研。</p><blockquote><p>Q：beats组件之间是否会有互相影响？比如filebeat MySQL的采集器 redis的采集器 docker的各种，部署很多是否会相互之间有影响</p></blockquote><p>A：你指的是filebeat内置module模块和对外部采集方式如何统一一套部署采集而不相互有影响么？ 如果是这样，通过filebeat配置文件指定module采集以及docker产生的文件配置进行采集。</p><blockquote><p>Q：日志告警是用的开源项目还是自研的呢？</p></blockquote><p>A：根据自身的平台确定方案，本案例的场景可以通过开源方案做一些简单告警，如ES通过sentinl做告警，Loki通过grafana告警，若自有大数据平台或者单独的告警平台，按照平台规则对接告警。</p><blockquote><p>Q：日志系统接入消息队列的意义是什么？</p></blockquote><p>A：消息队列是缓冲，重要日志接入消息队列可以提供缓冲存储，多次消费。</p><blockquote><p>Q：都是默认json日志么，有没比较其他log driver 使用场景</p></blockquote><p>A：</p><blockquote><p>Q：用loki主要目的是什么？是某些场景下es的替代品吗？二次开发考虑开源吗？promtail的性能瓶颈具体表现在哪里？和filebeat相比有什么优缺点？</p></blockquote><p>A：</p><p>Q: 我看loki现在还是在beta阶段，为什么考虑用？</p><h2 id="20191112：扇贝-Service-Mesh-发展历程"><a href="#20191112：扇贝-Service-Mesh-发展历程" class="headerlink" title="20191112：扇贝 Service Mesh 发展历程"></a>20191112：扇贝 Service Mesh 发展历程</h2><p><a href="https://shimo.im/docs/C9xJT8Hj66cg8Chc" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：istio 相关的ymal配置文件，比如流量百分比，在哪里配置，直接操作文件吗？</p></blockquote><p>A：你是指单纯使用 Envoy 的时候如何如何实现 Istio 里流量百分比的功能吗？这个可以通过给 endpoints 配置不同的权重来做到</p><blockquote><p>Q：这个现在是在哪里操作的是运维手工修改ymal文件？</p></blockquote><p>不是的，举个例子，你可以在 xds 服务端实现根据不同 deployment pod数量来下发新的配置</p><blockquote><p>Q：service mesh  有对mq 相关研究吗</p></blockquote><p>A：我们的 mq 没有部署在集群里，Envoy 对这块协议也没有相应的支持<br>A: istio应该暂时还不支持kafka和amqp，gRPC/websocket等可以实现异步调用。</p><blockquote><p>Q：为啥自己实现xds服务器？有现成的为啥不用？例如istio-pilot/rotor? istio-pilot可以单独使用的。</p></blockquote><p>A：其实是早期遗留问题，一开始我们用的 Istio 不稳定，后续的选择就趋于保守了。当时rotor应该还没有 release 版本</p><p>A:好吧，Rotor一年前也没有更新了，他们团队好像被twitter招安了</p><blockquote><p>Q：你们只用envoy做front-proxy吗？如果是这样，这就不叫service mesh了</p></blockquote><p>A：分享里说了哈，既有front-proxy，也有服务间的</p><blockquote><p>Q：如何保证envoy对业务性能影响最小？</p></blockquote><p>A：envoy 本身性能没什么问题，要注意的是配置的 filter这些跟外部服务交互的地方，比如 ratelimit 之类的，要配置好超时时间以及失败后的策略</p><blockquote><p>Q：被sidecar inject过的prometheus如何去scrap每个pod的metrics?服务是基于springboot的。这个研究过吗？</p></blockquote><p>A：抱歉，这个没有研究过。你是要抓取 sidecar 的数据？<br>A: 谢谢，没关系。我目前只能让prometheus直接去抓pod的metrics。sidecar的数据不用抓:)</p><blockquote><p>Q：把istio mixer里的jaeger暴露出来，给k8s外部的服务使用，这个需要考虑些什么？</p></blockquote><p>A：我们单纯的使用的 Envoy 哈</p><blockquote><p>Q：istio的配套监控体系如何，是直接用开源搭建还是自建？</p></blockquote><p>A：我们的监控是 Prometheus 那一套技术栈</p><blockquote><p>Q：你们的服务是基于gRPC还是REST/http1.1的？gRPC要求至少http2，如果需要把gRPC服务暴露给外部，对于ingress controller你有什么推荐？你们服务部署的是阿里云吗？Edge Proxy用的阿里的服务?</p></blockquote><p>A：我们对外的 rest，内部服务是 gRPC。Envoy 也是有做ingress controller 的产品的，比如Contour，不过我们没有实践过，谈不上推荐。是的，阿里云。最外面有一层阿里云的 slb<br>A: cool</p><blockquote><p>Q： 你们目前网关怎么做健康检查的？lstio，第二个问题，sidecar如何实现链路监控，自己日志文件怎么处理的？麻烦分享一下你们的监控指标和维度针对service me sh</p></blockquote><p>A：既可以让 Envoy 对 cluster 做主动健康检查，也可以在 xDS 服务端那边主动更新 envoy的 endpoints，比如依赖 pod 配置的探活指针。我们日志都是到 pod 的标准输出，然后 ELK 那一套做收集处理<br>A：日志是怎么收集的呢？链路监控目前怎么用的呢？那个技术栈</p><blockquote><p>Q：nginx+consul+consul-template这个用nginx做edge proxy?nginx这一层如何做cluster?</p></blockquote><p>A：nginx 我们是部署多台，前面还有一层阿里云的 slb对 nginx做主动健康检查</p><blockquote><p>Q：daemonset模式下，如果一个服务挂掉了例如timeout，如果实现circuit-breaker? 服务挂了。</p></blockquote><p>A：服务熔断我们最近刚开始调研，现在给不出实践经验<br>Q: 哦，那只好还是编码在代码里面</p><blockquote><p>Q：网关怎么处理健康检查的，pod日志怎么处理，统一收集吗？链路监控又是如何接入的？</p></blockquote><p>不好意思，问题重复了</p><blockquote><p>Q： istio不好用，为什么不考虑sofa mesh来代替？</p></blockquote><p>A：早期 0点几版本的时候不稳定哈。现在不是特别在意大集群性能问题的话，istio 是可用的<br>A: 实测过一下，istio sidecar injection大概平均一次增加1ms的latency，感觉不是很厉害。一般远程调用都是十毫秒以上的返回。</p><blockquote><p>Q：请问如何实现的灰度发布和蓝绿部署</p></blockquote><p>A：灰度发布也是基于配置不同 endpoints 权重这个思路来的，也可以部署不同的deployment，基于 pod 比例来做。蓝绿部署实践不多哈</p><blockquote><p>Q：  你们服务tracing和流量监控是怎么做的呢？</p></blockquote><p>A: traceing 目前还是原始的日志方式，在研究替代方案，后续有进展可以再分享一下。流量监控我们有做 pod 的进出流量统计，也有从 Envoy metrics 获取的请求统计</p><h2 id="20191110：蔚来汽车的Kubernetes实践"><a href="#20191110：蔚来汽车的Kubernetes实践" class="headerlink" title="20191110：蔚来汽车的Kubernetes实践"></a>20191110：蔚来汽车的Kubernetes实践</h2><p><a href="https://shimo.im/docs/DRgJKGJdvV9cXDKD" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：请问Kubernetes数据备份与恢复，这个是包括kubectl-proxy，etcd，网络配置等吗？如果进行多集群下的数据备份？</p></blockquote><p>A：备份的其实就是etcd中的数据，我们网络是用的flannel，一些关键网段信息也是存在etcd中的，对于多集群来看的话，还是要针对数据存放对应的etcd集群数据去进行备份</p><blockquote><p>Q：请问一下业务日志太多，一天一个节点的业务日志有200G，怎么做日志收集及监控告警。</p></blockquote><p>A：一天一个节点200G的话，这个要看你们集群节点多不多，我们上百个节点，一个节点的量大概在100G左右，线上日志量都是几十T的数据，用我分享的方案去落地应该是没问题的，ELK的整体性能还是非常不错的，filebeat现在最高的性能分配是占用500m cpu 1G内存，收集起来也是能应对的，这个根据你的量再调整，监控的话肯定就用prometheus就好，官方都是有自动发现的配置，很便利，当然如果你要对日志进行分析，这块就比较复杂了，可以通过es接口去聚合数据，当然日志的字段也要规范好。</p><blockquote><p>Q：生产环境 k8s 采用二进制方式搭建还是 kubeadm ，还是其他方案？</p></blockquote><p>A：线上采用的是二进制的方法，因为我们上k8s的时候 kubeadm还是测试版本，当然现在高版本的kubeadm应该已经是正式版本，但是觉得还是二进制更方便一些，你改配置，以及自定义一些参数会方便一些。</p><blockquote><p>Q：生产环境k8s都用哪种网络模式</p></blockquote><p>A：我们用的是flannel，不过后续会考虑打算换成calico，现在发现线上有一定网络限制的需求，calico的性能相对也会更好，但是维护的复杂度比较高，在集群节点多的情况下，要添加路由反射器，这个比较关键，而且网络选型前一定对未来的规模有个规划，规划好使用的网段。</p><blockquote><p>Q：请问生产环境中etcd的数据需要备份吗？怎么备份？还有二进制安装etcd集群由3个节点增加到5个节点，需要重新生e成证书后再重启etcd服务吗？增加节点重启策略是一个一个节点依次重启吗</p></blockquote><p>A：建议备份，其实主要用到的就是etcd的snapshot功能，不复杂，看下我分享的脚本即可，扩容的话需要修改server端证书对应的host，逐台重启没有问题的，官方的方法也是要一台一台执行的，线上etcd节点我做过测试，即使操作失误都down掉的话也不会影响你现有服务的运行，而且保证法定节点的存在就更好。</p><blockquote><p>Q：你分享的prometheus是operator方式吗？你的监控数据是有经过二次开发后作为标准格式输出吗？对于nginx和java监控如何实现呀？</p></blockquote><p>A：prometheus没有用operator的方式，是用的官方的yaml文件创建的，我们线上java服务居多，都是通过spring官方的prometheus插件就可以自定义监控数据，nginx的话我们还真的不多，这个估计你要用相应的exporter就好，监控数据是开发自定义上传的，我们没有做限制。</p><blockquote><p>Q：pod挂掉之后如何保留现场，比如做内存dump有什么好的方案没？</p></blockquote><p>A：我们这边是这样，对于健康检查没有添加liveness的检查，也是防止容器的重启，尤其是在第一次项目上线，难免无法正常启动，如果加了liveness就会一直，重启，不太方便查问题，所以只加了readiness,只是保证不影响线上访问，对于生产中，java项目遇到最多的就是OOM问题，这个我们也对POD重启的原因加了报警，至于dump我们还没这方面的操作，需要开发自行检查了。</p><blockquote><p>Q：传统系统架构如何改造成k8s架构？</p></blockquote><p>A：这个问题有点宽泛呢，还是得看您这边实际的场景，我觉得更多的也是得需要开发一起的配合，尽量保证服务模块都能够做到微服务话，不要耦合的太紧，您可以先搭建一个测试集群，然后从开发那边找一个模块进行docker化的转换，然后一点一点再去试吧。</p><blockquote><p>Q：是否有ingress tcp/udp应用的生产级网络方案？</p></blockquote><p>A：我们没有用ingress，我们的用法也算是一种比较简单的用法，我们是把网关直接加入到k8s集群中，这样网关就可以调用到k8s的service，因为我们以网关为中心，做了一些安全及认证功能，所以之前的网关必须要用到，而且加了ingress相当于多加了一层性能消耗，所以也没有用，最后我们把之前部署在虚拟机上的网关也变成docker化去部署到集群内部。</p><blockquote><p>Q：传统数据库负载过高时查询缓慢，但是会有结果，k8s架构数据库负载过高直接pod重启，导致没有结果返回，请问应该如何处理的。</p></blockquote><p>A：我们集群还没有跑数据库这种有状态的服务，但是听您描述，还是得看看pod重启的具体原因，如果pod都重启了，理论上跑在机器上一定也会有问题，还是在上云之前做好充分的性能压测，并且您可以考虑取消liveness的健康检查，只保留readness访问的检查。</p><blockquote><p>Q：采集日志过程中，fluentd或fluent bit通过读取node节点docker log目录采集日志，该目录包含了所有服务的日志。请问如何在output阶段中根据namespace和container_name创建elasticsearch的index，并作为index的命名前缀？</p></blockquote><p>A：首先不建议通过docker目录的方式采集，日志还是落盘到具体路径为好，因为我也碰到过您这个困惑，因为docker的目录都是软链接，而且当docker 重启后路径会改变，当然我们线上用的是filebeat采集，不知道fluentd能不能解决这个问题，由于是软链接，很难用相对路径，必须用绝对路径采集到真正存放的那个目录日志，我们对于es index名称的创建是通过日志提供的一个index名称字段去匹配的，索引名称会引用这个变量进行区分不同的index。</p><blockquote><p>Q：fileneat node模式采集，多个相同pod在同一节点情况下，如何映射日志目录耳不互相干扰，另外如何配置filebeat做到pod变动时的采集</p></blockquote><p>A：您这个情况我们也遇到过，多个pod跑在同一个节点确实存在这个问题，因为你的deploy yaml是定死的，很难处理这种情况，我们的解决方法是添加pod的亲和性，保证每个节点都尽量只跑一个pod，当然如果节点非常小的情况下，这种做法有一定问题，以生产使用上来看，我们最初多个pod跑在一个节点同时写一个文件的话也是还可接受。</p><blockquote><p>Q：持续集成系统具体的细节可以透露下吗？基于gitlab ci，jekins？或者小公司可以直接用Spinnaker 这些吗？</p></blockquote><p>A：ci cd的话因为我们有自己现有的发布平台，背后的原理实际上还是调用jenkins去处理</p><blockquote><p>Q：日志收集的sidectar模式具体是咋部署的。filebeat和应用部署在一个pod里吗</p></blockquote><p>A：对的，部署在一个pod里，相当于你的deploy yaml里会有两个image配置，一个是你的服务，另一个是filebeat，具体的配置看下我的截图，把这部分配置放到你的服务配置后面即可，但是就像我分享说的，这种方式可能会比较消耗资源，但是确实自定义比较方便，但也增加了yaml配置</p><blockquote><p>Q：我司测试环境搭建的Harbor版本是1.5，使用docker-compose来按照Harbor各个组件的依赖顺序来启动的，但是当系统或者docker重启后，Harbor的容器就无法按照依赖顺序来启动，经常会有容器启动失败。请问下这个该如何优化呢？</p></blockquote><p>A：其实你需要在docker中注意一个参数，live-restore : true，这个参数很有用，你可能没有添加，这个参数能保证在你维护重启docker的时候，还能保证不影响正在运行的docker 容器，另外你可以对harbor进行监控，如果down了的话大不了做个自动重启的操作也不妨大碍。</p><blockquote><p>Q：（1)k8s平台上线前有什么测试？如何测试？可以上线的依据？（2)常见互联网架构的业务，需要改造才可以在k8s跑吗？需要如何改造？有什么坑？（3)你们多个业务线都共用同一套k8s？如何实现不会因为一个业务的高峰影响其他业务？（4)有什么方案可以实现最大限度的不丢日志？</p></blockquote><p>A：1.因为我不是测试，对于测试这块可能干涉的不是很多，对于运维来讲可能更多的是比较关注上线之前的压力测试，这块会跟后续的稳定性有很大关系 2. 常见的架构业务理论上改造应该不需要很大，最主要的是解决docker镜像化，遇到的坑可能更多的是对于dockerfile打镜像理解的不好，导致一些启动问题以及配置的丢失等等，3. 我们是通过namespace区分业务线，需要提前规划好业务，指定的业务线只跑在对应的机器上比较关键。 4. 我使用的ELK过程中还真的很少遇到过丢日志，只要你架构足够健壮应该是没什么问题的，另外ELK中一定要用消息队列，降低你消息传递的压力，保证每个组件都不要出现性能瓶颈，如果实在怕丢日志，可以让logstash在消费的时候把消息落盘，es也要合理配置好刷新的频率以及内存多大落盘等参数，提前做好各个组件的压测是保障。</p><blockquote><p>Q： 你好，我是蔚来es8车主，很高兴看到蔚来的分享。我想了解下你们存储的方案，之前听说是用的portworx，具体方案透露一下。你们这个team在北京还是上海？ 用aws的话有没有考虑直接使用aws的k8s服务？es也运行在k8s里吗？</p></blockquote><p>A: 您好，我们team在北京，因为我们的集群还未上有状态服务，所以暂时还未考虑分布式存储的问题，这块确实是很重要的一个环节，我们线上的服务基本也是通过S3去存储一些数据使用，portworx这个好像也出了很久了，当时在还没有k8s的时候调研过，不过想大面积使用貌似是要花钱用商业版，建议还是用现在比较流行的ceph可能会更好一些吧，我们还未用到aws自己的k8s服务，es有运行在k8s里的业务，但是不是通过operator部署，后端数据也没用到分布式存储，由于量不大，只是落在本地了，后期会进一步调研ceph以支持后期的有状态服务的迁移。</p><blockquote><p>Q： 请问是否考虑过 fluent-bit ，目前 filebeat 有没有性能上的问题呢？</p></blockquote><p>A: 因为在虚拟机的时候我们就用的filebeat，就沿用下去了，filebeat暂时还未发现性能问题，可以直接使用，总日志量我们应该有几十T的样子，在生产使用的过程中感觉filebeat还是比较靠谱的。</p><blockquote><p>Q：k8s一年的证书问题，你们怎么解决的呢？</p></blockquote><p>A: k8s的证书我们的时间都设置的是十年，kubelet可能是一年，这个我们最初疏忽了，碰到过一次，最终通过删除现有的配置，让kubelet重启自动生成，当然如果您是最初规划的话，可以加上证书自动到期认证的功能，据了解好像现在高版本的k8s已经不存在这个问题，我还没了解的那么多，您可以再查查</p><blockquote><p>Q：k8s生产环境上的安全相关的配置有哪些呢？</p></blockquote><p>A: 安全的话这个比较宽泛啊，这个还是要从各个方面完善，首先起码要保证流量流入方向的各个环节的安全限制，以及服务接口调用上的安全认证，以及开发人员使用时候的权限控制等等。</p><blockquote><p>Q：prometheus自定义监控具体怎么搞得，比如想要监控容器的端口连接数?</p></blockquote><p>A：容器端口的连接数监控确实还未添加，在原来宿主机的时候是有的，这块有些忽略了，加的话也不是很费劲，可以通过你们自己自定义的exporter去监控。</p><blockquote><p>Q：落盘的日志怎么定期清理</p></blockquote><p>A: 落盘的日志通过写好的清理任务进行清理，因为我们的日志都是规范的落到统一的目录，并且目录名称也是很规范的，所以清理起来很方便，写个简单的脚本就可以啦，定时清理就OK</p><blockquote><p>Q：k8s里java服务，你们是怎么做资源限制的？</p></blockquote><p>A: 我们是在yaml注入了能获取设置资源的env参数，然后在ci打镜像的时候统一规范了服务启动的start脚本，jvm里配置的是k8s配置的资源，所以java服务的使用也不会超过我们分配资源的使用。</p><blockquote><p>Q：想了解下你们日志收集 你们的服务数也就是日志数大概多少？每个k8s节点分配到的pod大概多少 因为是daemonset部署想了解一下filebeat的配置文件是怎么管理的？  后端日志分析完全靠es么？日志有没有入hadoop的需求？有MR或spark</p></blockquote><p>A： 我们一天的日志量最多能达到近10T的数据，当然这不全是k8s这边的日志，1个节点最多的话大概能跑到30多个pod，filebeat我们是走的统一的一份配置，因为日志都是json规范好字段传输，也无需做过多处理，因为日志分析主要不在这个场景做，我们这个场景只是提供开发看日志，当然其中一些网关数据我们会做报警和具体的图示，需要分析的大数据专门走我们的hadoop集群，我们这边有用到MR 和 spark，但是大数据相关的东西都没有在K8S上面。</p><h2 id="20191010：超大规模商用-K8s-场景下，阿里巴巴如何动态解决容器资源的按需分配问题？"><a href="#20191010：超大规模商用-K8s-场景下，阿里巴巴如何动态解决容器资源的按需分配问题？" class="headerlink" title="20191010：超大规模商用 K8s 场景下，阿里巴巴如何动态解决容器资源的按需分配问题？"></a>20191010：超大规模商用 K8s 场景下，阿里巴巴如何动态解决容器资源的按需分配问题？</h2><p><a href="https://shimo.im/docs/Jc6yppJhcDYdPXRH" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：请问heapster中采集到的MetricMemoryWorkingSet指标与ps命令获取到的RSS有何区别？heapster的源码中对该指标的描述是“Total working set usage. Working set is the memory being used and not easily dropped by the kernel”，同时heapster也采集了MetricMemoryRSS，kubectl top为何采用MetricMemoryWorkingSet而不采用MetricMemoryRSS？在Kubernets 1.10版本下，部分运行Java应用的pod出现kubectl top值超过ps RSS值的情况。</p></blockquote><p>A1：阿里巴巴内部并不使用heapster，我们是通过直接去读取容器cgroup值，获取容器实时资源使用情况。据我所知，社区对于heapster完全废弃。建议通过主流工具采集，汇聚，聚合数据。试试 <a href="https://github.com/kubernetes-incubator/custom-metrics-apiserver" target="_blank" rel="noopener">custom-metrics-apiserver</a> 和 <a href="https://github.com/kubernetes/kube-state-metrics/tree/master/docs" target="_blank" rel="noopener">kube-state-metrics</a> 。在大规模场景下社区的很多开源工具都存在性能问题，一般这类工具我们倾向于自研。</p><blockquote><p>Q：如何看待suse 放弃openstack?</p></blockquote><p>A2：Openstack是款伟大的软件，它给IaaS的研发和周边生态带了很多意想不到的成果，例如ceph等。SUSE放弃OpenStack可能出于多种原因。或许是技术选型，或许是财政收益等等。顺便说说，SUSE目前在Kubernetes相关领域的投入还是挺多的。最近的Kubecon上，SUSE均展示了相关技术成果。</p><blockquote><p>Q：直接修改 cgroup 容器一定会获得资源吗？</p></blockquote><p>A3：容器技术隔离的技术基础就是cgroup层面。在宿主机腾出足够资源的情况下，给cgroup设置更大的值可以获取更多的资源。同理，对于一般优先级不高的应用，设置较低的cgroup资源值就会达到抑制容器运行的效果。</p><blockquote><p>Q：底层是如何区分在线和离线优先级的？</p></blockquote><p>A4：底层是无法自动获取谁是在线，谁是离线，或者谁的优先级高，谁的优先级低的。这个我们可以通过各种Kubernetes提供的扩展实现。最简单的是通过label，Annotation标识。当然通过扩展QoS class也是一种思路。社区版本的QoS class设置太过于保守，给予用户发挥的空间不大。我们通过这些方面也进行了增强。在合适的时候或许会推向社区。自来来来动感知是个方向，感知谁是干扰源，感知谁是某种资源型应用，这块我们还在研发中。做到真正的动态，肯定是具备自动感知的智能系统。</p><blockquote><p>Q： “与社区版  Vertical-Pod-Autoscaler 不同，Policy engine 不主动驱逐腾挪容器，而是直接修改容器的 cgroup 文件；“，想问一下，不主动驱逐的话，如果Node的资源达到上线了会怎么处理？</p></blockquote><p>A5：这是一个好问题。首先这里要先区分是哪种资源，如果是CPU型的，我们可以调整低优先级容器的cgroup下cpu quota的值，首先抑制低优先级的容器对于CPU的争抢。然后再适当上调高优先级容器的相关资源值。如果是内存型资源，这个不能直接去缩小低优先级容器的cgroup值，否则会造成OOM，对于学习学习内存型资源的调整，我们会在其他分享中继续讨论。这个技术比较特殊。</p><blockquote><p>Q： 只修改cgroup，怎么保证k8s 对单个物理机能够分配更多的容器</p></blockquote><p>A6：文字直播有了一定说明，容器的资源消耗并非是一成不变的，很多时候它们的资源消耗呈现潮汐现象，相同的资源条件下部署更多应用，完成更多作业就是达到资源利用的最大化的效果。资源出现超卖才是我们这个主题讨论的最大价值。</p><blockquote><p>Q：也就是说 低优先级的容器，request 设置的比limit 小很多，然后你们再动态的调整cgroup？</p></blockquote><p>A7：在现有QoS场景下，你可以理解被调整的Pod都是burstable的。但是我们并不是直接调整Pod元数据的limit的值，而是调整limit在cgroup反映的值，这个值在资源竞争缓和的时候还会被调整回去的。我们并不建议单机的cgroup数据和etcd的中心数据割裂太久。如果长期偏离，我们会像VPA发出警报，联动VPA做调整。当然在容器运行的高峰期，任何重建容器的操作都是不明智的。</p><blockquote><p>Q：你们现在cpu 超卖的比例是多少？</p></blockquote><p>A8：这个不方便回答，哈哈。等我确认可以回答的时候再修改这里。</p><blockquote><p>Q：谢谢了，整体的理解就是你们开始就让物理机超配了一定比例的pod，然后通过策略动态调整容器的cgroup值</p></blockquote><p>A9：如果资源完全是富足冗余的，这个动态调整也有一定意义。就是并非资源用满场景下，高优先级应用会被干扰，实际上，当主机的CPU达到一定比例，打个比方例如50%，应用的时延就变大。为了完全确保高优先级应用的SLO，牺牲低优先级的CPU正常运行也是有价值的。</p><blockquote><p>Q：如何确保一定是低优先级的容器和高优先级的服务部署在一起的，而不都是高优先级或者不都是低优先级，只用packing 算法就可以？</p></blockquote><p>A10：这个方法比较多，可以配置亲和性和非亲和性。可以通过预编排等手段。预编排就是在应用部署前，首先规划好各个应用部署在哪些node上。</p><blockquote><p>Q：Policy engine 有没有考虑开源？</p></blockquote><p>A12：有计划进行开源，Policy engine更多的是和自身的应用属性相关，电商应用或者大数据处理应用的策略都是不相同的，我们开源会首先开源框架和附带一些简单的策略，更多的策略可以用户自定义。</p><blockquote><p>Q：只是调整 Cgroup 的配置，对于应用中的配置如何改变？比如 JVM 根据中的一些参数？如果不重启 jvm 如何让 Cgroup 的限制生效？</p></blockquote><p>A8: Java进程还是比较特殊的。很多时候容器重启才能适配的参数才能生效。我们这里针对的是一种通用的方式。对于你提到的这类应用，压制低优先级的容器有效，但是给高优先级应用再分配资源应该无效。</p><blockquote><p>Q：我之前遇到的大部分应用都无法正确感知 cgroup 的配置，因此很多情况都需要在启动参数里面根据 cpu 或者 mem 设置参数，那么也就是说即使改变了 cgroup 对于他们来说都无效，那么使用场景也就有限了</p></blockquote><p>A14：限制容器的资源使用这个还是有价值的。限制低优先级应用本身也可以提升高优先级应用的SLO，虽然效果没有那么明显。稳定性的考量同样也很重要。</p><blockquote><p>Q：Policy engine 目前在阿里的使用如何？在生产上有多上的规模使用这种方式进行动态调整？是否和社区的 HPA VPA 配合使用？</p></blockquote><p>A15: Policy engine在阿里某些集群已经使用。至于规模暂时无法透漏。涉及到很多组件之间的联动，社区的HPA和VPA目前都不太能满足我们的需求。因此阿里的HPA和VPA都是我们自行开发的，但是和社区的原理是一致的。阿里HPA的开源可以关注 openkruise社区。VPA开源计划我这里还没有确切消息。</p><blockquote><p>Q：data aggregator 通过什么方式采集数据?</p></blockquote><p>A16：类似cadvisor方式直接从node的cgroup获取实时资源消耗数据。然后根据容器，node为单位再进行聚合。</p><blockquote><p>Q：当单机节点资源不足以提供容器扩容时，目前是否可以进行HPA或VPA扩容呢</p></blockquote><p>A17：单机节点不足的时候，应用可以通过HPA进行增加副本应对。但是VPA如果选择原节点进行更新的话，是失败的。只能调度到其他资源丰富的节点。在流量陡升的场景下，重建容器未h h必能满足需求，很可能导致雪崩，即重建过程中，整个应用其他未升级的副本接受更多流量，OOM掉，新启动的容器再瞬间被OOM，所以重启容器需要慎重。快速扩容（HPA)或者快速提升高优先级资源，抑制低优先级容器资源的方式效果更明显。</p><h2 id="20191107：如何实现-K8s-一键部署？开发部署提速-8-倍？带你上手一款下载超-10-万次的-IDEA-插件"><a href="#20191107：如何实现-K8s-一键部署？开发部署提速-8-倍？带你上手一款下载超-10-万次的-IDEA-插件" class="headerlink" title="20191107：如何实现 K8s 一键部署？开发部署提速 8 倍？带你上手一款下载超 10 万次的 IDEA 插件"></a>20191107：如何实现 K8s 一键部署？开发部署提速 8 倍？带你上手一款下载超 10 万次的 IDEA 插件</h2><p><a href="https://shimo.im/docs/6HDpcqJ3yQx8yHh3" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q： k8s各组件，比如etcd，建议部署在容器内还是物理机？有什么区别或者优劣吗？</p></blockquote><p>A1：etcd可以部署在容器里，物理机的话就是性能更好一点。</p><blockquote><p>Q：如果登录是堡垒机，并且是动态密码，那个配置保存必须要密码，所以不方便吧！能动态密码登陆局域网服务器吗？</p></blockquote><p>A2：这是个非常好的建议，我们需要在后续的版本中开发这些能力。</p><blockquote><p>Q：如何在本地电脑(如mac)部署k8s玩玩，以及写Go代码增删改查k8s资源，这块有啥玩一玩的优良经验嘛？目的是想本地开发测试k8s，更加去熟悉k8s内部机制。</p></blockquote><p>A3：本地mac要玩k8s可以去搜一下minikube。</p><blockquote><p>Q：k8s一键部署是用kubeadm部署么，本地虚拟机部署多节点k8s集群，虚拟机网络应该怎么处理。由于是自己部署着玩玩，在公司里虚拟机网络不能使用桥接的方式。而使用网络地址转换NET+hostonly 在起calico网络的时候worker节点calico起不来，提示网络冲突。谢谢</p></blockquote><p>A4： nat模式两个机器会用同一个IP，所以会冲突，可以给虚拟机配两个网卡，1个网卡用NET+hostonly用来访问外部网络，1个网卡用private network用来节点间Pod的网络</p><blockquote><p>Q：对于后端开发者来说(写Go)，有必要去更加熟悉k8s么？毕竟k8s就是个运维工具，为了更爽的去部署软件以及扩容等等，有必要去深入了解k8s内部机制么，这块有没有什么建议和见解？</p></blockquote><p>A5：首先，Kubernetes 本身是用 Go 语言写的，就是一个最好的 Go 语言开发和架构的最佳学习物。</p><blockquote><p>Q：k8s 网络组件calico和自带的flannel，请问建议采用哪一个？</p></blockquote><p>A6：简单上手选flannel，看重功能选calico</p><blockquote><p>Q：有哪些开源的管理k8s Web UI 软件，这样可以部署在公司内，所有团队直接在该软件内傻瓜式操作k8s资源，自己部署上线代码？</p></blockquote><p>A8：K8s自带的dashboard可以试试</p><blockquote><p>Q：我想深入学k8s，但是k8s内部使用了 etcd/coredns，以及监控这块使用 prometheus，这些技术是不是先深入学习下，再去深入学习 k8s呢，毕竟 k8s 太大了，一上来就深入会容易找不到门路，这块大大有啥经验没？</p></blockquote><p>A9：建议从K8s核心开始学习，再学习周边组件。从中心到外围的顺序。推荐学习下CNCF和阿里云联合做的这个免费公开课：<a href="https://edu.aliyun.com/roadmap/cloudnative" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：若k8s集群服务器宕机，请问如何快速恢复集群能力（除拉起kubelet等待其他组件自动拉起，是否还有其他方式)？</p></blockquote><p>A10：配置3master高可用可降低宕机带来的损失，另外备份组件的配置文件。</p><blockquote><p>Q：Master节点如果同时作为node节点，请问存在哪些风险？</p></blockquote><p>A11：master节点不宜作为node节点部署应用，会导致集群不稳定。</p><blockquote><p>Q： 您好！现在使用了jenkins pipeline做为ci工具，cd1: helm chart 对每个应用编写对应的chart，通过questions.yaml在rancher定制化接口. cd2: 通过argocd 和helm chart 形成的git ops  ,请问有没有更好的工具推荐？ 想解决批量升级，现在每次升级都需要人工干预.</p></blockquote><p>A12:</p><h2 id="20191107：k3s在边缘计算中的应用实践"><a href="#20191107：k3s在边缘计算中的应用实践" class="headerlink" title="20191107：k3s在边缘计算中的应用实践"></a>20191107：k3s在边缘计算中的应用实践</h2><p><a href="https://shimo.im/docs/x3WjRWHhdJVPkdQG" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：一台阿里云杭州服务器，一台阿里云美国服务器，都有公网IP，如何方便，快捷的（并且不购买网络带宽费用)的搭建一个2台服务器的K3S集群？</p></blockquote><p>A：你这个问题的话主要就是你的这个路由的问题，pod网络和service网络的一个拉平的问题，涉及到这个路由的跳转需要你自己去去配置的。</p><blockquote><p>Q：边缘节点的K3S集群可以很方便的被中心节点的K8S集群来管理吗？如何 管理？数据如何同步？中心节点需要存放边缘节点的数据吗？边缘节点挂了之后中心节点能拉起或管理吗？现在我们也计划做这放面的工作。我们有多个分公司？想在分公司部署集群，但没有维护人员，还有一个问题就是，现在集群 联邦不成熟，也不能很好纳管多个集群做资源调度？</p></blockquote><p>A：这个k3s集群和k8s集群，它是一个平级的关系。他属于多个集群如果要管理多个集群我们可以采用向rancher这样的集群管理平台去管理它，我们现在就是这么做的在阿里云上有一个rancher的平台，然后管着我们在阿里云平台的业务集群和我们的多个边缘集群。<br>然后你的第二个问题就是中心节点会存储我整个集群的所有的数据，因此我们应该周期性的对这个中心节点的这个数据进行一个备份，而且在未来的版本当中，k3s会支持HA，它是，它是通过实现后端存储，如postgresql、MySQL的一个高可用性保证我们的集群的可靠性的，这个现在已经是实验的特性了，估计在未来很快就会发布了。工作节点挂了的话分两种情况吧一种是你这个节点直接就不能工作了，还有一种情况点跟我的指甲想不通啊，那么前一种情况的话肯定是我的业务也不能正常工作了，后一种情况的话，其实我的业务还是在正常运行的，只不过是不能通过我的主节点去调度了，但是一旦它恢复这个通信的话，所有的都会自动恢复，因为这个边缘的这个设备的他有个特点就是网络不稳定，还有，还有就是经常会掉件这种情况，我们这个集群已经在跑了有两三个月了，表现一直是很好的。</p><blockquote><p>Q：k3s 去哪获取 资料了？</p></blockquote><p>A：k3s相关的文档我们可以在rancher的官方网站上获取的。也可以到它的github主页上面去获取相关的材料。<br>补充：这题我会！k3s的官网是：<a href="https://k3s.io" target="_blank" rel="noopener">k3s.io</a>，GitHub的主页是：<a href="https://github.com/rancher/k3s" target="_blank" rel="noopener">k3s</a>，最新开始运营的官方微信公众号ID是：Dockerlab</p><blockquote><p>Q：K3s的list-watch请求没有走tunel-proxy吗？</p></blockquote><p>A：k3s的主节点和agent节点之间通信都是走的tunnel通道的。</p><blockquote><p>Q：边缘网络不稳定的场景，list-watch请求会有问题吗？K3s有针对边缘网络不稳定场景做优化不？</p></blockquote><p>A：这个场景其实就是kubelet跟我的主节点失联，一旦这个通信恢复的话，主节点他会直接把状态重新传到这个工作节点上去。</p><blockquote><p>Q：k3s在使用上和k8s相比有什么限制和优势？目前我理解来看主要就是占用较少资源。</p></blockquote><p>A：对，因为边缘设备的话都是很小的工，一般都是公用的，工业用的工控机，工控机一般都是一个低压的CPU啊，然后还有一个就是内存比较小。实际上来讲的话我目前没有发现根k8s有太大的区别，基本上在我k8s上部署的应用全部可以部署在我的边缘端。</p><blockquote><p>Q：k3s的主节点和agent节点之间通信都是走的tunnel通道的。 List-watch请求也走tunnel通道的吗，据我看源码，并没有走tunnel，只有logs和exec接口走了tunnel。</p></blockquote><p>A：这里相关的源代码我没有深入去研究过，下来我详细去了解下k3s这里的机制。<br>补充：list-watch就是直接访问kube-apiserver的端口。</p><blockquote><p>Q：k3s集群直接更改设备IP是否可用，如果不支持更改IP，对于更改IP的需求有什么应对方案？</p></blockquote><p>A：这里分两种情况，在集群部署完成后，如果要更改server节点的IP，那么我们需要重新去将所有的agent节点重新加入到集群中，如果更改agent的节点IP，那么可能导致agent节点对应存储在server节点中的身份凭证失效，也就是需要移除失效的节点，将修改后的节点重新加入，当然这种情况是在同一个子网内的情况，如果跨网段的话，那就会更复杂一些了。</p><blockquote><p>Q：Rancher管理k3s集群，k3s的master要暴露公网IP吗？主讲人的多个边缘</p></blockquote><p>A：server节点不需要暴露公网IP，只需要能从server节点内部访问rancher即可。通过import的形式将k3s集群导入到Rancher中即可管理起来，也可以管理应用和配置。</p><blockquote><p>Q：k3s server 也支持docker吧</p></blockquote><p>A：是的，agent节点提供了–docker参数，可以指定它的容器运行时为docker</p><blockquote><p>Q：rancher  可以自己部署，管理自己的 k3s?</p></blockquote><p>A：是的，我们的rancher是部署在阿里云端，同时管理了我们的中枢业务k8s集群和多个客户的k3s边缘集群。</p><blockquote><p>Q：有在Android上成功运行的经验或者案例么</p></blockquote><p>A：我们暂时还没有涉及到arm的设备，也没有可供测试的arm设备，因此暂时没有这方面的实践。</p><blockquote><p>Q：运行单个Docker容器来安装Ranche？可以满足管理吗？</p></blockquote><p>A：可以，但是这样可靠性会不好，推荐还是多实例通过负载均衡的形式来部署。</p><blockquote><p>Q： k3s 支持master高可用吗？</p></blockquote><p>A：暂时还不支持，但是已经发布了实验特性的版本，通过对k3s集群数据存储的高可用来实现的，我们可以部署高可用的postgresql作为k3s集群的管理节点的数据存储。这个特性应该不久就会GA了。</p><blockquote><p>Q：边缘资源充足，是否可以直接用k8s?</p></blockquote><p>A：如果边缘设备资源充足的情况下，也可以使用k8s来维护，但是需要考虑的是边缘设备网络的复杂性和不稳定性。</p><blockquote><p>Q： K3s针对边缘设备网络的复杂性和不稳定性做了哪些改进</p></blockquote><p>A：譬如刚刚有同学提到的list-watch问题，k3s的我没有深入研究过，但是之前在调研kubeedge的时候，了解到其实就是在断网的情况下仍旧能够实现区域内自治，保证业务的稳定和持续性。</p><blockquote><p>Q：针对kubeedge实现的区域内自治，K3s当前没有实现的话，商用是否有风险呢，在边缘网络不稳定</p></blockquote><p>A：这个还是还是得从那个边缘端的得从那个边缘端的这个特点来说。边缘端设备比较分散，每个节点的责任其实很有限，当然肯定有一些非常重要的节点，那这一部分我们可以采取一些额外的措施来保证可靠性，譬如直接从硬件上冗余来保证这一个区域的业务不中断。不是说k3s不能实现区域自治，譬如worker节点在于主节点失联不受控了之后，我怎么管理这台节点的应用，这种情况一般发生有两种情形，一种是断网，一种是断电，当然，断电的情形就不说了，断网的情况下。</p><blockquote><p>Q：请问k3s,k8s,kube,openflow,现在名词越来越多了,有没有办法在去区别这些名词是处在哪些的阶段，用于什么功能？</p></blockquote><p>A：这个问题的话，首先还是根据项目需求来做对比调研工作，新技术层出不穷，不需要追求最新的，当下比较流行的一定是适应性最好的，一般经过了众多的验证。</p><blockquote><p>Q：k3s 启动个helm的时候，由于众所周知的原因，经常下载不到镜像，怎么解决呢？</p></blockquote><p>A：官方提供了离线镜像包，大约200MB不到，这个镜像包包含了我们启动server和agent节点所需的所有镜像，能够保证集群自身功能正常。helm 我们可以使用国内的charts源来代替，例如azure的源。</p><blockquote><p>Q：containerd可以配置morror么？</p></blockquote><p>A：可以配置，但是比较麻烦，docker提供了比较好的人际接口，所以推荐使用docker。</p><blockquote><p>Q：k3s和k8s搭建的容器系统是否可以无缝的相互切换，如果不是，应该怎么做适配才能相互转化？</p></blockquote><p>A：我不太清楚你这个无缝切换是什么意思，是业务迁移还是？首先这个需求可能并不常见，而且两者面向的场景不同。</p><blockquote><p>Q：备份k3s的集群数据为什么是备份那几个目录而不是备份sqlite的db文件？k3s的server支持类似rke对etcd定期自动备份配置吗？</p></blockquote><p>A：因为还涉及到一些认证文件，譬如agent节点在server端存储有一个身份标记，agent节点的恢复是会判断这些身份的。一旦丢失，重新注册相当于是一个新的节点了。</p><blockquote><p>Q：请教老师，不管是基于containerd还是docker，它们都是共享内核的，那么如何做到安全隔离呢？</p></blockquote><p>A：在底层的资源隔离上，还是依赖于系统的各种命名空间，这块建议可以详细研究一下pod的安全策略。</p><blockquote><p>Q：离线镜像文件是否只要放在images目录即可，文件名并不重要，都可以被识别出来？</p></blockquote><p>A：是的，使用containerd作为runtime时，不需要手动导入，启动时会自动从这里获取镜像，如果使用docker作为运行时，需要手动load镜像，因为国内直接访问不了gcr.io下面的镜像。</p><blockquote><p>Q：请问一个问题，单机版K3S，容器内访问本机的一个服务端口，无法访问，这个问题官方测试过吗？</p></blockquote><p>A：这个可能有很多种情形了，看是否是主机安全策略限制。例如selinux或者iptables规则限制了。</p><blockquote><p>Q：centos在边缘设备小内存设备上能装吗？也是有内存限制的吧，最小支持多少？</p></blockquote><p>A：k3s server官方给的需求是512MB就能满足，但是实际的观察中，一般情况下用到200多MB，剩下的就看你部署的应用的资源需求了。另外我们需要保证应用不能把系统资源全部抢占了。</p><blockquote><p>Q：k8与k3在api上使用上有啥具体差别比如是否支持crd?另外k8的网络组网方案有flannel和calico，k3是怎么组网的?</p></blockquote><p>A：K3s默认使用的是flannel网络。<br>补充：k3s也支持手动指定其他的CNI，都是比较灵活的配置。</p><blockquote><p>Q：k3s可以用来部署安全网关么？</p></blockquote><p>A：暂时没有进行过相关的实践。</p><blockquote><p>Q：iot client设备没有固定公网ip下如何进行部署？需要自行组网吗？</p></blockquote><p>A：这里是一个大家都会遇到的问题，一般来说，IOT设备都是客户内网的，不可能给你在防火墙上打洞，我们现在是自己开发了一套系统，只用来偶尔维护边缘设备的后台，类似ssh反向代理就可以实现。</p><blockquote><p>Q：容器运行时的查看的资源怎么跟宿主技做区分，比如我在运行的容器里面，free -h看到的是宿主技的，怎么做饭只能看到容器本身的呢？</p></blockquote><p>A：是否对容器做了资源限制。</p><blockquote><p>Q：边缘设备是怎么被监控的，有的什么方案呢？是否也有监控的实时界面？？</p></blockquote><p>A：我们可以考虑采取prometheus pushgateway的形式来在边缘内网部署监控代理，然后再介入到统一的监控平台。</p><blockquote><p>Q：内网环境(可通过代理上网)，需要为containerd配制代理吗？还是containerd可以识别主机的代理配制？如果需要配制的话应该如何配制？</p></blockquote><p>A：如果是全局代理的话，应该是支持的。</p><blockquote><p>Q：k3s跟k8s的迭代关系是什么，每发布新版k8s，k3s都要修剪出相应的版本，还是增量开发？用k3s需不需要定期升级？</p></blockquote><p>A：我们一直在持续关注相关release notes，当有重大新特性和安全问题、功能Bug修复时我们会考虑升级版本。</p><blockquote><p>Q：Kubeedge提供的设备管理能力，K3s是否有相应的计划？</p></blockquote><p>A：已经有了相应的计划，明年会在k3s的辅助产品中体现。不过，我们会更专注核心引擎k3s的迭代。</p><blockquote><p>Q：Dind 中创建出来的容器 MTU 不正常，什么原因导致的？</p></blockquote><p>A：Dind不是本次分享的讨论范畴。dind内部的docker也是可以指定mtu的，都是灵活的配置。</p><blockquote><p>Q：请问一个问题，单机版K3S，容器内访问本机的一个服务端口，无法访问。这个端口是我服务器上一个加密狗端口，程序需要从容器中调用这个加密狗。补充一下，我加密狗调用包含tcp和UDP</p></blockquote><p>A：没有在社区中收到过类似反馈，这里不适合讨论这种很细节技术的问题，建议您提一个issue到<a href="https://github.com/rancher/k3s" target="_blank" rel="noopener">k3s</a>，我们在comment中讨论。</p><blockquote><p>Q：我尝试给containerd配了代理，单独安装的containerd可以拉镜像，但是k3s内嵌的containerd确一直没法拉镜像。这个需要怎么解决</p></blockquote><p>A：不确定你在k3s的containerd中如何配置的，k3s的containerd中的配置文件会被重置，你需要以模版方式配置<a href="https://rancher.com/docs/k3s/latest/en/configuration/#containerd-and-docker" target="_blank" rel="noopener">containerd-and-docker</a>。详细问题可以提issue到k3s来讨论。</p><blockquote><p>Q：centos在边缘设备小内存设备上能装吗？也是有内存限制的吧，最小支持多少？</p></blockquote><p>A：官方给出的内存需求是512MB，据我观察，在没有部署很多应用的情况下，内存占用一般在200多MB，占用的内存会随着部署的应用增加而增加，但是一般边缘用的工控机内存最大一般8GB，而且边缘不宜过重。</p><blockquote><p>Q： 边缘设备上做 k3s ，岂不是增加运维人员工作量吗？本来是个简单应用，变成系统了！</p></blockquote><p>A：因为边缘设备分散、网络情况不好，要统一管理和运维的话，是有难度的，后期的应用维护更新、配置变更、升级等等都是需要考虑的。如果采用传统的部署形式，虽然可以采用类似Ansible这样的自动化工具来做，但是要考虑到网络不稳定，部分设备离线情形的运维工作。所以采用类似k3s这样的统一管理平台是比较好的方案，在实践过程中发现，工作量下降了很多。如果不使用，你需要自己去watch你的应用的运行情况。自己去做类似supervisord这样的守护等等。</p><blockquote><p>Q： 边缘设备及应用，监控用的是什么方案</p></blockquote><p>A：采用在节点上部署prometheus exporter, 然后再部署一个pushgateway来做。</p><blockquote><p>Q： 最大支持多少个agent，一个server带多少agent</p></blockquote><p>A：这个没有真正的去验证过，不过我们目前的集群状态已经达到100+（1 server,剩余的全是agent)，</p><blockquote><p>Q： k3s 和 k8s 具体有多大的差别，有实例吗 ？或者数据对比。</p></blockquote><p>A：在实际的应用部署中，几乎没有任何差异，至少到目前为止，我所遇到的场景,k8s能满足的，k3s也能满足，相信，通过不断的迭代，k3s在未来会更完善边缘场景。</p><p>来自 18群 的无痕 2019-11-07 22:38:44，睡觉了拜拜！</p><h2 id="20191031：Jenkins-X：基于-Kubernetes-的-Serverless-Jenkins"><a href="#20191031：Jenkins-X：基于-Kubernetes-的-Serverless-Jenkins" class="headerlink" title="20191031：Jenkins X：基于 Kubernetes 的 Serverless Jenkins"></a>20191031：Jenkins X：基于 Kubernetes 的 Serverless Jenkins</h2><p><a href="https://shimo.im/docs/rXvrqchvXx63QtVy" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：这是干嘛的</p></blockquote><p>A：在分享有关 Kubernetes 之上的 DevOps 产品 Jenkins X，有兴趣的话可以了解一下。可以加速软件的交付速度与可靠性。</p><blockquote><p>Q：有实际应用案例吗？自己怎么快速体验JenkinsX的特性？</p></blockquote><p>A：现在国内的应用案例相对较少，是属于下一代的 CI/CD 产品，在国外的用户会更多一些。jenkins x 支持一键在大型云厂商/现有 kubernetes 集群上进行部署，可以参考官网文档安装一下。</p><blockquote><p>Q：和gitlab ci相比有什么优势</p></blockquote><p>A： 和 gitlab ci 相比的优势可以参考下 jenkins 与 jenkins x的对比。在用户角度来说，以应用为视角使用起来会更加方便，也方便利用社区资源。从架构和可维护性来说，Jenkins X 的架构会相对更加先进（与诞生年代有直接关系)。</p><blockquote><p>Q：prow现在支持gitlab了吗？现在大多数企业的代码仓库其实更多使用gitlab。</p></blockquote><p>A：prow 目前还没有支持gitlab，这也是jenkins x目前最大的一个问题，据我所知目前 jenkins x项目组在主要解决这部分问题，现在在 jenkins x当中开发最活跃的模块 lighthouse 是做这部分工作的，有兴趣的话可以了解一下。</p><blockquote><p>Q：从Jenkins迁移到X似乎需要大量功夫？</p></blockquote><p>A：现在 Jenkins X 是有两个版本的，其中一种是使用传统的 Jenkins 架构，这个迁移过去相对平滑一些，但具体也和组织情况相关。<br>不过社区主推的是基于 tekton 的方案，也被称为下一代 CI/CD 产品，如果是迁移到这种方案的话可以忘掉原来 Jenkins 所带来的经验，重新开始。</p><blockquote><p>Q：KubeSphere 计划把 Jenkins X 用进去吗？</p></blockquote><p>A：在目前版本当中还没有计划把 jenkins x 用进去，很大的原因是因为 Q4，现在 prow 支持的scm 类型太过于单一了，不太适合企业客户。</p><blockquote><p>Q：Jenkins X可以直接用于生产环境的CD吗？可以结合公司的审批流吗？与kubnetes如何协作？</p></blockquote><p>A：Jenkins X 是可以用于生产环境CD的，结合审批流应该有一定的开发量。可以看下分享有关 Jenkins X 的环境管理部分，Jenkins X 本身就是和 k8s 深度融合的。</p><blockquote><p>Q：KubeSphere DevOps 对比原生的 Jenkins 有哪些优势呢？</p></blockquote><p>A：KubeSphere DevOps 没有对原生 Jenkins 进行很大的改造。但是用户如果自己搭建 Jenkins 需要自己去了解 Jenkins 的原理以及各种和 k8s结合的方案、如何运行的更稳定。<br>如果使用 KubeSphere 的话用户可以直接使用流水线，避免掉了自己搭积木的过程。<br>并且对于一些普遍的问题，我们会向 Jenkins 提交 PR 来改进 Jenkins的功能。<br>例如下面链接所对应的 PR 让 kubernetes 的 agent 调度从10s 左右优化到了 10ms 左右<br><a href="https://github.com/jenkinsci/kubernetes-plugin/pull/598" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：谢谢</p></blockquote><p>A：所有人都在这里提问。</p><blockquote><p>Q：其实gitops完全落地在一般企业是有难度的，考虑到有一些上线审批等流程。gitops落地有什么好的建议和思考？</p></blockquote><p>A：个人认为理想状况下最好的方案还是利用 PR/MR 的方式进行开发，在 PR/MR 里面进行审核，这可能和很多企业的现状不太符合，但其实这种方案在某种程度上也是可以落地上线审批流程的。<br>可以先推行开发过程利用 PR/MR，用数据证明这种方式是可行的，再去推动生产环境部署切换工作方式。</p><blockquote><p>Q：jenkins如何做备份恢复</p></blockquote><p>A: Jenkins 的备份有很多种方案。其中一种最常见也是比较暴力的方案就是备份下整个 Jenkins Home 目录，恢复的时候直接恢复整个目录就可以了。<br>另外一种常见方案是 jenkins kubernetes operator 所采用的方案，在这个方案里面把 jenkins 的配置和操作历史记录进行了分离，配置（包括流水线的创建)都存储在 git 仓库中，而构建记录、日志等信息单独进行备份，有兴趣的话可以在 github 上找到这个项目了解一下。</p><blockquote><p>Q： jenkins X能支持jenkins现有的插件嘛？</p></blockquote><h2 id="20191029：基于-Ceph-的-Kubernetes-数据持久化"><a href="#20191029：基于-Ceph-的-Kubernetes-数据持久化" class="headerlink" title="20191029：基于 Ceph 的 Kubernetes 数据持久化"></a>20191029：基于 Ceph 的 Kubernetes 数据持久化</h2><p><a href="https://shimo.im/docs/Px6xTrqGdDCJp8hW" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：k8s 里面使用 ceph，假设 ceph 出问题。这样会导致节点 hang 住吗？导致集群不可用情况。如果会，那该如何避免。谢谢。</p></blockquote><p>A: 并不会，因为Ceph 本身是分布式高可用的，而且即使Ceph节点全挂， 也仅仅会影响使用Ceph 的Pod，而不是节点。</p><blockquote><p>Q：ceph是通过k8s部署还是原生部署。ceph和k8s节点超融合吗，还是分开。</p></blockquote><p>A：一般生产环境中都是独立部署的，3 或 5 Monitor， 3 ～ 60+ OSD 等规模。</p><blockquote><p>Q：K8S中如果使用RBD作为数据库的存储，如果库比较大的情况下，对于数据日常的备份和维护是怎么做的？</p></blockquote><p>A：可以利用快照，快速备份和恢复。在去年的KubeCon 上，华为和谷歌的小姐姐们演示过。<br>ceph与glusterfs的优缺点</p><blockquote><p>Q：在K8S中对于需要共享的存储，使用CephFS需要注意什么，会不会存在一些坑？</p></blockquote><p>A：目前存在一种说法，就是CephFS不稳定，不推荐使用。具体如何不稳定、如何触发、怎么避免就很少有人知道了，另外还有，如果CephFS不稳定，那么我们还有其它哪些替代品呢？</p><blockquote><p>Q：学习ceph有什么比较好的方式？以及如何比较有效率的实践？</p></blockquote><p>A：快速阅读一下官方文档，然后自己安装一套，再结合文档深入研究。模仿需求场景测试使用。多实践。</p><blockquote><p>Q：K8S对外暴露服务用的是那种方式呢？ 如果在一个集群里面跑不同的业务，在对他们做对外的域名解析，访问控制是怎样实现的，会不会存在一些性能问题或端口的冲突？</p></blockquote><p>A: 一般比较常见的就是单节点访问的NodePort, 配置高可用模式的Ingress等等。<br>由于每个Pod/Service端口都是独立的，所以并不用担心会跟其它冲突。除非使用了NodePort且指定了端口。</p><blockquote><p>Q：rook 和 原生的Ceph 部署方式在性能和维护上是否有区别，这两种方式如何选择？</p></blockquote><p>A：抱歉， rook还没有使用过，不过相对来说，Ceph 集群维护的重点一般都在OSD。<br>在生产环境，一般也会独立部署Ceph, 毕竟即使快速的重新调度Monitor，也可能会对集群产生轻微影响。</p><blockquote><p>Q：对于小中型公司来说ceph是个好选择么？自行维护，可以从多个方面说说k8s下如何进行存储选型么？谢谢！</p></blockquote><p>A：相对可以接受，运维并不复杂。目前k8s 上存储还是以rbd比较多一些。当然也有一些NFS，不过因为其性能与稳定性，所以不推荐使用。</p><blockquote><p>Q：如果使用BlueStore的方式，osd磁盘文件的划分是怎样的，比如WAL, DB这种文件是单独存放在SSD盘中吗，还是都存储在SAS盘中?</p></blockquote><p>A：有条件的话，且存储需求性能高的情况下，使用更高性能的SSD通常都会有更好的效果。</p><blockquote><p>Q：Ceph 中pool 数量是如何设定的，如果对集群进行扩容，PG的数量是否需要调整，调整的时候需注意什么？ 网络方面怎么去规划比较合理，谢谢</p></blockquote><p>A：目前PG的限制多一些，因为Pool里面PG是存在一定数量的，而PG数量又跟硬盘数量挂钩，所以调整时需要计算Pool的数量与OSD数量。<br>网络方面的话，在生产环境，推荐使用至少10Gbps网络，双网卡以便分离业务和集群网络，提升性能。</p><blockquote><p>Q：1.osd 是否需要做阵列？20台物理机，单台物理机1个OSD阵列还是单台物理机8个OSD裸盘？2.当大量osd出现slow ops如何处理？3.纠删码和三副本，应该如何选择</p></blockquote><p>A:磁盘数量较少时，不推荐RAID，建议由Ceph直接管理磁盘，通过并行获取更好性能。另外PG的数量计算方式也跟OSD数量有关，所以需要综合考虑。<br>这个可能需要结合监控系统，及时发现异常情况，是设备还是服务或者节点呀网络原因等等判断处理。<br>可以结合业务场景需求与集群规模和硬件配置等情况来综合考虑决定采用哪种方式。</p><blockquote><p>Q：rbd分配给具体应用比如挂载到mysql后，如果空间不足，该如何扩容？谢谢</p></blockquote><p>A：目前支持在线动态扩容。</p><blockquote><p>Q：分布式存储应用于hdfs是否可行，相对于本地存储，分布式存储的读写性能如何提高，另外ceph的bluestore效果怎么样呢？</p></blockquote><p>这个不太合适，因为HDFS本身自己就是做分布式的文件系统，且业务场景也不相同。<br>Ceph 的性能提升无外乎两个方面：更快的磁盘/SSD 和 更大带宽的网络。<br>由于直接管理了硬盘，所以其性能还是很好的。</p><blockquote><p>Q：块存储模式下，磁盘在宿主机上的数据是加密的，如果要在容器外部操作这部分持久化的数据，需要怎么操作呢？</p></blockquote><p>可以挂载操作。</p><blockquote><p>Q：ceph图形管理界面需安装什么软件？</p></blockquote><p>A: 现在不需要额外安装软件了，已经内置。</p><blockquote><p>Q：请问怎样在k8s中，实现多个容器共享一个ceph文件系统，共享文件存储建议用哪种方式？</p></blockquote><p>A: 这种需求就需要用 cephfs了。<br>共享文件存储的话，看最终客户场景，如果是给Windows等客户端使用的共享，那么可以通过ISCSI来挂载RBD到Windows共享服务器。</p><blockquote><p>Q： Cephfs 之前在海量小文件读写测试时性能非常差，性能问题目前有没有解决？</p></blockquote><p>A：性能需要靠硬件去堆。</p><blockquote><p>Q： Ceph最大支持多大的存储容量不影响性能，与分布式存储HDFS的区别有哪些？pgp和pg什么关系</p></blockquote><p>官方号称是PB级的。HDFS适合大文件，上白G的那种单个文件。<br>PG 是指定存储池存储对象的目录有多少个，PGP 是存储池 PG 的 OSD 分布组合个数。</p><blockquote><p>Q： kubernes 中现在的块存储是一个部署绑定一个块，能否做成一个pod绑定一个块，有过这方便的实践吗？可否分享一下。</p></blockquote><p>使用 StatefulSet即可，会自动创建和绑定PVC。</p><blockquote><p>Q： 目前业界ceph集群的最大规模能达到多少个节点（大致的数量级)？是怎样的一种应用场景？</p></blockquote><h2 id="20191015：Kubernetes在SHAREit的落地实战"><a href="#20191015：Kubernetes在SHAREit的落地实战" class="headerlink" title="20191015：Kubernetes在SHAREit的落地实战"></a>20191015：Kubernetes在SHAREit的落地实战</h2><p><a href="https://shimo.im/docs/KDWHyyPCtYCPcVdy" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：直接采用物理机还是有先做IaaS层虚拟化？</p></blockquote><p>A：我们做的是出海业务，基本上考虑到合规等问题，我们主要项目全部运行在公有云上。</p><blockquote><p>Q：有没有碰到调度的问题，某台服务器CPU或内存高了仍调度到这台上？</p></blockquote><p>A：遇到过，一般情况下，需要考虑你的应用是否加了很多亲和性或是nodeselector。正常的调度器，是会优先考虑资源平衡的。</p><blockquote><p>Q：请问一下coredns如何反解析pod的IP地址？不用svc的情况下，是否可以解析pod的名字？是否有用coredns的rewrite插件。</p></blockquote><p>A：这个不清楚，我们没有这样的场景。但是coredns，支持编写自己的插件。</p><blockquote><p>Q：请问下，不同云之间的延时怎么解决?你们是一朵云就部署一个完整的业务么？</p></blockquote><p>A：我们会在不同云之间通过专线打通。基本上相关联的业务会部署在一家云上。但是我们会尽量保证同一个业务部署在不同的AZ。</p><blockquote><p>Q：告警策略上有没有最佳实践分享？</p></blockquote><p>A：我们的统一报警平台基于alertmanager实现，基本上用到了它提供的静默，分组，抑制等特性。只不过我们对接了它的api，也集成到scmp当中。</p><blockquote><p>Q：配置管理是怎么做到不同环境，不同配置？</p></blockquote><p>A：我们的配置是在configmap结合数据库来实现版本管理，本质上每个集群都需要单独设置。所以不同的环境，设置不同的configmap即可。</p><blockquote><p>Q：业务的数据库是在k8s里面运行，还是单独搭集群？</p></blockquote><p>A：我们除了prometheus和一些mq，我们目前还没有尝试有状态应用。</p><blockquote><p>Q：linux内核参数优化具体你们碰到过哪些坑呢，怎么优化的呢？线上使用的centos版本和内核如何选择的？</p></blockquote><p>A：我们使用的是公有云，内核版本一般公有云提供版本中最新的。其实不同的主机类型，相应的参数不一样，需要在选型主机的时候，做大规模测试。比如 net.netfiletr 下的参数。我们会基于公有云镜像，做优化，然后利用pakcer打成新的镜像使用。</p><blockquote><p>Q：自研组件，可以开源吗？比如日志的那个</p></blockquote><p>A：SHAREit 是一个技术非常open的单位。我们从上到下，鼓励技术人员去分享。所以如果大家有需要，我们会做一下内部的整理，开源出去。同时，我也会写一些具体的文章，来讲具体的细节。</p><blockquote><p>Q：alertmanager报警，我使用的prometheus operator安装的，使用默认的微信报警，这个报警时区问题，是修改源码解决，还是使用一个webhook？报警的模板文件是如何管理的？</p></blockquote><p>A：我觉得你应该需要重新定制alertmanager的镜像，在dockerfile中修改时区。其实我们这边也fork了alertmanager，做了一些优化和功能增强，比如直接将dingtalk集成进来，避免引入webhook组件，所以我们也是自己打的镜像。至于报警模板，我们这边先把报警模板数据存放到数据库当中，然后结合confd来实现altermanager 配置文件刷新的。</p><blockquote><p>Q：hpa部分你们怎么做到根据不同业务选择不同的策略?</p></blockquote><p>目前最大的不太清楚，不少大公司可能不会公布。存储日志、备份数据等等。</p><h2 id="20190917：Prometheus架构与实践分享"><a href="#20190917：Prometheus架构与实践分享" class="headerlink" title="20190917：Prometheus架构与实践分享"></a>20190917：Prometheus架构与实践分享</h2><p><a href="https://shimo.im/docs/HPdrhHpP3DVk9wDk" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：您好，我们prometheus监控系统需要持久化监控数据，目前约存储了1.8T数据，严重影响了查询速度，gafana基本无法刷新数据了，请问有优雅的解决办法吗？</p></blockquote><p>A：1.8T都是保存在本地吗？SSD有一定的加速作用。如果数据量比较大建议使用m3db、clickhouse、opentsdb等。</p><blockquote><p>Q：如何登录prometheus数据库?</p></blockquote><p>A：prometheus本地tsdb没有登录入口，只有go的api。</p><blockquote><p>Q：企业级的promtheus监控的数据存储是基于什么呢？ES吗，还是其他的存储？</p></blockquote><p>A：我们使用m3db，集群版本的influxdb、opentsdb等都支持</p><blockquote><p>Q：现在有高可用方案吗？</p></blockquote><p>A：prometheus的联邦或者Improbable开源的Thanos都是高可用方案</p><blockquote><p>Q：promethues占用内存很好，我们的环境下45w指标大概要占用8G左右的内存，经常出现prometheus容器OOM，请注意有什么办法可以优化内存占用吗？</p></blockquote><p>A：数据指标如果确实比较大可以考虑prometheus的hash采集，分摊压力。在生产过程中很多指标都是可以省去的，譬如kubernetes中的sandbox容器的指标。</p><blockquote><p>Q：面对海量微服务，好上千个k8s节点，日钧上千上万亿的时序点数据，如何解决prometheus高可用，如何选择和解决远程存储问题？宜信目前有多大规模？有多少指标，一天大概有多少量数据</p></blockquote><p>A：目前宜信的容器大约4000左右，规模还并不大，很多服务都还部署在虚拟机里面。每天的监控数据量不到100G。历史数据通过M3db存储。</p><blockquote><p>Q：选择普通远程存储，面对持久化数据相对prometheus本地数据几十倍放大的问题如何解决，如何处理日TB级海量存储，后期如何取出数据进行分析？</p></blockquote><p>A：prometheus设计的初衷并非解决大容量存储。如果是TB数据建议保存到远端的opentsdb中。</p><blockquote><p>Q：目前prometheus能否支持对网络设备的监控，如何支持采用snmp  ssh 等协议方式的监控；能否实现与Zibbix的对接？</p></blockquote><p>A：prometheus有snmp的exporter可以实现网络监控。目前还没听说可以对接zabbix。</p><blockquote><p>Q：目前prometheus的报警rules规则是怎么管理的？报警阀值是否可动态调整？</p></blockquote><p>A：rules也是通过yaml文件配置，可以动态调整，但需要reload配置。</p><blockquote><p>Q：Prometheus的push方式（push推送给pushgateway)和pull正常的方式方式的性能比较，谁更好呢？</p></blockquote><p>A：pushgateway本身作为数据转发的代理，本身性能损耗很少。建议直接提供prometheus的pull支持</p><blockquote><p>Q： 联邦配置时，实测抓取多个job的metrics存在延迟现像极其严重，不知道有没有好的解决办法？目前我是通过grafana直接获取两个prometheus集群作为后端数据库</p></blockquote><p>A：这个主要看延迟的原因，是下面的prometheus采集慢还是联邦节点二次汇聚的慢。具体情况后续可以一起加微信排查一下。<br>2次汇聚，本地prometheus与线上prometheus,本地配置联邦，本地汇聚线上job的metrics，当job数量多了就会出现”federation failed” err=”write tcp 192.168.243.145:9090-&gt;10.0.0.12:33508: write: broken pipe”</p><blockquote><p>Q：针对于一些公司自有业务的进程数据监控是依赖于自研 的go-clent上报吗？还是说一些三方的client？</p></blockquote><p>A：如果可以二次开发建议直接在代码里面加入prometheus采集的支持，处理go 以外还有java<br>Python的sdk支持。如果不能二次开发也可以在外部通过exporter方式。</p><blockquote><p>Q：如果有多个副本 CPU利用率 还是用container_name来算就有问题了吧？另外问一下  不同版本的pod（比如发版之后)怎么比较其CPU利用率？另外histogram的metrics有分析过吗？另外 查询一个月的数据应该蛮有压力的吧还是做了优化是否有必要？</p></blockquote><p>A：嗯，多副本需要group。不同版本数据都在prometheus存储，可以通过容器名称汇聚查询出来，一个月数据step可以调整的大一些。目前看一个月内的查询基本控制在2s以内。<br>发版之后 pod name名字是不一样的<br>一种方式是通过保持container name，另外一种方式是通过前缀，正则匹配<br>我用得后者 不过会出现很多空线条 因为前面版本不存在这个pod name标签的metrics，这个和多副本的container_name 也算是有点冲突，暂时用正则的方式 多谢<br>metric名称应该是固定的啊，你用正则匹配，不会有问题的，历史都会查出来<br>另外我发现histogram的metrics超过7天之后就没有什么参考价值了 所以对于查询一个月感觉意义不大，比如 prometheus_http_request_duration_seconds， metrics还是重在实时性</p><blockquote><p>Q：Prometheus的数据不知道宜信是否有存储，是存到opentsdb还是influxdb呢？</p></blockquote><p>A：本地+m3db</p><blockquote><p>Q：prometheus告警延时比较高，如果要做到秒级告警有什么方案！调整抓取频率不太靠谱</p></blockquote><p>A：目前告警都是在几秒，你说的延迟是多长时间？</p><blockquote><p>Q： 请问针对Prometheus 不能监控日志的瑕疵，有什么好的方案可以和Prometheus 形成互补呢？</p></blockquote><p>A:公司自研了watchdog日志采集。社区常用filebeat + es+kibana方案</p><blockquote><p>Q：宜信目前用Prometheus监控了多少个服务target了？Prometheus使用的资源大概是多少？</p></blockquote><p>A:宜信正在从zabbix迁移到prometheus，目前是三台物理机。</p><blockquote><p>Q：m3db数据存储有没有放大？相对prometheus 的tsdb，有 大概有多少倍？</p></blockquote><p>A:放大是啥意思？<br>比如一天的数据pro 的tsdb存储是多少g，通过远程存储，就会放大几十倍，比如100个变成1t</p><blockquote><p>Q：请问应用进程http接口的性能监控是怎么实现的？</p></blockquote><p>A:有java和go、Python的sdk</p><blockquote><p>Q：怎么过滤掉不需要的metrics?通过prom</p></blockquote><p>A:这个可以在pro配置里面drop</p><blockquote><p>Q：本地存储用来做查询吗？多个prometheus是如何统一查询的？数据都存在汇聚的prometheus上吗</p></blockquote><p>A:</p><blockquote><p>Q：怎么实现tsdb历史数据保存到别的地方的？通过什么技术方式分开的？</p></blockquote><p>A:remote write read</p><blockquote><p>Q：时序数据库跟传统数据库的优势在哪？应该如何进行选型？</p></blockquote><p>A:时序数据是保存随时间变化的量，查询也是时间维度，从而实现高压缩比。关系型数据有事在于数据管理。</p><blockquote><p>Q：请问m3db能不能满足ha prometheus 的数据去重？还是存两份？</p></blockquote><p>A:m3db不需要存两份</p><blockquote><p>Q：比如要做每日用户登录数统计，具体应该怎么做？需要哪些流程和步骤？</p></blockquote><p>A:需要程序里面集成sdk，并提供查询累计登录用户的http接口，并在prometheus配置这个target。</p><blockquote><p>Q： 选型的时候为什么选择m3？没考虑其他远程存储吗，是有什么考虑。远程存储你们只是用来备份一份吗还是也会一起从远程读数据？之前远程读的性能比较烂，目前prom新版本的stream远程读你们有试验吗</p></blockquote><h2 id="20190919：云原生可观察性之日志管理"><a href="#20190919：云原生可观察性之日志管理" class="headerlink" title="20190919：云原生可观察性之日志管理"></a>20190919：云原生可观察性之日志管理</h2><p><a href="https://shimo.im/docs/KWJqTyw9Q3pqPDcv" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：fluentd bit 在收集的容器pod中 启用fluentd.io/parser选项 采用正则表达式匹配，发现一个正则很难试用全部场景，而且发现匹配不到日志内容的时候 节点会hung住 再重启会无法启动 一直报404启动不了 请问这个如何解决的</p></blockquote><p>A： 这个问题可以给 fluentbit 提 issue。KubeSphere 目前只用到 Parser 插件的 Decorders，主要是用 fluentbit 添加/删除/修改日志接收者，也会进行一些日志的过滤</p><blockquote><p>Q：如何debug Prometheus</p></blockquote><p>A：如果您是要参与 Prometheus 的开发，可以参考 Prometheus Github 的开发指南。如果是使用中遇到问题可以结合日志，或者查看 Prometheus Console UI 有一些直观的异常提示，到 Prometheus 社区 slack 或 Google group 请教。</p><blockquote><p>Q：Loki你们在生产上有用到吗？有没有什么最佳实践？</p></blockquote><p>A： 我们正在调研 Loki，Grafana Labs 已经用 loki 提供日志服务了。他们的部署方式参考 <a href="https://github.com/grafana/loki/tree/master/production/ksonnet" target="_blank" rel="noopener">ksonnet</a> 。建议就是几个组件要分开部署，每个组件可以有多个副本以实现高可用；另外就是根据情况选择 index 和 chunk 分别使用适合的存储。</p><blockquote><p>Q：请问一下，用户想自定义日志解析，如何实现？目前我们实现方式是 fluentd parser作为agent以deamonset的方式部署到k8s的每个节点上，一边收集一边解析，缺点是占用节点资源太多，请问咋们这边如何实现的呢？</p></blockquote><p>A：收集日志的 agent 最好用比较轻量一点的比如 fluentbit，可以把 fluentd 作为 fluentbit 的接收者，用 fluentd 实现集中的解析后再发到最终的存储，这样就不用每个节点去部署 fluentd 了。类似这样的架构</p><p><img src="../img/1575857978783.png" alt="-"></p><blockquote><p>Q：请问一下，单台日志量多少？</p></blockquote><p>A：这个不太好说，看工作负载输出日志的情况。</p><blockquote><p>Q：日志展示？ 是kibana 还是自己单独</p></blockquote><p>A：日志展示KubeSphere 没用 kibana，是我们自己开发的日志 console</p><blockquote><p>Q：接Q4，谢谢您的答疑，目前我们想的是用户自定义解析策略不用通知任何人，日志就可以以流的方式输出到es或者其它终端，目前的问题就是如果用fluentd解析 如果添加一个解析规则就要修改fluentd的配置 就要重启下 这些感觉很不好，请问这边有什么建议吗？之所以用fluentd bit解析就是因为可以在 pod上用annotation 自定义fluentd.io parser 解析策略</p></blockquote><p>A：如果想每个节点都有自己的解析方式，而且不想频繁重启的话， 并且想用一个比较轻量的 agent 的话 可以试试 filebeat，filebeat 有自动加载配置的功能，解析日志也比较强大。</p><blockquote><p>Q：KubeSphere 的日志系统看起来很漂亮啊，也是开源的吧</p></blockquote><p>A： 目前后端是开源的，前端也即将开源。目前的所有版本都是免费安装可用的。安装下载链接：<a href="https://kubesphere.io/zh-CN/install/" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：KubeSphere的日志在多集群设计上是会用 Thanos 去实现吗？优点是什么</p></blockquote><p>A：Thanos 适用于监控的多集群实现，可用实现多个 Prometheus 的全局查询。日志多集群的话用 es 实现的话 Elasticsearch 较新版本支持的。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/modules-cross-cluster-search.html" target="_blank" rel="noopener">link</a></p><blockquote><p>Q：fluent和filebeat有做过压测吗？还是因为fluentd是cncf的项目才选择这个的？</p></blockquote><p>ruby也有GIL锁，只能压榨单核性能<br>A：选择 fluentbit 主要是因为内存占用少。filebeat 也很流行，go 写的，内存占用据我说知会比 fluentbit 多一些。fluentbit 是完全用 C 写的，不是用 ruby。Fluentd 核心用的 c，插件用的 ruby</p><blockquote><p>Q：不同服务的日志都是混在一起的？而不是不同的index？容器内的日志怎么采集呢？</p></blockquote><p>A：目前是不同服务的日志每天一个index，如果想不同index的话应该要用filter加tag实现。容器内没有输出到stdout 落盘的日志可以用在容器内添加sidecar的方式将落盘日志转发到stdout。kubesphere 2.1 即将发布，自带了收集落盘日志sidecar自动注入的功能</p><blockquote><p>Q：标准输出，数据回落盘吗？怎么清理？</p></blockquote><p>标准输出，日志不会落到容器内挂载的盘，但是会落到容器所在的节点的盘上，通常这个节点的容器日志会有 rotation 设置，定期清理</p><h2 id="20190919：当-K8s-集群达到万级规模，阿里巴巴如何解决系统各组件性能问题？"><a href="#20190919：当-K8s-集群达到万级规模，阿里巴巴如何解决系统各组件性能问题？" class="headerlink" title="20190919：当 K8s 集群达到万级规模，阿里巴巴如何解决系统各组件性能问题？"></a>20190919：当 K8s 集群达到万级规模，阿里巴巴如何解决系统各组件性能问题？</h2><p><a href="https://shimo.im/docs/6KwX3CR3yRHWdtYV" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：calico网络中，如果节点跨三层，路由器不支持BGP，RR同步如何实现？</p></blockquote><p>A：这个不清楚。</p><blockquote><p>Q：由于节点IO，网络，负载过高等问题，etcd频繁选主，导致kube-apiserver方向超时。如何应对这种问题？</p></blockquote><p>A：最重要的，我们需要为 etcd 配置相对稳定的资源，CPU/Mem 视集群规模而定，Disk 最好是 SSD，因为 disk io 性能对 etcd 写性能影响巨大。我们需要检查 etcd heartbeat timeout 和 election timeout，是否适合当前集群的环境。如果有条件，建议大家能去实践 etcd 3.4，pre-vote 的引入能有效减小异常情形下的抖动。此外，今天也给大家提到了 kube-apiserver 层面的优化，通过在 kube-apiserver cache 上实现 linearizable read，避免大量的读请求打到 etcd，从而可以大幅降低 kubernetes 集群中 etcd 的压力。</p><blockquote><p>Q：当集群需要进行版本升级时，k8s各组件应该怎么操作。需要遵循顺序吗？为什么？</p></blockquote><p>A：一般遵循先升级 Server，再升级 Client 的做法。对 kubernetes 来说，先升级 kube-apiserver，再升级 controllers，最后灰度升级 kubelet。先升级 kube-apiserver 的原因是 server 是对外提供服务（接口)的，kubernetes 遵循向前兼容两个版本的机制，确保集群的兼容性，最后升级 kubelet 是因为在节点数非常多的情况下，kubelet 的升级需要一个较长的观察周期去灰度。同时提醒大家，一定要注意 kubelet 升级对节点上运行容器的影响。</p><blockquote><p>Q：在etcd里面有三个Instance，比如发生了以下场景:</p></blockquote><p>A作为leader，B和C作为follower，这时候用户通过curl指令发送了一个Put操作，A收到后通知了B和C，然后B，C回了response,这个时候A提交日志到状态机，然后回复给用户，但在回复用户的过程中挂掉了。这时候假设用户不再发起请求，但B和C选出主机后会提交该日志，也就说用户认为失败了，但etcd内部已经提交了该操作。这种情况下etcd是怎么处理的？</p><p>A：这种情况只是告诉用户超时了（结果未知)，并未告诉用户你的请求成功或者失败了（结果已知)。理解了分布式系统调用的三态，用户系统为了确保正确性，可以选择重试或者其他的方式确认自身状态的推进。</p><blockquote><p>Q：能否讲解以下etcd的幂等性的实现？</p></blockquote><p>A：幂等简单理解多次调用同一个操作不会破坏系统的正确性，典型的 put key value 操作是幂等的，delete key 也是幂等的，因为这不会破坏系统的数据状态。试想一下如果提供一个操作叫做 inc key 对 key 做 +1 操作（比如 redis 提供了类似的操作)，用户很难“正确”的使用该 API 构建正确、一致的分布式系统。当然并不是说 redis inc 不好，它可以很好的应用于某一些对一致性要求不高的场景，一个典型的例子是统计微博的点赞次数。</p><blockquote><p>Q：etcdctl在最新版本中get一个不存在的key的时候为什么不返回key not found了（标准输出中)，没有任何的提示和返回，版本3.5。</p></blockquote><p>A：因为真实语意实际上是一个 range 操作，既然是 range，当然不存在 key not found 的错误了，如果需要可以根据返回的条目确定结果。</p><blockquote><p>Q：在3.3etcd中有一个etcd处于故障状态，集群api暂时不可用这个问题除了升级etcd还有其余解决方案嘛</p></blockquote><p>A：生产环境一定要配置定期的数据备份策略，用于极端情况下的集群恢复。当然对于超过 quorum 节点，理论上我们可以扩展支持 “不安全” 的 member 调整方案，用于最大可能的恢复最近的数据，欢迎到社区发起类似 issue 的讨论，或许它就会成为我们的下一个增强。</p><blockquote><p>Q：Objects是什么呢</p></blockquote><p>A: 指 kubernetes 中的 pod/node/configmap 等资源对象</p><blockquote><p>Q：能不能整理出三个东西：名词列表、问题场景、解决办法图解版😃👍</p></blockquote><p>A: 敬请期待</p><blockquote><p>Q：kubelet 升级对节点上运行容器的影响大致有哪些呢？</p></blockquote><p>A: 比如因 spechash 的兼容性问题导致容器被意外重启</p><blockquote><p>Q：为什么acs上node节点的最大pod数量是110，和性能有关系吗？阿里云容器服务不是acs吗？</p></blockquote><p>A: acs？还是 ack，大规模的 ack 集群也是支持的，非常欢迎提工单骚扰</p><blockquote><p>Q：etcd 集群的dbsize 的存储空间和pod等数量是正比增长吗？我们一个集群400个pod db竟然达到2G，感觉不正常，另外一个集群才几十M？</p></blockquote><p>A: 也和单个 pod 的数据量大小，etcd compaction 策略有关系，etcd 会储存数据的多个版本。一般从经验上，400 pod 2G 是不太正常的，确认是否存在其他用户数据（比如超大的 configmap)，确认 compaction 正常工作。</p><blockquote><p>Q：k8s的调度时延都和什么有关系？</p></blockquote><p>A: 和集群中的节点数量，节点的 label 数量和 affinity/anti-affinity 复杂性，以及集群的资源空闲层度有关系。前两者比较好理解，最后一个是因为对于一个资源分配较满的集群，从中找到可以容纳待调度的节点需要更多的尝试次数。</p><blockquote><p>Q：目前您讲到的特性中有是否有贡献给社区的? 如果有的话,能简单说说吗?</p></blockquote><p>A: etcd 增强已经回馈社区并且在 etcd 3.4 中发布，kubernetes bookmark 已经发布到 1.15,后续版本请保持关注。我们的策略是尽最大的努力回馈到社区中，请大家放心。</p><blockquote><p>Q：请问在k8s中，遇到同一个接口对数据库查询时快时慢，然后整个系统中有很多应用都出现时快时慢的情况。这种情况下有什么好的方法去定位问题吗？感觉问题主要在statefulset的性能，和k8s内部网络上，但是却没有什么好的方法去定位.</p></blockquote><p>A：不是特别明白你的问题。</p><blockquote><p>Q：对于一个JAVA应用的pod的资源限制有什么好的经验？不知道到底应该限制多少合适？</p></blockquote><p>A：这是一个比较复杂的话题（VPA)，一般来说我们可以通过放宽 resource limit 来观察应用实际的运行情况，并通过实际经验来判断应该采用多少的 request 值。</p><blockquote><p>Q：如果kube-apiserver/kube-controller-manager/kube-scheduler是static pod形式部署的，那对这些pod做资源预留的方式，除了request/limit还有其他方法吗？</p></blockquote><p>A：一般建议隔离 control planes 节点与其他 worker 节点，避免运维上的风险。如果一定要这么做，目前没有好的方法来确保他们。</p><blockquote><p>Q：针对etcd集群，如何进行有效的监控，阿里云采用什么的方案监控集群的cpu和网络流量等，如果单节点冲高，有什么预警和排查思路吗？</p></blockquote><p>A：阿里云一般采用 kubernetes on kubernetes 的方案，用户的 kubernetes 集群部署在一个叫做管控的 kubernetes 集群之上，因此用户集群上应用的监控采用典型的 Prometheus 的方案即可。kubernetes 到 etcd 流量不均衡问题，导致单个 etcd 流量偏高，实际上我们已经做了修复方案，这一块大家也可以关注 etcd 3.4 中的 load balancer 机制。</p><blockquote><p>Q： 能否再多介绍一些apiserver上实现</p></blockquote><p>linearizable read以及通过cache实现的对客户端查询的优化那部分<br>2.etcd、API server、Controller及调度器优化实例</p><h2 id="20190903：基于Kubernetes的DevOps平台实战"><a href="#20190903：基于Kubernetes的DevOps平台实战" class="headerlink" title="20190903：基于Kubernetes的DevOps平台实战"></a>20190903：基于Kubernetes的DevOps平台实战</h2><p><a href="https://shimo.im/docs/vjw3P6rD8pyGJXqQ" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：请问老师是通过 Jenkinsfile 来控制版本管理吗，是否使用了 jenkins library，多个环境的情况下，是部署一个Jenkins master，还是每个K8s集群都带有一个 jenkins master？</p></blockquote><p>A：jenkinsfile实现整个CICD流程，使用git对jenkinsfile代码进行版本管理；目前没有使用jenkins library，但是jenkins library的方式正在重写过程中，还没有完成；多环境的实现是只在一个集群部署一套jenkins master+jenkins agent，不同的环境通过不同agent实现</p><blockquote><p>Q：我想知道这个分享有什么用？文字直播？</p></blockquote><p>A：这个我来答一下，感觉没用可以不看，没有强制要求。</p><blockquote><p>Q：每个jenkins的job里写一个jenkinsfile的repo？这样是不是太浪费了。每个repo就一个jenkinsfile文件（多环境可能有多个分支)。我们是直接写成了jenkinsfile模板，然后jenkins 构建参数传入的。不知道老师是如何权衡的</p></blockquote><p>A：不是的，所有job使用一个jenkiJenkinsnsfile。每个job就是传递一些基础参数，大多数配如编译命令，部署配置等，都是在devops平台先行配置好之后，触发job构建之后从devops拉取参数配置)</p><blockquote><p>Q：为什么拉取代码后就要进行Sonar代码扫描呢？研发的代码都没有集成编译验证，扫描代码有什么意义？</p></blockquote><p>A：不是拉取代码前进行的扫描，是拉取代码完成后进行的扫描。方便对接多语言。这个看取舍的，我们因为涉及语言种类比较多，不太容易顾全所有的语言，而且前期我们php语言的业务较多。</p><blockquote><p>Q：你们生产环境也关闭防火墙了吗？不用防火墙吗？还是你们用的其他的安全措施</p></blockquote><p>A：我们生产环境防火墙是关闭的，因为我们使用的是公有云环境，策略都是通过公有云安全组实现的。</p><blockquote><p>Q：同ansible集成那部分怎么实现的？中间涉及到传参数，例如IP地址，端口号，服务名称，是通过什么控制的？</p></blockquote><p>A：基础环境信息，都在inventory里维护。其他的一些参数放在一个group_vars中</p><blockquote><p>Q：node节点使用的是动态token还是apiserver内置的静态的token进行bootstrap的？</p></blockquote><p>A：动态token，不在apiserver的配置里指定token.csv</p><blockquote><p>Q：你们master节点和node节点都部署了多少台</p></blockquote><p>A：master节点3台，16c64G的。node有600台，配置种类比较多</p><blockquote><p>Q：能否提供一下你们基于pipeline的jenkinsfile示例？</p></blockquote><p>A：这个因为涉及公司隐私，不方便提供。但是后期基于jenkins library的代码完成后，会进行开源，请后续关注。</p><blockquote><p>Q：knative和istio现在未来前景咋样，国内有用到生产上去的吗？</p></blockquote><p>A：我们暂时还没有使用到生产上去，只是调研阶段</p><blockquote><p>Q：600个node calico用的反射模式还是node mesh?有做pod带宽限制么，谢谢！</p></blockquote><p>A：node-mesh，目前没有对带宽做任何限制，calico也遇到了不少坑，暂时也没精力进一步的使用功能</p><blockquote><p>Q：感谢老师分享。想请问下您们的运维团队是怎么配置的，谢谢？！</p></blockquote><p>A：我们分业务运维、系统运维、dba</p><blockquote><p>Q：Jenkinsfile 使用文档较少，可以提供在此遇到的坑列举几个典型吗？谢谢！</p></blockquote><p>A：使用的话，可以去参考有一本groovy的书。遇到的坑的话，大多数是CI/CD逻辑的问题，比如说，我们会有一个容器运行用户的配置，实际业务场景中有使用root的，有使用普通用户的，还会针对不同的环境适配不同的用户配置，逻辑处理出错就会导致实际部署后，pod运行异常。</p><blockquote><p>Q：请问 主机系统初始化 这一块对系统的发行版和内核版本有什么要求和建议？看到一些docker的问题是因为系统内核版本太低 （3.10 内核 kmem account 泄漏 bugs 导致节点 NotReady)，请问你们是如何选择的？</p></blockquote><p>A：目前仅支持Redhat、CentOS，内核版本是3.10,没有进行升级。以我们集群运行这么长时间看，虽然有NotReady现象，但是概率比较小，固没对考虑对内核升级</p><blockquote><p>Q： 请问下集群规模是怎么样的，node节点是怎么做资源保护的？</p></blockquote><p>A：目前600个node节点，我们目前是监控整体集群水位，在达到60%左右就会对集群进行扩容</p><blockquote><p>Q：如何实现灰度发布以及蓝绿部署</p></blockquote><p>A:基于ingress实现的，部分是使用公有云的负载均衡，通过api实现切换</p><blockquote><p>Q： 目前我们使用的gitlab-ci-runner 部署于k8s之外实现ci/cd。发现gitlab-ci在实际使用中，经常会遇到卡死报错。请问下，相比jenkins 做ci/cd 是会有什么优势，之前并没有使用过jenkins.</p></blockquote><p>A：gitlab-ci生产环境中，我们也没有使用，我们调研的结果是1、有侵入性 2、pipeline功能较弱，但是有一个好处是遇到错误好像还可以继续执行。jenkins遇到错误会中断流程。<br>基于kubeadm+calico，空闲时CPU占用达到30-40%是否正常？<br>实际使用中没有使用过kubeadm部署，因为封装东西太多，不易于排查问题。空闲时cpu到30-40，需要具体情况分析。</p><blockquote><p>Q：600个node节点都遇到过什么问题， 有什么需要注意的？</p></blockquote><p>A：前期网络上遇到的问题比较多，还包含calico bug。后面多数是一些业务使用上导致的问题，还有业务增量之后引发的各种问题。</p><blockquote><p>Q：请问是怎么配置的多个不同功能的jenkins-slave pod的还有jenkins-slave镜像怎么做的，还有一个任务中有发布和回滚怎么做呢，老师的cicd人工干预的地方在哪里?</p></blockquote><p>A：jenkins-slave镜像实际就是把jenkins的agent.jar运行在容器中。发布就如同前面所讲。回滚最终是调用helm rollback。cicd人工干预的话都是通过配置项来控制的。</p><blockquote><p>Q： 容器web应用，有没有做安全防护呢 有遇到用户恶意模拟XFF，频繁访问接口么?</p></blockquote><p>A：这个我们是在入口去做的，因为使用的公有云，直接就上了waf、各种安全产品。</p><blockquote><p>Q： k8s的编排资源是怎么弄到cmdb上的</p></blockquote><p>–anonymous-auth=false 设置后，liveness 访问报401错误，我Kube-apiserver在不停重启，这个需要怎么配置？用insecure ip和port,有不符合安全要求</p><p>这个是没有通过验证，要确认证书或者相关配置，具体的配置可以参考<a href="https://github.com/k8sre/docs/blob/master/kubernetes/kubernetes高可用集群之二进制部署.md" target="_blank" rel="noopener">我的文档</a></p><h2 id="20190829：Porter：面向裸金属环境的-Kubernetes-的开源负载均衡器"><a href="#20190829：Porter：面向裸金属环境的-Kubernetes-的开源负载均衡器" class="headerlink" title="20190829：Porter：面向裸金属环境的 Kubernetes 的开源负载均衡器"></a>20190829：Porter：面向裸金属环境的 Kubernetes 的开源负载均衡器</h2><p><a href="https://shimo.im/docs/wG6tjHJyQDGgDTQK" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q1：Porter 和calico有啥区别，简单了看了下都是用的BGP</p></blockquote><p>A：Porter是一个负载均衡器，而calico是CNI插件，用途不一样。</p><blockquote><p>Q2：porter有没有竞品？</p></blockquote><p>A：有一个metallb，以及基于F5的负载均衡器插件</p><blockquote><p>Q3：leaf节点是不是也需要部署服务?</p></blockquote><p>A：不需要，只需要开启BGP就可以了</p><blockquote><p>Q5：公司服务器就十台左右，部署的 Node 节点也比较少，网络方案使用静态路由是不是最好的选择？就是直接在上级路由器上添加 pod 的路由规则。性能方面是不是最好的选择？</p></blockquote><p>A：pod会有漂移情况的发生，手动更新一是比较麻烦，二是延迟较大。静态配置路由相比于开启BGP的路由器性能上会有一点优势，但是在pod漂移到手动更新路由中间，可能会出现服务中断，如果能承受应该是没问题的</p><h2 id="20190827：eBay-Kubernetes集群的存储实践"><a href="#20190827：eBay-Kubernetes集群的存储实践" class="headerlink" title="20190827：eBay Kubernetes集群的存储实践"></a>20190827：eBay Kubernetes集群的存储实践</h2><p><a href="https://shimo.im/docs/dJ6Gccp3JrdrCtrP" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：分布式数据库例如MongoDB在k8s上有实现方案吗?</p></blockquote><p>A：有的，我们内部NoSQL就是完全运行在容器云上的，pod部署由应用自己管理，通过svc暴露服务，存储上使用local PV，并实现了backup restore。社区应该也有比较多的实现参考。</p><blockquote><p>Q：由于环境，如网络因素，出现短时间暂时大规模掉node的情况怎么处理？</p></blockquote><p>A：如网络问题导致node连不通，对于网络存储来说，需要在网络恢复之后重连，比如cephfs kernel client和fuse都实现了reconnect</p><blockquote><p>Q：etcd集群中，v2和数据和v3的数据备份方式不一样，如何备份整个etcd数据呢？</p></blockquote><p>A：etcd server只能有一种版本，不会并存，所以按照各自版本的方式备份即可</p><blockquote><p>Q：PVC的anti affinity调度特性是k8s原生支持的吗？自研方案有计划贡献到k8s仓库吗？</p></blockquote><p>A：不是，我们是在使用MongoDB的过程中，发现master pod的io load很高，所以基于此自己开发了这个功能。</p><blockquote><p>Q：数据如何做容灾</p></blockquote><p>A：网络存储自己有多replica和rack awareness的分布，本地存储需要应用自己实现多拷贝，对于可靠性要求比较高的数据，需要做备份还原。</p><blockquote><p>Q：本地存储能说的更清楚点么？比如registar是怎么把信息同步到kubernetesnode中的。pv的删除是csi那个组件来做的？信息有哪些信息。谢谢。</p></blockquote><p>A：registar在注册节点的时候会将vg的相关信息以annotation的方式写到node对象中，pv的删除由csi-provisioner sidecar完成，大体思路可参考社区的design doc。</p><blockquote><p>Q：容器镜像如何存储和管理？</p></blockquote><p>A：我们目前用的是quay，用swift存储镜像层</p><blockquote><p>Q：redis集群，3主3从这种，如何跑在k8s上</p></blockquote><p>A：可以用statefulset的方式，具体可以参考社区的做法</p><blockquote><p>Q：使用ceph rbd会出现multiattach error，导致新pod一直处于creating状态，需要人工介入，有无自动处理方案？比如，kubelet挂掉</p></blockquote><p>A：如出现kubelet挂掉或者node hung导致kubelet不工作，有可能出现这种情况，需要实现节点的remediation，监控这些情况，重启或者下架节点，保证原来的连接断掉。</p><blockquote><p>Q：请问日志存储是在专有的节点吗？如果不是会和业务数据存储产生影响吗？空间占用,cpu，内存方面的影响。</p></blockquote><p>A：每个节点组件本身的日志和容器的日志都是通过beats来收集并上报到监控系统，不会和业务数据冲突或干扰。</p><blockquote><p>Q：存储限制是怎么做的？</p></blockquote><p>A：对于emptydir，我们使用xfs quota限制。对于PV/PVC，我们在controller层面做了每个namespace的quota limit。</p><blockquote><p>Q：ceph rbd和本地磁盘有做过benchmark么？cg v2应该只能限制本地盘吧？</p></blockquote><p>A：<img src="../img/1575857922468.png" alt="-"></p><blockquote><p>Q：kernel network storage有没有什么好的学习材料？</p></blockquote><p>A：具体是哪类存储类型，可以参见 <a href="https://www.oreilly.com/library/view/linux-device-drivers" target="_blank" rel="noopener">linux-device-drivers</a></p><blockquote><p>Q：有没有可能通过StatfulSet 实现分布式存储？来做异地容灾</p></blockquote><p>A：异地容灾是federation层面的部署，感觉和用哪类workload api没太大关系</p><blockquote><p>Q：本地存储不需要另外的scheduler-extender么？用原有的scheduler就可以了？</p></blockquote><p>A：我们是直接在原有的scheduler基础上做了修改，当时还没有extender机制，后续会考虑以extend方式放到外部</p><h2 id="20190820：小公司如何优雅地推进应用上Kubernetes容器云"><a href="#20190820：小公司如何优雅地推进应用上Kubernetes容器云" class="headerlink" title="20190820：小公司如何优雅地推进应用上Kubernetes容器云"></a>20190820：小公司如何优雅地推进应用上Kubernetes容器云</h2><p><a href="https://shimo.im/docs/wrhTKPcqcp3htR6h" target="_blank" rel="noopener">提问链接</a></p><blockquote><p>Q：有状态springcloud 微服务如何进行管理和版本控制的？</p></blockquote><p>A：微服务尽量做到无状态好。</p><blockquote><p>Q：如何开发微服务应用operator?</p></blockquote><p>A:这个我看了三次，不太懂想问的问题是啥，我理解微服务应用与operatorr貌似没有什么必然的联系。</p><blockquote><p>Q：Grafana相比Zabbix有哪些优势和不足呢？</p></blockquote><p>A：这两者是互补的，应该是问普罗米修斯吧。</p><blockquote><p>Q：helm如何落地？是否有方案开发替代的系统完成版本管理功能？</p></blockquote><p>A：暂时没有使用helm，公司使用版本管理是通过调用官方API接口来实现更新、回滚、重启等操作。</p><p>Q5你们部署k8s应用  是有用到通用的yaml模板结合helm使用嘛 ？<br>A：是的，使用通用的yaml模板，但是并没有使用helm。首先再运维平台网页上配置相关参数，发布时候传入变量值，例如启动参数、镜像地址、等生成yaml配置，然后通过API方式调用来实现部署应用。</p><blockquote><p>Q：promethues server 后端存储tsdb高可用有做么 promethues server起了多个么 ？有遇到过server会偶尔挂掉么</p></blockquote><p>A：没有做高可用，server端主动挂情况并没有出现，检查下日志看看是否有报错。</p><blockquote><p>Q：请问从虚拟机正式环境迁移到k8s正式环境，需要做些什么准备，迁移过程会不会中断业务，数据库如何切换</p></blockquote><p>A：不需要中断任务，应用部署后验证没有问题才切换负载，数据库其实不需要做啥操作，除非你是问数据库上容器的话，数据库这块暂时还没有迁移上去。</p><blockquote><p>Q：前端和后端是不是改造完全分离的，有没有耦合在一起的项目，这些项目能用ingress吗</p></blockquote><p>A：大部分项目前后端分离，耦合一起的也能用，关键如何做好转发，现在逻辑上是SLB–&gt;负载层–&gt;ingress-&gt;-service–&gt;pod</p><blockquote><p>Q：开发环境中需要提供给开发使用的一些有状态的公共服务，在k8s，网络部分如何处理，如注册在zookeeper的服务等等？</p></blockquote><p>A：容器外访问容器内采取路由跳转，暂时通过node节点网络转发，这块后继需要优化。容器内访问容器外的，可以基于内网DNS配置公共服务地址即可。</p><blockquote><p>Q：生产部署二进制还是kubeadm？</p></blockquote><p>A：开发、测试、预发布、生产环境都是使用二进制安装，主要基于ansible剧本安装，只需要修改部分地址变量（例如vip、etcd地址等)即可</p><blockquote><p>Q：自建的k8s集群，当node节点资源不足时，你们公司是如何做自动扩展node节点的？</p></blockquote><p>A：还没有实现自动扩容，暂时提供网页版扩容方案，这个也是下一步需要实现的功能之一。</p><blockquote><p>Q：老师你们公司有做蓝绿发布或金丝雀部署吗？在容器云平台上是通过什么方式去实现的？</p></blockquote><p>A：金丝雀部署功能已提供，容器这块暂时还没有开放出去，跑在原来服务器的已开发，不过公司有点特殊，金丝雀暂时只开放给测试人员测试使用。、方式以下两种：<br>a、不同的入口，测试人员可以通过切换hosts。<br>b、浏览器设置header参数即可，负载层会判断来源实现不同转发。</p><blockquote><p>Q：平时这么多微服务的yml文件是如何管理的？通过什么方式编辑和修改</p></blockquote><p>A：文件其实是不存在的，是直接脚本生成yaml数据，通过api调用，python脚本会写好基本变量，只需要传值即可，脚本截取部分你应该能看明白。</p><p><img src="../img/1575858093193.png" alt="-"></p><blockquote><p>Q：听说你们汇桔网大裁员啊！还有几个运维？？</p></blockquote><p>A： 现在运维1个</p><blockquote><p>Q：一个微服务yml文件是deployment和svc配置一起，还是分开的2个文件？</p></blockquote><p>A：文件其实是不存在的，是直接脚本生成yaml数据，通过api调用。</p><blockquote><p>Q：etcd看到v2的数据和v3的数据备份方式不一样。如何一起备份？是直接拷贝任意节点的数据文件备份就行了么？</p></blockquote><p>A：备份需要了解网络和pod数据存放在v2还是v3，明白了就可以确定那些需要备份了，容器的IP对业务应该来说是不影响的，也就是说网络地址变更后，业务还是可以正常运行。</p><blockquote><p>Q： 网络用的canal还是flannel？有测试过性能么。能否满足需求？</p></blockquote><p>A：网络使用flannel，测试过暂时满足性能需要，后继这块有考虑替换其他，但短时间先不动为主。</p><blockquote><p>Q：  有让开发人员看监控么？比如说资源使用情况？</p></blockquote><p>A： 监控平台是会开放出去的，开发人员能看到对应的pod使用情况。</p><blockquote><p>Q： 请问，我们是java项目，在业务代码打成war包后，war包很大的情况下，在发布流程中，如何完成pod中的容器的代码更新，是采用挂载代码后重启容器方式，还是采用每次重新构建代码镜像，直接更新容器，或者有什么更好的建议吗</p></blockquote><p>A：配置分离（上配置中心)，参数通过启动鉴权下载配置文件启动，这样子环境的更新只需要基于通过一个包即可。</p><blockquote><p>Q：请问，那个管理告警并发送告警监控平台是怎么设计和实现的？</p></blockquote><p>A：告警发送到监控平台不难，监控平台提供接口，数据过来做过滤存库处理，监控平台通过调用微信企业通讯录，绑定工号，发送也是调用api接口，并没有其他，只是简单做了合并收敛，5分钟内非级别为高的，统一合并发送。</p><blockquote><p>Q：有没有使用volume，集成分布式存储场景？</p></blockquote><p>A：volume这块后面会上分布式，暂时文件上传暂时上传到oss上。</p><blockquote><ul><li>Q：持续化存储推荐用的是什么，ceph可以吗，这个数据做过持久化后，怎么做高可用</li><li>Q：redis有跑在k8s上么？主从或者集群有在k8s有跑么？传统的主从跑到k8s上需要做redis主从么？</li><li>Q：  K8S PYTHON client  的对象如何转json的？自己实现decoder？</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;README&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://blog.502.li/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kindle Oasis 和 Kindle Paperwhite3 使用体验</title>
    <link href="https://blog.502.li/archives/Kindle-Oasis2-vs-Paperwhite3.html"/>
    <id>https://blog.502.li/archives/Kindle-Oasis2-vs-Paperwhite3.html</id>
    <published>2019-12-01T05:00:00.000Z</published>
    <updated>2020-01-02T14:35:23.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul><li>2019-12-01 初稿</li><li>未完成、更新中</li></ul><h2 id="历史原因"><a href="#历史原因" class="headerlink" title="历史原因"></a>历史原因</h2><h3 id="nook2"><a href="#nook2" class="headerlink" title="nook2"></a>nook2</h3><p>我第一个电纸书是巴诺的 nook2 ，是我高三的时候买的。那时候折腾这个电纸书可费了不少劲。</p><p>当时还是 nook2 能刷成 Android  2.1 ，之后还能安装 QQ ，浏览器，冷阅 coolreader 。对，当时在 nook2 上最好用的阅读器就是 coolreader 冷阅。系统默默改制后还支持全局刷新和局部刷新。总之折腾起来很爽，虽然当时还是 Android 2.1 但运行个 QQ ，浏览器什么的都不在话下。达不到流畅但能用😂。之后 nook2 送给了我姐。后来直到 2017 年才再一次买电纸书。期间都是买纸质书或者找 PDF 资源看。</p><p><img src="../img/001968968.jpg" alt="巴诺 nook2 "></p><p><img src="../img/001968966.jpg" alt="img"></p><p><img src="../img/001968967.jpg" alt="刷成 Android 版的系统"></p><h4 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h4><p>我觉着但是</p><h3 id="Kindle-入门版"><a href="#Kindle-入门版" class="headerlink" title="Kindle 入门版"></a>Kindle 入门版</h3><p>自从上大学以来一直想买个 Kindle 来看，但学生时代嘛，自己赚的钱还不够生活费，所以只好在心里种草。直到 2018 年 5 月份的时候，我在读书月的时候参加的第二次校园十佳读者活动，被评为了十佳读者之一。那一年我在我们学校的借阅量排在全校前十，进馆次数全校第二😂。所以就很轻轻松松地获奖了。奖品是新华书店的代金券 400 元。正好我市的新华书店也卖 Kindle ，想了想 400 块钱的代金券自己再加两百块钱就能买到 Kindle 了，巨爽，所以就下狠心买了 Kindle 入门版。第一次拿到 Kindle 的那一刻，心情激动死了。</p><p>kindle 入门的使用体验就是能用，对、仅仅是能用而已。没有背光知识和白天或者光线下看，到了夜间就成瞎子了。</p><h3 id="Kindle-Paperwhite3"><a href="#Kindle-Paperwhite3" class="headerlink" title="Kindle Paperwhite3"></a>Kindle Paperwhite3</h3><p>Kindle 入门版使用了大概一个多月的时间，在此期间看完了《数学女孩》三部以及《数学史》等几本书。因为姐姐要去欧洲教学一年，在那里买书不方便，所以就把 kindle 入门版给了我姐。kindle 入门版送给我姐以后我就接着和以前一样在图书馆里看纸质书。因为图书月活动我推荐给图书馆 100 多本书如今都已经买到并入馆了。所以这段时间一直在图书馆里看纸质书。没有 kindle 的那段时间里总感觉缺少点什么，到九月份开学的时候想了想要不要再买个  kindle ？用花呗分期 12 期免息买 Kindle Paperwhite3 每个月才 80 多块钱 ，感觉还可以啊。所以在九月份开学的时候又下决定买了 Kindle Paperwhite3 。</p><p>Kindle Paperwhite3 使用体验就是已经达到够用的水准了，看书和看漫画都不在话下😂。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>工作之后，开始有了微薄的收入，开始渐渐有了一些积蓄，还了一半的助学贷款，都二十好几的人了，实在没脸让家人帮我还贷款了。加上上个月”加班“多挣了点，准备买点东西提升一下自己的幸福感。对于现在的我来说，买房？首付的十之一都还没攒到，别说厕所，连块地板砖大小的面积都买不起。</p><p>我是小有成就，我是有点小积蓄，但是这有什么用？在一线城市，一座房子至少 100万+ 才能买的下吧。生于穷人家的孩子总是在体验同龄人都在毕业游而我却要为生活而奔波的落差感。与其这么辛苦，不如早日享受。无论我再怎么勤俭节约，努力工作赚外快，我知道我这辈子注定也买不起 100万+ 的房子。</p><p>贷款买房？想想以后一个月的工资要有一半来还房贷，我实在无法接受。最起码我现在虽然住在一间小破房了，但我的工资 18 倍于我的房租。我不想牺牲快乐和自由去换一套房。原本生活中的必需品，此时却变成奢侈品。反正既然也买不起房，那就不如享受，人生就是这样，在自己的承受范围内，买一些自己喜欢的东西。</p><p>我不是圣人君子，我也是有物欲的人，甚至我更加贪婪，占有欲更强。对于目前的我来讲现在最需要升级的设备就是 Kindle Paperwhite3 了。虽然使用 Kindle Paperwhite3 已经一年多了，但它用来看书的体验仅仅够用，还没达到我满意的程度。尤其是拿来看漫画的时候，更是捉襟见肘，所以有必要升级一下啦。Kindle Paperwhite3 没有物理翻页键，翻页起来有时回失灵。就是你想翻回上一页的时候死活翻不回去，很僵硬的问题。其次就是屏幕尺寸有点小，看漫画的时候需要仔细盯着眼看一些比较小的字体。</p><p>其他没啥想要的，三月份的时候给姐借了点钱买了个二手的 ThinkPad Yoga 12 笔记本，因工作需要。六月份的用第一份工资加上在在校时勤工俭学赚的 1200 块钱凑一起组装了台 AMD R5 2600 😂 台式机。暑假的时候老姐把她用了好几年的 iPhone 6s 给了我，在我手里接着续命。目前来看没啥要买的，就缺个 kindle Oasis 了。</p><h3 id="为什么不要买房呢"><a href="#为什么不要买房呢" class="headerlink" title="为什么不要买房呢"></a>为什么不要买房呢</h3><p>想必大多数人的回答都是两个字 <code>结婚</code> ，没有一套房子丈母娘也肯定不愿意。没钱买房子难道要贷款买房子嘛？首付我都付不起，更不要提还房贷了。假如一对夫妻每个月的工资都要有三分之一以上用来还房贷，这样的生活我是无法接受的。何况我又不想谈恋爱更不想结婚。</p><h3 id="为什么不要结婚呢"><a href="#为什么不要结婚呢" class="headerlink" title="为什么不要结婚呢"></a>为什么不要结婚呢</h3><p>结婚生子，拥有一个属于自己的家庭，这是每个正常人的追求，是每个正常人的生活。</p><p>但我不想要孩子，恕我自私了、，我并不觉着拥有一个孩子是多么幸福的事情。对于我开说养育孩子是是一件麻烦事儿，又要照顾孩子，又要给孩子上学什么的。没有拿到工作城市的户口还要借读或者去老家上学。老家那种国家级贫困县，教育水平和资源及其低劣。反正我是绝对不会让我的孩子再走一遍我所走过的路。</p><p>尤其是看到当今的国内的教育让我气愤的不得了。小学生都开始强制要求学习宪法，都洗脑教育唱赞歌。从小就灌输这种红色教育，我是绝对无法接受，绝对，绝对不能接受所谓的红色教、爱国教育。在我看来国内的中小学阶段的爱国教育都是扭曲的，都是用来给当权者唱赞歌的，所以我是绝对我不能让我的孩子接受这样的教育。</p><p>所以，我是绝对不会在国内结婚生子，绝对不会让我的孩子接受这种扭曲的教育。我不结婚所以就再也不用担心买房的问题，用剩下来的钱买一些自己喜欢的东西，让自己一个人过的开心一些。</p><h2 id="怎么买"><a href="#怎么买" class="headerlink" title="怎么买"></a>怎么买</h2><p>在购买之前我做足了调查，甚至有表格来分析性价比😂。当时决定要在淘宝上买个美版 Kindle Oasis2 2017。虽然 2019 年已经推出了 Kindle Oasis3 2019。我觉着升级的性价比极低，Kindle Oasis3 2019 比 Kindle Oasis2 2017 硬件上只多了几个 LED 灯而已。尺寸、内存、处理器、存储等等都几乎无差别。所以说 Kindle Oasis2 性价是不错滴。</p><h3 id="美亚"><a href="#美亚" class="headerlink" title="美亚"></a>美亚</h3><p>在黑五当天美亚上<a href="https://amzn.to/2R02n88" target="_blank" rel="noopener">Kindle Oasis 3</a>  的价格是174.99美元（人民幣約1230元），相当诱人滴。但美亚上没无法直邮，只能转运。而转运的话更为麻烦，费时费心费力。到手破损损坏的话处理起来更为麻烦。所以我就放弃了在美亚上购买。况且我也实在等不了十几天😂。而且自己买从美亚上买和在淘宝上买美版的区别不大的，都无法在国内享受保修。收到后出现坏点的话退换货成本极大，几乎无法退换货。淘宝上还能多加 20 块钱买个坏点险，如果出现四个以上的坏点的话免费换新，四个以内的话赔偿 40 块钱。</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">穷人的世界捡个垃圾都要做个表格分析一下性价比。<br>目前当务之急是把手头的 Kindle Paperwhite3 换到 Kindle Oasis 2，因为自从拿来看漫画就觉着 Kindle Paperwhite3 不够用了😂。<br>至于手机？等过几年再说吧，手头的 6s 还能续命接着用几年滴。毕竟每天 kindle 的使用时间(4h)三倍于手机。 <a href="https://t.co/EUGhXBZC7A" target="_blank" rel="noopener">pic.twitter.com/EUGhXBZC7A</a></p>&mdash; 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1199731167697756161?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">November 27, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h3 id="为什么买二手而不买未拆封美版？"><a href="#为什么买二手而不买未拆封美版？" class="headerlink" title="为什么买二手而不买未拆封美版？"></a>为什么买二手而不买未拆封美版？</h3><p>如果买国行的话，正品价格最低是 2399 ，而且依照 kindle 千年不降价的作风，对于咱来说买国行实在是买不起。如果你想买国行的话推荐淘宝上的梅先生的 kindle 店买。我上一个 Kindle Paperwhite3 就是在那里买的。</p><p>其实刚开始我是想买美版 Kindle Oasis2 的，淘宝上 1500 左右就能买到，如果自己在美亚上买的话加上转运费和税费价格也少不那里去。无论是在淘宝上还是美亚上买美版的 Kindle 都有一个共同点，退换货成本极大。淘宝上未拆封的 kindle ，买来拆封后是无法退货的，即便是有问题的机器那也算你倒霉无法退货。而在美亚上买，你邮寄回美国的运费又负担不起。</p><h3 id="闲鱼捡垃圾"><a href="#闲鱼捡垃圾" class="headerlink" title="闲鱼捡垃圾"></a>闲鱼捡垃圾</h3><p>综上决定在闲鱼上买，在咸鱼上搜了一下同城，正好找到一个卖家 。国行 Kindle Oasis2  8 GB 带官方 199￥ 的皮套，总价格 1280￥。和卖家沟通好第二天下午面交。😂第二天很顺利地完成了 PY 交易，卖家给便宜了 30￥，最终以 1250￥ 的价格买到手了 Kindle Oasis2。</p><h3 id="关于容量"><a href="#关于容量" class="headerlink" title="关于容量"></a>关于容量</h3><p>建议买 8 GB，你看书的话根本不需要 32 GB。两者价格相差 200 块钱，而仅仅多了 20 GB 的容量，性价比实在太低。 kindle 适合用来看书而不是用来存书，32 GB 的书你看十年都看不完😂，即便是 8GB 的容量也很难看完。所以没必要贪多，买 8 GB 足够。省出来那两百块钱订阅两年的 Kindle Unlimited 会员都要比多出那 20GB 的存储空间性价比高的多。</p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>在公交车上拍照<del>开箱</del>😂</p><p><img src="../img/image-20191202171108883.png" alt="KO2 在公交车上开箱😂"></p><p><img src="../img/image-20191202171129184.png" alt="KO2"></p><p><img src="../img/image-20191202171510337.png" alt="image-20191202171510337"></p><p><img src="../img/image-20191202172046660.png" alt="image-20191202172046660"></p><p><img src="../img/image-20191202172104805.png" alt="image-20191202172104805"></p><p><img src="../img/image-20191202172141495.png" alt="image-20191202172141495"></p><p><img src="../img/image-20191202172159248.png" alt="image-20191202172159248"></p><p><img src="../img/image-20191202172208956.png" alt="image-20191202172208956"></p><p><img src="../img/image-20191202172216921.png" alt="image-20191202172216921"></p><p><img src="../img/image-20191202172231655.png" alt="image-20191202172231655"></p><h3 id="看漫画"><a href="#看漫画" class="headerlink" title="看漫画"></a>看漫画</h3><p><img src="../img/image-20191203100634998.png" alt="image-20191203100634998"></p><p><img src="../img/image-20191203100645837.png" alt="image-20191203100645837"></p><p><img src="../img/image-20191203100655418.png" alt="image-20191203100655418"></p><p><img src="../img/image-20191203100706964.png" alt="image-20191203100706964"></p><h2 id="总体感受"><a href="#总体感受" class="headerlink" title="总体感受"></a>总体感受</h2><p>Kindle Oasis2 无论在尺寸还是在速度上已经满足我了，物理翻页键取代触屏翻页也方便多了。以前使用 Kindle Paperwhite3 看书的时候经常误触，按回退不知怎么地就翻到下一页。物理键取代触摸屏幕翻页效率和准确度上那是一天地上跑的和一个天上飞的区别😂。如果 Kindle Paperwhite3 能有个物理翻页键就完美无缺了。</p><p>但美中不足也有一些瑕疵，其中最大的问题就是 Kindle Oasis2 的电池太不耐用了，现在基本上是三天一充，而 Kindle Paperwhite3 一周一充。😥</p><p>另一个问题就是由于 KO2 是金属机身，冬天躲被窝里看书的时候手汗会留在上面🙃。但瑕不掩瑜，瑕不掩瑜😂</p><p><img src="../img/image-20191202172126512.png" alt="image-20191202172126512"></p><p>事后留下了一些不明液体🙃？其实是手汗😂</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bennythink.com/first-mbp.html" target="_blank" rel="noopener">还是早日享乐吧——年轻人的第一台 MacBook</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;更新日志&quot;&gt;&lt;a href=&quot;#更新日志&quot;
        
      
    
    </summary>
    
    
      <category term="阅读" scheme="https://blog.502.li/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="Kindle" scheme="https://blog.502.li/tags/Kindle/"/>
    
  </entry>
  
</feed>
